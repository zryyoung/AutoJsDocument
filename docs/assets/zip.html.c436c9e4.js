import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as i,a as s,b as n,d as a,e as t,r as c}from"./app.6aa2b576.js";const l={},r=s("h1",{id:"zip",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#zip","aria-hidden":"true"},"#"),n(" zip")],-1),d=s("blockquote",null,[s("p",null,"Stability: 2-Stable")],-1),u=s("p",null,"The Zip module is used to process file compression and decompression, and supports encryption and compression.",-1),k={href:"https://javadoc.io/doc/net.lingala.zip4j/zip4j/1.3.2/net/lingala/zip4j/model/ZipParameters.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="zip-zipdir-dir-dest-options" tabindex="-1"><a class="header-anchor" href="#zip-zipdir-dir-dest-options" aria-hidden="true">#</a> $zip.zipDir(dir, dest[, options])</h2><ul><li><code><span class="token property">dir</span></code> {string} The path of the folder to be compressed, if there are subfolders under the folder, they will be compressed together</li><li><code><span class="token property">dest</span></code> {string} The path where the compressed package is stored</li><li><code><span class="token property">options</span></code> {object} Optional parameters, option options include the following, for complete options, see <a href="#compression-options">Compression Options</a>: <ul><li><code><span class="token property">password</span></code> {string} Encrypted and compressed password. If the password is set but the encryption method is not set, the encryption method defaults to AES</li><li><code><span class="token property">compressionMethod</span></code> {string} Compression method, <code><span class="token constant">COMP_STORE</span></code> means only packaging without compression, <code><span class="token constant">COMP_DEFLATE</span></code> means compression (default)</li><li><code><span class="token property">encryptionMethod</span></code> {string} Encryption method, <code><span class="token constant">ENC_NO_ENCRYPTION</span></code> is no encryption (default), <code><span class="token constant">ENC_METHOD_STANDARD</span></code> is standard secret, <code><span class="token constant">ENC_METHOD_AES</span></code> is AES encryption</li><li><code><span class="token property">compressionLevel</span></code> {number} Compression level, 0~9, 0 is no compression, 9 is the best compression (slower speed). In versions before 8.7, the default is 0 without compression; after 8.7, the value defaults to 5 (normal compression)</li><li><code><span class="token property">aesKeyStrength</span></code> {string} AES encryption strength, including <code><span class="token constant">AES_STRENGTH_128</span></code>, <code><span class="token constant">AES_STRENGTH_192</span></code>, <code><span class="token constant">AES_STRENGTH_256</span></code></li><li><code><span class="token property">readHiddenFiles</span></code> {boolean} Whether to include hidden files when compressing the folder. If true, hidden files will be included when adding the folder to the zip</li><li><code><span class="token property">includeRootFolder</span></code> {boolean} Set a flag to indicate whether the parent folder of the added file will be included in the ZIP. If true, the parent folder of the added file will be included in the ZIP. Default true</li><li><code><span class="token property">rootFolderInZip</span></code> {string} Set the folder name of the first directory of the compressed package, if there is no first directory, create this first directory</li></ul></li></ul><p>Compress all files/folders in the folder and generate them to the target path <code><span class="token property">dest</span></code>.</p><p>A simple compressed folder example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Need to compress the file path</span>
<span class="token keyword">let</span> dir <span class="token operator">=</span> <span class="token string">&quot;./zipExample2/&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// File storage path after compression</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>$files<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// folder does not exist create folder</span>
    $files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 <span class="token comment">// Create a file, you can put a few more files or folders to run to see the effect</span>
 $files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>$files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&quot;test.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// File storage path after compression</span>
<span class="token keyword">let</span> zipFile <span class="token operator">=</span> $files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&quot;Unencrypted Compressed.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// Delete the file with the same name</span>
$files<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Compress</span>
$zip<span class="token punctuation">.</span><span class="token function">zipDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Completion of compression, path of compressed package:&quot;</span> <span class="token operator">+</span> zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Encryption and compression example</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Need to compress the file path</span>
<span class="token keyword">let</span> dir <span class="token operator">=</span> <span class="token string">&quot;./zipExample2/&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// File storage path after compression</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>$files<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// folder does not exist create folder</span>
    $files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 <span class="token comment">// Create a file, you can put a few more files or folders to run to see the effect</span>
 $files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>$files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&quot;test.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Compressed package storage path</span>
<span class="token keyword">let</span> encryptedZipFile <span class="token operator">=</span> $files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&quot;encrypted and compressed.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$files<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>encryptedZipFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delete the file with the same name</span>
<span class="token comment">// Compress</span>
$zip<span class="token punctuation">.</span><span class="token function">zipDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> encryptedZipFile<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;Auto.js Pro&quot;</span> <span class="token comment">// Compressed password</span>
    <span class="token literal-property property">compressionLevel</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// compression level</span>
    <span class="token literal-property property">aesKeyStrength</span><span class="token operator">:</span><span class="token string">&#39;AES_STRENGTH_256&#39;</span><span class="token punctuation">,</span> <span class="token comment">// encryption method</span>
    <span class="token literal-property property">readHiddenFiles</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Hidden files are not added to the compressed package</span>
    <span class="token literal-property property">includeRootFolder</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//Do not add the parent directory of the folder into the compressed package</span>
    <span class="token literal-property property">rootFolderInZip</span><span class="token operator">:</span> <span class="token string">&quot;Test&quot;</span> <span class="token comment">// Add a parent directory for the compressed package</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Encryption and compression is complete, compressed package path:&quot;</span> <span class="token operator">+</span> encryptedZipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zip-zipfile-file-dest-options" tabindex="-1"><a class="header-anchor" href="#zip-zipfile-file-dest-options" aria-hidden="true">#</a> $zip.zipFile(file, dest[, options])</h2><ul><li><code><span class="token property">file</span></code> {string} Single file path to be compressed.</li><li><code><span class="token property">dest</span></code> {string} The path where the compressed package is stored</li><li>For <code><span class="token property">options</span></code> {object} options, please refer to <a href="#compression-options">Compression Options</a></li></ul><p>Compress the single file <code><span class="token property">file</span></code> to the path <code><span class="token property">dest</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">&quot;./zipExample/test.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>$files<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> zipFilePath <span class="token operator">=</span> <span class="token string">&quot;./zipExample/test.zip&quot;</span><span class="token punctuation">;</span>
$zip<span class="token punctuation">.</span><span class="token function">zipFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> zipFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Single file compression completed, compressed package path:&quot;</span> <span class="token operator">+</span> zipFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zip-zipfiles-filelist-dest-options" tabindex="-1"><a class="header-anchor" href="#zip-zipfiles-filelist-dest-options" aria-hidden="true">#</a> $zip.zipFiles(fileList, dest[, options])</h2><ul><li><code><span class="token property">fileList</span></code> {Array&lt;string&gt;} Array of multiple file paths to be compressed</li><li><code><span class="token property">dest</span></code> {string} Compression target path</li><li><code><span class="token property">options</span></code> {object} options refer to <a href="#compression-options">compression options</a></li></ul><p>Compress multiple files <code><span class="token property">fileList</span></code> to the path <code><span class="token property">dest</span></code>. Folders cannot be included in <code><span class="token property">fileList</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> dir <span class="token operator">=</span> <span class="token string">&quot;./zipExample3/&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>$files<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;file1.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file2.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file3.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">p</span> <span class="token operator">=&gt;</span> $files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fileList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        $files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> zipMultiFile <span class="token operator">=</span> $files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&quot;Multi-file compression.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$files<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>zipMultiFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delete the file with the same name</span>
$zip<span class="token punctuation">.</span><span class="token function">zipFiles</span><span class="token punctuation">(</span>fileList<span class="token punctuation">,</span> zipMultiFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Compress</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Multi-file compression completed, compressed package path:&quot;</span> <span class="token operator">+</span> zipMultiFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zip-unzip-zipfile-dest-options" tabindex="-1"><a class="header-anchor" href="#zip-unzip-zipfile-dest-options" aria-hidden="true">#</a> $zip.unzip(zipFile, dest[, options])</h2><ul><li><code><span class="token property">zipFile</span></code> {string} The path of the compressed package file to be decompressed</li><li><code><span class="token property">dest</span></code> {string} The folder directory after decompression</li><li><code><span class="token property">options</span></code> {object} decompression options, optional, see <a href="#decompression-options">decompression options</a></li></ul><p>Unzip the zip file. If the folder <code><span class="token property">dest</span></code> does not exist, create the folder and extract the contents into it; if <code><span class="token property">dest</span></code> already exists, create a folder with the same name as the <code><span class="token property">zipFile</span></code> file under <code><span class="token property">dest</span></code>, and extract the contents to inside.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Prepare an encrypted compressed package</span>
<span class="token keyword">let</span> dir <span class="token operator">=</span> <span class="token string">&quot;./zipExample2/&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>$files<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// File storage path after compression</span>
<span class="token keyword">let</span> encryptedZipFile <span class="token operator">=</span> $files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&quot;encrypted and compressed.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$files<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>encryptedZipFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delete the file with the same name</span>
<span class="token comment">// Compress</span>
$zip<span class="token punctuation">.</span><span class="token function">zipDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> encryptedZipFile<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;Auto.js Pro&quot;</span> <span class="token comment">// Compressed password</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

$zip<span class="token punctuation">.</span><span class="token function">unzip</span><span class="token punctuation">(</span>encryptedZipFile<span class="token punctuation">,</span><span class="token string">&#39;./zipExample5&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&#39;Auto.js Pro&#39;</span> <span class="token comment">// Unzip the password</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The encrypted zip is successfully decompressed, the path of decompression:&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;./zipExample5/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zip-open-file" tabindex="-1"><a class="header-anchor" href="#zip-open-file" aria-hidden="true">#</a> $zip.open(file)</h2><ul><li><code><span class="token property">file</span></code> {string} Compressed package file path</li><li>Return {<a href="#zipfile">ZipFile</a>} ZipFile object</li></ul><p>Open a zip file and return the <code><span class="token property">ZipFile</span></code> object, which can be further zip operations.</p><h1 id="zipfile" tabindex="-1"><a class="header-anchor" href="#zipfile" aria-hidden="true">#</a> ZipFile</h1><p>The object returned by <code>$zip<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> is used to add or delete files in the compressed package, obtain file header information, and decompress.</p><h2 id="zipfile-getpath" tabindex="-1"><a class="header-anchor" href="#zipfile-getpath" aria-hidden="true">#</a> ZipFile.getPath()</h2><ul><li>Return {string} return path</li></ul><p>Get the path of the current compressed package.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">&quot;./test.zip&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> zipFile <span class="token operator">=</span> $zip<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output path &quot;./test.zip&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zipfile-isvalidzipfile" tabindex="-1"><a class="header-anchor" href="#zipfile-isvalidzipfile" aria-hidden="true">#</a> ZipFile.isValidZipFile()</h2><ul><li>Return whether {boolean} is a valid compressed package</li></ul><p>Get whether the current compressed package is a valid compressed package.</p><p>If the selected path is not a compressed package or the file does not exist, all return <code><span class="token boolean">false</span></code>.</p><h2 id="zipfile-setpassword-password" tabindex="-1"><a class="header-anchor" href="#zipfile-setpassword-password" aria-hidden="true">#</a> ZipFile.setPassword(password)</h2><ul><li><code><span class="token property">password</span></code> {string} set password</li></ul><p>If the file is an encrypted compressed package, you must use this function to set the correct decompression password to decompress the encrypted file.</p><p>Trying to decompress the encrypted compressed package without setting a password will throw an exception. If the selected compressed package file does not exist, using this function will throw a <code><span class="token property">ZipException</span></code>.</p><h2 id="zipfile-isencrypted" tabindex="-1"><a class="header-anchor" href="#zipfile-isencrypted" aria-hidden="true">#</a> ZipFile.isEncrypted()</h2><ul><li>Return {boolean} whether the compressed package is encrypted</li></ul><p>Get whether the current compressed package is an encrypted compressed package.</p><h2 id="zipfile-addfile-file-options" tabindex="-1"><a class="header-anchor" href="#zipfile-addfile-file-options" aria-hidden="true">#</a> ZipFile.addFile(file[, options])</h2><ul><li><code><span class="token property">file</span></code> {string} local file path</li><li><code><span class="token property">options</span></code> {object} Compression options, optional, see <a href="#compression-options">Compression Options</a></li></ul><p>Add the specified file in the compressed package.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> zipFile <span class="token operator">=</span> $zip<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;./app.apk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
zipFile<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zipfile-addfiles-filelist-options" tabindex="-1"><a class="header-anchor" href="#zipfile-addfiles-filelist-options" aria-hidden="true">#</a> ZipFile.addFiles(fileList, options)</h2><ul><li><code><span class="token property">fileList</span></code> {Array&lt;string&gt;} The array of local file paths to be added</li><li><code><span class="token property">options</span></code> {object} Compression options, optional, see <a href="#compression-options">Compression Options</a></li></ul><p>Add multiple files in the compressed package.</p><h2 id="zipfile-addfolder-folder-options" tabindex="-1"><a class="header-anchor" href="#zipfile-addfolder-folder-options" aria-hidden="true">#</a> ZipFile.addFolder(folder[, options])</h2><ul><li><code><span class="token property">folder</span></code> {string} folder path</li><li><code><span class="token property">options</span></code> {object} Compression options, optional, see <a href="#compression-options">Compression Options</a></li></ul><p>In the compressed packageAdd the specified folder.</p><blockquote><p>Be careful not to add the parent directory of the compressed package, otherwise it may cause endless adding loops!</p></blockquote><p>A simple example of a backup script:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> zipFile <span class="token operator">=</span> <span class="token string">&quot;/sdcard/scripts.zip&quot;</span><span class="token punctuation">;</span>
 <span class="token comment">//Specify the compressed file</span>
<span class="token keyword">let</span> zip <span class="token operator">=</span> $zip<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Start backup, depends on the number of your scripts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Add the current folder to the compressed package</span>
zip<span class="token punctuation">.</span><span class="token function">addFolder</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Backup is complete, the compressed package path is:&quot;</span> <span class="token operator">+</span> zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zipfile-removefile-file" tabindex="-1"><a class="header-anchor" href="#zipfile-removefile-file" aria-hidden="true">#</a> ZipFile.removeFile(file)</h2><ul><li><code><span class="token property">file</span></code> {string} The file to be deleted</li></ul><p>Delete the specified file in the zip file. This method first finds the file header, and then deletes the file; if the file does not exist, this method throws an exception.</p><p>If the zip file is a split zip file, this method will throw an exception, because the zip specification does not allow to update the split zip archive.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> zipFile <span class="token operator">=</span> $zip<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;./app.apk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
zipFile<span class="token punctuation">.</span><span class="token function">removeFile</span><span class="token punctuation">(</span><span class="token string">&quot;res/drawable/logo.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zipfile-extractfile-file-dest-options-newfilename" tabindex="-1"><a class="header-anchor" href="#zipfile-extractfile-file-dest-options-newfilename" aria-hidden="true">#</a> ZipFile.extractFile(file, dest[, options, newFileName])</h2><ul><li><code><span class="token property">file</span></code> {string} The file to be unzipped</li><li><code><span class="token property">dest</span></code> {string} The destination path of the decompressed file</li><li><code><span class="token property">options</span></code> {Object} Decompression options, optional. See <a href="#decompression-options">decompression options</a></li><li><code><span class="token property">newFileName</span></code> {string} The new name of the decompressed file, optional.</li></ul><p>Extract specific files from the compressed package file to the target path. If the target path is invalid, this method will throw an exception.</p><h2 id="zipfile-extractall-dest-options" tabindex="-1"><a class="header-anchor" href="#zipfile-extractall-dest-options" aria-hidden="true">#</a> ZipFile.extractAll(dest{, options})</h2><ul><li><code><span class="token property">dest</span></code> {string} Decompression path</li><li><code><span class="token property">options</span></code> {Object} Decompression options, optional. See <a href="#decompression-options">decompression options</a></li></ul><p>Unzip all files to the target path <code><span class="token property">dest</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> zip <span class="token operator">=</span> $zip<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
zip<span class="token punctuation">.</span><span class="token function">addFiles</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;./test.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
zip<span class="token punctuation">.</span><span class="token function">extractAll</span><span class="token punctuation">(</span><span class="token string">&quot;./test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zipfile-getfileheader-file" tabindex="-1"><a class="header-anchor" href="#zipfile-getfileheader-file" aria-hidden="true">#</a> ZipFile.getFileHeader(file)</h2>`,65),m=s("li",null,[s("code",null,[s("span",{class:"token property"},"file")]),n(" {string} The specified file path in the compressed package")],-1),f={href:"https://javadoc.io/doc/net.lingala.zip4j/zip4j/1.3.2/net/lingala/zip4j/model/FileHeader.html",target:"_blank",rel:"noopener noreferrer"},v=t('<p>Get the file header information of the specified file in the compressed package. The file header information includes the check value, whether it is encrypted, comments, etc.</p><h2 id="zipfile-getfileheaders" tabindex="-1"><a class="header-anchor" href="#zipfile-getfileheaders" aria-hidden="true">#</a> ZipFile.getFileHeaders()</h2><ul><li>Return {Array&lt;[FileHeader](https://javadoc.io/doc/net.lingala.zip4j/zip4j/1.3.2/net/lingala/zip4j/model/FileHeader.html)&gt;}</li></ul><p>Get the file header information of all files in the compressed package. The file header information includes the check value, whether it is encrypted, comments, etc.</p><h1 id="compression-options" tabindex="-1"><a class="header-anchor" href="#compression-options" aria-hidden="true">#</a> Compression options</h1><p><code><span class="token property">options</span></code> {object} includes:</p><ul><li><code><span class="token property">aesKeyStrength</span></code> {string} AES encryption strength, including <code><span class="token constant">AES_STRENGTH_128</span></code>, <code><span class="token constant">AES_STRENGTH_192</span></code>, <code><span class="token constant">AES_STRENGTH_256</span></code></li><li><code><span class="token property">compressionLevel</span></code> {number} Compression level, 0~9, 0 is no compression, 9 is the best compression (slower speed). In versions before 8.7, the default is 0 without compression; after 8.7, the value defaults to 5 (normal compression)</li><li><code><span class="token property">compressionMethod</span></code> {string} Compression method, <code><span class="token constant">COMP_STORE</span></code> means only packaging without compression, <code><span class="token constant">COMP_DEFLATE</span></code> means compression (default)</li><li><code><span class="token property">defaultFolderPath</span></code> {string} When compressing or adding files, specify the default folder location of the file in the compressed package</li><li><code><span class="token property">encryptionMethod</span></code> {string} Encryption method, <code><span class="token constant">ENC_NO_ENCRYPTION</span></code> is no encryption (default), <code><span class="token constant">ENC_METHOD_STANDARD</span></code> is standard secret, <code><span class="token constant">ENC_METHOD_AES</span></code> is AES encryption</li><li><code><span class="token property">fileNameInZip</span></code> {string} When compressing or adding files, specify the path and name of the file in the compressed package</li><li><code><span class="token property">includeRootFolder</span></code> {boolean} Set a flag to indicate whether the parent folder of the added file will be included in the ZIP. If true, the parent folder of the added file will be included in the ZIP. Default true</li><li><code><span class="token property">password</span></code> {string} Encrypted and compressed password. If the password is set but the encryption method is not set, the encryption method defaults to AES</li><li><code><span class="token property">readHiddenFiles</span></code> {boolean} Whether to include hidden files when compressing the folder. If true, hidden files will be included when adding the folder to the zip</li><li><code><span class="token property">rootFolderInZip</span></code> {string} Set the folder name of the first directory of the compressed package, if there is no first directory, create this first directory</li></ul><h1 id="decompression-options" tabindex="-1"><a class="header-anchor" href="#decompression-options" aria-hidden="true">#</a> Decompression options</h1><p><code><span class="token property">options</span></code> {object} includes:</p><ul><li><code><span class="token property">ignoreAttribute</span></code> {Array&lt;string&gt;} File attributes to be ignored when unzipped files are written to disk, including:</li><li><code><span class="token property">alls</span></code> all attributes</li><li><code><span class="token property">archive</span></code> compressed package attributes</li><li><code><span class="token property">dateTime</span></code> time</li><li>Whether <code><span class="token property">hidden</span></code> is hidden</li><li>Whether <code><span class="token property">readOnly</span></code> is read-only</li><li>Is <code><span class="token property">system</span></code> a system file</li></ul>',10);function g(b,y){const e=c("ExternalLinkIcon");return o(),i("div",null,[r,d,u,s("blockquote",null,[s("p",null,[n("The zip function comes from "),s("a",k,[n("zip4j"),a(e)]),n(", you can read related documents for more information.")])]),h,s("ul",null,[m,s("li",null,[n("Return {"),s("a",f,[n("FileHeader"),a(e)]),n("}")])]),v])}const F=p(l,[["render",g],["__file","zip.html.vue"]]);export{F as default};
