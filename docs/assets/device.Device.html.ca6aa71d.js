import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c,a as e,d as s,w as a,b as n,e as o,r}from"./app.6aa2b576.js";const l={},u=e("h1",{id:"class-device",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-device","aria-hidden":"true"},"#"),n(" Class: Device")],-1),h=o('<p>Device class provides methods to get device status, information, adjust device brightness, etc. It is a singleton, you can get the instance by <code><span class="token keyword">const</span> <span class="token punctuation">{</span> device <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;device&#39;</span><span class="token punctuation">)</span></code>.</p><h2 id="hierarchy" tabindex="-1"><a class="header-anchor" href="#hierarchy" aria-hidden="true">#</a> Hierarchy</h2><ul><li><p><code><span class="token property">EventEmitter</span></code></p><p>\u21B3 <strong><code><span class="token property">Device</span></code></strong></p></li></ul><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="accessors" tabindex="-1"><a class="header-anchor" href="#accessors" aria-hidden="true">#</a> Accessors</h3>',5),g=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),n(" Methods")],-1),m=o(`<h2 id="accessors-1" tabindex="-1"><a class="header-anchor" href="#accessors-1" aria-hidden="true">#</a> Accessors</h2><h3 id="androidid" tabindex="-1"><a class="header-anchor" href="#androidid" aria-hidden="true">#</a> androidId</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>androidId</strong>(): <code><span class="token property">string</span></code></p><p>Android ID.</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID</p><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code></p><hr><h3 id="battery" tabindex="-1"><a class="header-anchor" href="#battery" aria-hidden="true">#</a> battery</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>battery</strong>(): <code><span class="token property">number</span></code></p><p>The current battery level of the device, as a float between 0.0 and 1.0.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> device <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;device&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span>battery<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><hr><h3 id="batterypluggedtypes" tabindex="-1"><a class="header-anchor" href="#batterypluggedtypes" aria-hidden="true">#</a> batteryPluggedTypes</h3>`,18),v=e("code",null,[e("span",{class:"token keyword"},"get")],-1),k=e("strong",null,"batteryPluggedTypes",-1),y=e("code",null,[e("span",{class:"token property"},"PluggedType")],-1),f=o(`<p>The array of the types of power source which the device is plugged in to, for example <code><span class="token punctuation">[</span><span class="token string">&quot;usb&quot;</span><span class="token punctuation">]</span></code> means connected to USB power, <code><span class="token punctuation">[</span><span class="token string">&quot;ac&quot;</span><span class="token punctuation">]</span></code> means connected to AC power. If the device is not connected to power, it returns an empty array.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> device <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;device&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span>batteryPluggedTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4>`,4),b=e("code",null,[e("span",{class:"token property"},"PluggedType")],-1),_=o(`<hr><h3 id="bootloader" tabindex="-1"><a class="header-anchor" href="#bootloader" aria-hidden="true">#</a> bootloader</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>bootloader</strong>(): <code><span class="token property">string</span></code></p><p>The system bootloader version number.</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Build.html#BOOTLOADER</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code></p><hr><h3 id="brightness" tabindex="-1"><a class="header-anchor" href="#brightness" aria-hidden="true">#</a> brightness</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>brightness</strong>(): <code><span class="token property">number</span></code></p><p>The brightness mode of the device.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> device <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span>brightness<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set the brightness to 255</span>
device<span class="token punctuation">.</span>brightness <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/provider/Settings.System#SCREEN_BRIGHTNESS</p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><p>\u2022 <code><span class="token keyword">set</span></code> <strong>brightness</strong>(<code><span class="token property">value</span></code>): <code><span class="token keyword">void</span></code></p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">value</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td></tr></tbody></table><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code><span class="token keyword">void</span></code></p><hr><h3 id="brightnessmode" tabindex="-1"><a class="header-anchor" href="#brightnessmode" aria-hidden="true">#</a> brightnessMode</h3>`,24),x=e("code",null,[e("span",{class:"token keyword"},"get")],-1),w=e("strong",null,"brightnessMode",-1),D=e("code",null,[e("span",{class:"token property"},"BrightnessMode")],-1),S=o(`<p>The brightness mode of the device.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> device<span class="token punctuation">,</span> BrightnessMode <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span>brightnessMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set the brightness to automatic brightness</span>
device<span class="token punctuation">.</span>brightnessMode <span class="token operator">=</span> BrightnessMode<span class="token punctuation">.</span><span class="token constant">AUTOMATIC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/provider/Settings.System#SCREEN_BRIGHTNESS_MODE</p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4>`,5),T=e("code",null,[e("span",{class:"token property"},"BrightnessMode")],-1),R=o('<p>\u2022 <code><span class="token keyword">set</span></code> <strong>brightnessMode</strong>(<code><span class="token property">value</span></code>): <code><span class="token keyword">void</span></code></p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4>',2),I=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type")])],-1),E=e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token property"},"value")])],-1),M={style:{"text-align":"left"}},A=e("code",null,[e("span",{class:"token property"},"BrightnessMode")],-1),q=o('<h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code><span class="token keyword">void</span></code></p><hr><h3 id="buildid" tabindex="-1"><a class="header-anchor" href="#buildid" aria-hidden="true">#</a> buildId</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>buildId</strong>(): <code><span class="token property">string</span></code></p><p>Either a changelist number, or a label like &quot;M4-rc20&quot;.</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Build.html#ID</p><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code></p><hr><h3 id="cpuapis" tabindex="-1"><a class="header-anchor" href="#cpuapis" aria-hidden="true">#</a> cpuApis</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>cpuApis</strong>(): <code><span class="token property">string</span></code>[]</p><p>An array of supported CPU architectures, such as <code><span class="token punctuation">[</span><span class="token string">&#39;arm64-v8a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;armeabi-v7a&#39;</span><span class="token punctuation">]</span></code>.</p><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code>[]</p><hr><h3 id="display" tabindex="-1"><a class="header-anchor" href="#display" aria-hidden="true">#</a> display</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>display</strong>(): <code><span class="token property">string</span></code></p><p>A build ID string meant for displaying to the user</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Build.html#DISPLAY</p><h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code></p><hr><h3 id="displaymetrics" tabindex="-1"><a class="header-anchor" href="#displaymetrics" aria-hidden="true">#</a> displayMetrics</h3>',26),P=e("code",null,[e("span",{class:"token keyword"},"get")],-1),N=e("strong",null,"displayMetrics",-1),V=e("code",null,[e("span",{class:"token property"},"DisplayMetrics")],-1),B=e("p",null,"The display related information, such as width, height, pixel density, etc.",-1),j=e("p",null,[e("strong",null,[e("code",null,[e("span",{class:"token property"},"See")])])],-1),O=e("h4",{id:"returns-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-11","aria-hidden":"true"},"#"),n(" Returns")],-1),C=e("code",null,[e("span",{class:"token property"},"DisplayMetrics")],-1),H=o('<hr><h3 id="externalstoragedirectory" tabindex="-1"><a class="header-anchor" href="#externalstoragedirectory" aria-hidden="true">#</a> externalStorageDirectory</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>externalStorageDirectory</strong>(): <code><span class="token property">string</span></code></p><p>Return the primary shared/external storage directory. This directory may not currently be accessible if it has been mounted by the user on their computer, has been removed from the device, or some other problem has happened. You can determine its current state with getExternalStorageState().</p><p>Note: don&#39;t be confused by the word &quot;external&quot; here. This directory can better be thought as media/shared storage. It is a filesystem that can hold a relatively large amount of data and that is shared across all applications (does not enforce permissions). Traditionally this is an SD card, but it may also be implemented as built-in storage in a device that is distinct from the protected internal storage and can be mounted as a filesystem on a computer.</p><p>On devices with multiple users (as described by UserManager), each user has their own isolated shared storage. Applications only have access to the shared storage for the user they&#39;re running as.</p><p>In devices with multiple shared/external storage directories, this directory represents the primary storage that the user will interact with. Access to secondary storage is available through Context.getExternalFilesDirs(String), Context.getExternalCacheDirs(), and Context.getExternalMediaDirs().</p><p>Applications should not directly use this top-level directory, in order to avoid polluting the user&#39;s root namespace. Any files that are private to the application should be placed in a directory returned by Context.getExternalFilesDir, which the system will take care of deleting if the application is uninstalled. Other shared files should be placed in one of the directories returned by getExternalStoragePublicDirectory.</p><p>Writing to this path requires the Manifest.permission.WRITE_EXTERNAL_STORAGE permission, and starting in Build.VERSION_CODES.KITKAT, read access requires the Manifest.permission.READ_EXTERNAL_STORAGE permission, which is automatically granted if you hold the write permission.</p><p>Starting in Build.VERSION_CODES.KITKAT, if your application only needs to store internal data, consider using Context.getExternalFilesDir(String), Context.getExternalCacheDir(), or Context.getExternalMediaDirs(), which require no permissions to read or write.</p><p>This path may change between platform versions, so applications should only persist relative paths.</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Environment#getExternalStorageDirectory()</p><h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code></p><hr><h3 id="fingerprint" tabindex="-1"><a class="header-anchor" href="#fingerprint" aria-hidden="true">#</a> fingerprint</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>fingerprint</strong>(): <code><span class="token property">string</span></code></p><p>A string that uniquely identifies this build. Do not attempt to parse this value.</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Build.html#FINGERPRINT</p><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code></p><hr><h3 id="hardware" tabindex="-1"><a class="header-anchor" href="#hardware" aria-hidden="true">#</a> hardware</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>hardware</strong>(): <code><span class="token property">string</span></code></p><p>The name of the hardware (from the kernel command line or /proc).</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Build.html#HARDWARE</p><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code></p><hr><h3 id="imei" tabindex="-1"><a class="header-anchor" href="#imei" aria-hidden="true">#</a> imei</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>imei</strong>(): <code><span class="token keyword">null</span></code> | <code><span class="token property">string</span></code></p><p>Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones. Return null if device ID is not available.</p><p>Starting with API level 29, applications are not allowed to access IMEI.</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/telephony/TelephonyManager#getDeviceId()</p><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15" aria-hidden="true">#</a> Returns</h4><p><code><span class="token keyword">null</span></code> | <code><span class="token property">string</span></code></p><hr><h3 id="macaddress" tabindex="-1"><a class="header-anchor" href="#macaddress" aria-hidden="true">#</a> macAddress</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>macAddress</strong>(): <code><span class="token keyword">null</span></code> | <code><span class="token property">string</span></code></p><h4 id="returns-16" tabindex="-1"><a class="header-anchor" href="#returns-16" aria-hidden="true">#</a> Returns</h4><p><code><span class="token keyword">null</span></code> | <code><span class="token property">string</span></code></p><hr><h3 id="memoryinfo" tabindex="-1"><a class="header-anchor" href="#memoryinfo" aria-hidden="true">#</a> memoryInfo</h3>',47),L=e("code",null,[e("span",{class:"token keyword"},"get")],-1),G=e("strong",null,"memoryInfo",-1),F=e("code",null,[e("span",{class:"token property"},"MemoryInfo")],-1),U=o(`<p>Return general information about the memory state of the system, including total memory, available memory, etc. This can be used to help decide how to manage your own memory.</p><p>Memory units are bytes.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> device <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;device&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">total memory: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>device<span class="token punctuation">.</span>memoryInfo<span class="token punctuation">.</span>totalMem <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> MB</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span>memoryInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/app/ActivityManager#getMemoryInfo(android.app.ActivityManager.MemoryInfo)</p><h4 id="returns-17" tabindex="-1"><a class="header-anchor" href="#returns-17" aria-hidden="true">#</a> Returns</h4>`,7),K=e("code",null,[e("span",{class:"token property"},"MemoryInfo")],-1),W=e("hr",null,null,-1),Y=e("h3",{id:"product",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#product","aria-hidden":"true"},"#"),n(" product")],-1),X=e("code",null,[e("span",{class:"token keyword"},"get")],-1),z=e("strong",null,"product",-1),$=e("code",null,[e("span",{class:"token property"},"Product")],-1),J=o(`<p>Device product information, including product name, device name, device board name, product brand, product model.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> device <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;device&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// {</span>
<span class="token comment">//  name: &#39;mars&#39;,</span>
<span class="token comment">//  device: &#39;mars&#39;,</span>
<span class="token comment">//  board: &#39;mars&#39;,</span>
<span class="token comment">//  brand: &#39;Xiaomi&#39;,</span>
<span class="token comment">//  model: &#39;M2102K1AC&#39;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Build.html#PRODUCT</p><h4 id="returns-18" tabindex="-1"><a class="header-anchor" href="#returns-18" aria-hidden="true">#</a> Returns</h4>`,6),Q=e("code",null,[e("span",{class:"token property"},"Product")],-1),Z=o('<hr><h3 id="screenheight" tabindex="-1"><a class="header-anchor" href="#screenheight" aria-hidden="true">#</a> screenHeight</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>screenHeight</strong>(): <code><span class="token property">number</span></code></p><p>The height of the screen in pixels.</p><h4 id="returns-19" tabindex="-1"><a class="header-anchor" href="#returns-19" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><hr><h3 id="screenwidth" tabindex="-1"><a class="header-anchor" href="#screenwidth" aria-hidden="true">#</a> screenWidth</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>screenWidth</strong>(): <code><span class="token property">number</span></code></p><p>The width of the screen in pixels.</p><h4 id="returns-20" tabindex="-1"><a class="header-anchor" href="#returns-20" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><hr><h3 id="serial" tabindex="-1"><a class="header-anchor" href="#serial" aria-hidden="true">#</a> serial</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>serial</strong>(): <code><span class="token property">string</span></code></p><p>Gets the hardware serial number, if available.</p><p>Starting with API level 29, persistent device identifiers are guarded behind additional restrictions, and apps are recommended to use resettable identifiers (see Best practices for unique identifiers). This method can be invoked if one of the following requirements is met:</p><ul><li>If the calling app has been granted the READ_PRIVILEGED_PHONE_STATE permission; this is a privileged permission that can only be granted to apps preloaded on the device.</li><li>If the calling app has carrier privileges (see TelephonyManager.hasCarrierPrivileges()) on any active subscription.</li><li>If the calling app is the default SMS role holder (see RoleManager.isRoleHeld(String)).</li><li>If the calling app is the device owner of a fully-managed device, a profile owner of an organization-owned device, or their delegates (see DevicePolicyManager.getEnrollmentSpecificId()).</li></ul><p>If the calling app does not meet one of these requirements then this method will behave as follows:</p><ul><li>If the calling app&#39;s target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then Build#UNKNOWN is returned.</li><li>If the calling app&#39;s target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or higher, then a SecurityException is thrown.</li></ul><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Build.html#getSerial()</p><h4 id="returns-21" tabindex="-1"><a class="header-anchor" href="#returns-21" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code></p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="cancelvibration" tabindex="-1"><a class="header-anchor" href="#cancelvibration" aria-hidden="true">#</a> cancelVibration</h3><p>\u25B8 <strong>cancelVibration</strong>(): <code><span class="token keyword">void</span></code></p><p>Turn the vibrator off.</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Vibrator.html#cancel()</p><h4 id="returns-22" tabindex="-1"><a class="header-anchor" href="#returns-22" aria-hidden="true">#</a> Returns</h4><p><code><span class="token keyword">void</span></code></p><hr><h3 id="getvolume" tabindex="-1"><a class="header-anchor" href="#getvolume" aria-hidden="true">#</a> getVolume</h3><p>\u25B8 <strong>getVolume</strong>(<code><span class="token property">type</span></code>): <code><span class="token property">number</span></code></p><p>Gets the volume for a particular stream type. For example, using <code>device<span class="token punctuation">.</span><span class="token function">getVolume</span><span class="token punctuation">(</span><span class="token string">&quot;music&quot;</span><span class="token punctuation">)</span></code> to get the current music volume.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>',37),ee=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),ne=e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token property"},"type")])],-1),se={style:{"text-align":"left"}},te=e("code",null,[e("span",{class:"token property"},"StreamType")],-1),ae={style:{"text-align":"left"}},oe=o('<h4 id="returns-23" tabindex="-1"><a class="header-anchor" href="#returns-23" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><hr><h3 id="getvolumerange" tabindex="-1"><a class="header-anchor" href="#getvolumerange" aria-hidden="true">#</a> getVolumeRange</h3>',4),re=e("strong",null,"getVolumeRange",-1),ie=e("code",null,[e("span",{class:"token property"},"type")],-1),pe=e("code",null,[e("span",{class:"token property"},"StreamVolumeRange")],-1),de=o('<p>Gets the volume range for a particular stream type. e.g. <code><span class="token punctuation">{</span><span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">}</span></code>.</p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4>',2),ce=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),le=e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token property"},"type")])],-1),ue={style:{"text-align":"left"}},he=e("code",null,[e("span",{class:"token property"},"StreamType")],-1),ge={style:{"text-align":"left"}},me=e("h4",{id:"returns-24",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-24","aria-hidden":"true"},"#"),n(" Returns")],-1),ve=e("code",null,[e("span",{class:"token property"},"StreamVolumeRange")],-1),ke=o('<hr><h3 id="setvolume" tabindex="-1"><a class="header-anchor" href="#setvolume" aria-hidden="true">#</a> setVolume</h3><p>\u25B8 <strong>setVolume</strong>(<code><span class="token property">type</span></code>, <code><span class="token property">volume</span></code>, <code>flags<span class="token operator">?</span></code>): <code><span class="token keyword">void</span></code></p><p>Sets the volume for a particular stream type. For example, <code>device<span class="token punctuation">.</span><span class="token function">setVolume</span><span class="token punctuation">(</span><span class="token string">&quot;music&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></code> to set the music volume to 10.</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4>',5),ye=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Default value"),e("th",{style:{"text-align":"left"}},"Description")])],-1),fe=e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token property"},"type")])],-1),be={style:{"text-align":"left"}},_e=e("code",null,[e("span",{class:"token property"},"StreamType")],-1),xe=e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token keyword"},"undefined")])],-1),we={style:{"text-align":"left"}},De=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token property"},"volume")])]),e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token property"},"number")])]),e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token keyword"},"undefined")])]),e("td",{style:{"text-align":"left"}},[n("The volume to set. This value must be in the range "),e("code",null,[e("span",{class:"token number"},"0")]),n(" to "),e("code",null,[e("span",{class:"token property"},"maxVolume")]),n(" inclusive.")])],-1),Se=e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token property"},"flags")])],-1),Te=e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token property"},"string")]),n("[]")],-1),Re=e("td",{style:{"text-align":"left"}},[e("code",null,[e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]")])],-1),Ie={style:{"text-align":"left"}},Ee=o('<code><span class="token punctuation">[</span><span class="token string">&#39;SHOW_UI&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PLAY_SOUND&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;VIBRATE&#39;</span><span class="token punctuation">]</span></code>',1),Me={href:"https://developer.android.com/reference/kotlin/android/media/AudioManager#FLAG_PLAY_SOUND",target:"_blank",rel:"noopener noreferrer"},Ae=o('<h4 id="returns-25" tabindex="-1"><a class="header-anchor" href="#returns-25" aria-hidden="true">#</a> Returns</h4><p><code><span class="token keyword">void</span></code></p><hr><h3 id="vibrate" tabindex="-1"><a class="header-anchor" href="#vibrate" aria-hidden="true">#</a> vibrate</h3><p>\u25B8 <strong>vibrate</strong>(<code><span class="token property">millis</span></code>): <code><span class="token keyword">void</span></code></p><p>Vibrate constantly for the specified period of time. The app should be in the foreground for the vibration to happen.</p><p><strong><code><span class="token property">See</span></code></strong></p><p>https://developer.android.com/reference/android/os/Vibrator.html#vibrate(long)</p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">millis</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">Vibration time, in milliseconds</td></tr></tbody></table><h4 id="returns-26" tabindex="-1"><a class="header-anchor" href="#returns-26" aria-hidden="true">#</a> Returns</h4><p><code><span class="token keyword">void</span></code></p>',12);function qe(Pe,Ne){const t=r("RouterLink"),i=r("ExternalLinkIcon");return d(),c("div",null,[e("p",null,[s(t,{to:"/en/v9/generated/"},{default:a(()=>[n("Auto.js Pro 9 Docs")]),_:1}),n(" / "),s(t,{to:"/en/v9/generated/modules/device.html"},{default:a(()=>[n("device")]),_:1}),n(" / Device")]),u,e("p",null,[s(t,{to:"/en/v9/generated/modules/device.html"},{default:a(()=>[n("device")]),_:1}),n(".Device")]),h,e("ul",null,[e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#androidid"},{default:a(()=>[n("androidId")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#battery"},{default:a(()=>[n("battery")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#batterypluggedtypes"},{default:a(()=>[n("batteryPluggedTypes")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#bootloader"},{default:a(()=>[n("bootloader")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#brightness"},{default:a(()=>[n("brightness")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#brightnessmode"},{default:a(()=>[n("brightnessMode")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#buildid"},{default:a(()=>[n("buildId")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#cpuapis"},{default:a(()=>[n("cpuApis")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#display"},{default:a(()=>[n("display")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#displaymetrics"},{default:a(()=>[n("displayMetrics")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#externalstoragedirectory"},{default:a(()=>[n("externalStorageDirectory")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#fingerprint"},{default:a(()=>[n("fingerprint")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#hardware"},{default:a(()=>[n("hardware")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#imei"},{default:a(()=>[n("imei")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#macaddress"},{default:a(()=>[n("macAddress")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#memoryinfo"},{default:a(()=>[n("memoryInfo")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#product"},{default:a(()=>[n("product")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#screenheight"},{default:a(()=>[n("screenHeight")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#screenwidth"},{default:a(()=>[n("screenWidth")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#serial"},{default:a(()=>[n("serial")]),_:1})])]),g,e("ul",null,[e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#cancelvibration"},{default:a(()=>[n("cancelVibration")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#getvolume"},{default:a(()=>[n("getVolume")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#getvolumerange"},{default:a(()=>[n("getVolumeRange")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#setvolume"},{default:a(()=>[n("setVolume")]),_:1})]),e("li",null,[s(t,{to:"/en/v9/generated/classes/device.Device.html#vibrate"},{default:a(()=>[n("vibrate")]),_:1})])]),m,e("p",null,[n("\u2022 "),v,n(),k,n("(): "),s(t,{to:"/en/v9/generated/modules/device.html#pluggedtype"},{default:a(()=>[y]),_:1}),n("[]")]),f,e("p",null,[s(t,{to:"/en/v9/generated/modules/device.html#pluggedtype"},{default:a(()=>[b]),_:1}),n("[]")]),_,e("p",null,[n("\u2022 "),x,n(),w,n("(): "),s(t,{to:"/en/v9/generated/enums/device.BrightnessMode.html"},{default:a(()=>[D]),_:1})]),S,e("p",null,[s(t,{to:"/en/v9/generated/enums/device.BrightnessMode.html"},{default:a(()=>[T]),_:1})]),R,e("table",null,[I,e("tbody",null,[e("tr",null,[E,e("td",M,[s(t,{to:"/en/v9/generated/enums/device.BrightnessMode.html"},{default:a(()=>[A]),_:1})])])])]),q,e("p",null,[n("\u2022 "),P,n(),N,n("(): "),s(t,{to:"/en/v9/generated/interfaces/device.DisplayMetrics.html"},{default:a(()=>[V]),_:1})]),B,j,e("p",null,[s(t,{to:"/en/v9/generated/interfaces/device.DisplayMetrics.html"},{default:a(()=>[n("DisplayMetrics")]),_:1})]),O,e("p",null,[s(t,{to:"/en/v9/generated/interfaces/device.DisplayMetrics.html"},{default:a(()=>[C]),_:1})]),H,e("p",null,[n("\u2022 "),L,n(),G,n("(): "),s(t,{to:"/en/v9/generated/interfaces/device.MemoryInfo.html"},{default:a(()=>[F]),_:1})]),U,e("p",null,[s(t,{to:"/en/v9/generated/interfaces/device.MemoryInfo.html"},{default:a(()=>[K]),_:1})]),W,Y,e("p",null,[n("\u2022 "),X,n(),z,n("(): "),s(t,{to:"/en/v9/generated/interfaces/device.Product.html"},{default:a(()=>[$]),_:1})]),J,e("p",null,[s(t,{to:"/en/v9/generated/interfaces/device.Product.html"},{default:a(()=>[Q]),_:1})]),Z,e("table",null,[ee,e("tbody",null,[e("tr",null,[ne,e("td",se,[s(t,{to:"/en/v9/generated/modules/device.html#streamtype"},{default:a(()=>[te]),_:1})]),e("td",ae,[n("The stream type whose volume should be returned. One of "),s(t,{to:"/en/v9/generated/modules/device.html#streamtype"},{default:a(()=>[n("StreamType")]),_:1})])])])]),oe,e("p",null,[n("\u25B8 "),re,n("("),ie,n("): "),s(t,{to:"/en/v9/generated/interfaces/device.StreamVolumeRange.html"},{default:a(()=>[pe]),_:1})]),de,e("table",null,[ce,e("tbody",null,[e("tr",null,[le,e("td",ue,[s(t,{to:"/en/v9/generated/modules/device.html#streamtype"},{default:a(()=>[he]),_:1})]),e("td",ge,[n("The stream type whose volume range should be returned. One of "),s(t,{to:"/en/v9/generated/modules/device.html#streamtype"},{default:a(()=>[n("StreamType")]),_:1})])])])]),me,e("p",null,[s(t,{to:"/en/v9/generated/interfaces/device.StreamVolumeRange.html"},{default:a(()=>[ve]),_:1})]),ke,e("table",null,[ye,e("tbody",null,[e("tr",null,[fe,e("td",be,[s(t,{to:"/en/v9/generated/modules/device.html#streamtype"},{default:a(()=>[_e]),_:1})]),xe,e("td",we,[n("The stream type whose volume should be set. One of "),s(t,{to:"/en/v9/generated/modules/device.html#streamtype"},{default:a(()=>[n("StreamType")]),_:1})])]),De,e("tr",null,[Se,Te,Re,e("td",Ie,[n("Optional flags. For example, "),Ee,n(" indicates that showing ui, playing sound and vibrating when adjusts volume. Flags can be any of the values in documentation of "),e("a",Me,[n("AudioManager"),s(i)]),n(".")])])])]),Ae])}const je=p(l,[["render",qe],["__file","device.Device.html.vue"]]);export{je as default};
