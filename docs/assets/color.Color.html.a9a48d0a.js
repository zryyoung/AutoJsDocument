import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as p,a as n,d as a,w as t,b as s,e as o,r as c}from"./app.6aa2b576.js";const i={},d=n("h1",{id:"class-color",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-color","aria-hidden":"true"},"#"),s(" Class: Color")],-1),u=n("p",null,"An immutable 32 bit color value in ARGB format.",-1),h=n("h2",{id:"table-of-contents",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),s(" Table of contents")],-1),k=n("h3",{id:"constructors",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#constructors","aria-hidden":"true"},"#"),s(" Constructors")],-1),g=n("h3",{id:"accessors",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#accessors","aria-hidden":"true"},"#"),s(" Accessors")],-1),f=n("h3",{id:"methods",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),s(" Methods")],-1),m=o(`<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>\u2022 <strong>new Color</strong>(<code><span class="token property">value</span></code>)</p><p>Constructs a color from an integer value.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">value</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">An integer value, formatted as 0xAARRGGBB</td></tr></tbody></table><h2 id="accessors-1" tabindex="-1"><a class="header-anchor" href="#accessors-1" aria-hidden="true">#</a> Accessors</h2><h3 id="alpha" tabindex="-1"><a class="header-anchor" href="#alpha" aria-hidden="true">#</a> alpha</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>alpha</strong>(): <code><span class="token property">number</span></code></p><p>The alpha channel of this color in an 8 bit value.</p><p>A value of 0 means this color is fully transparent. A value of 255 means this color is fully opaque.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// black</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 255</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><hr><h3 id="blue" tabindex="-1"><a class="header-anchor" href="#blue" aria-hidden="true">#</a> blue</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>blue</strong>(): <code><span class="token property">number</span></code></p><p>The blue channel of this color in an 8 bit value.</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><hr><h3 id="green" tabindex="-1"><a class="header-anchor" href="#green" aria-hidden="true">#</a> green</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>green</strong>(): <code><span class="token property">number</span></code></p><p>The green channel of this color in an 8 bit value.</p><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><hr><h3 id="opacity" tabindex="-1"><a class="header-anchor" href="#opacity" aria-hidden="true">#</a> opacity</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>opacity</strong>(): <code><span class="token property">number</span></code></p><p>The alpha channel of this color as a floating value.</p><p>A value of 0.0 means this color is fully transparent. A value of 1.0 means this color is fully opaque.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// black</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span>opacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><hr><h3 id="red" tabindex="-1"><a class="header-anchor" href="#red" aria-hidden="true">#</a> red</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>red</strong>(): <code><span class="token property">number</span></code></p><p>The red channel of this color in an 8 bit value.</p><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><hr><h3 id="value" tabindex="-1"><a class="header-anchor" href="#value" aria-hidden="true">#</a> value</h3><p>\u2022 <code><span class="token keyword">get</span></code> <strong>value</strong>(): <code><span class="token property">number</span></code></p><p>A 32 bit value representing this color.</p><p>The bits are assigned as follows:</p><ul><li>Bits 24-31 are the alpha value.</li><li>Bits 16-23 are the red value.</li><li>Bits 8-15 are the green value.</li><li>Bits 0-7 are the blue value.</li></ul><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">number</span></code></p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="equals" tabindex="-1"><a class="header-anchor" href="#equals" aria-hidden="true">#</a> equals</h3><p>\u25B8 <strong>equals</strong>(<code><span class="token property">obj</span></code>): <code><span class="token property">boolean</span></code></p><p>Compare two colors is equal, including alpha channel.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4>`,55),y=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Name"),n("th",{style:{"text-align":"left"}},"Type")])],-1),_=n("td",{style:{"text-align":"left"}},[n("code",null,[n("span",{class:"token property"},"obj")])],-1),b={style:{"text-align":"left"}},v=n("code",null,[n("span",{class:"token property"},"Color")],-1),x=o('<h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">boolean</span></code></p><p>two colors are equal</p><hr><h3 id="issimilarto" tabindex="-1"><a class="header-anchor" href="#issimilarto" aria-hidden="true">#</a> isSimilarTo</h3><p>\u25B8 <strong>isSimilarTo</strong>(<code><span class="token property">other</span></code>, <code>options<span class="token operator">?</span></code>): <code><span class="token property">boolean</span></code></p><p>\u6BD4\u8F83\u5F53\u524D\u989C\u8272\u662F\u5426\u4E0E\u53E6\u4E00\u4E2A\u989C\u8272\u76F8\u4F3C\u3002</p><p><strong><code><span class="token property">See</span></code></strong></p>',8),w=o(`<p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> black <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> white <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;#FFFFFF&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> black09 <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;#090909&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>black<span class="token punctuation">.</span><span class="token function">isSimilarTo</span><span class="token punctuation">(</span>white<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>black<span class="token punctuation">.</span><span class="token function">isSimilarTo</span><span class="token punctuation">(</span>black09<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>black<span class="token punctuation">.</span><span class="token function">isSimilarTo</span><span class="token punctuation">(</span>black09<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>`,3),C=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Name"),n("th",{style:{"text-align":"left"}},"Type"),n("th",{style:{"text-align":"left"}},"Description")])],-1),R=n("td",{style:{"text-align":"left"}},[n("code",null,[n("span",{class:"token property"},"other")])],-1),j={style:{"text-align":"left"}},q=n("code",null,[n("span",{class:"token property"},"Color")],-1),B=n("td",{style:{"text-align":"left"}},"\u8981\u6BD4\u8F83\u7684\u989C\u8272",-1),G=n("td",{style:{"text-align":"left"}},[n("code",null,[s("options"),n("span",{class:"token operator"},"?")])],-1),T={style:{"text-align":"left"}},F=n("code",null,[n("span",{class:"token property"},"CompareColorOptions")],-1),A=n("td",{style:{"text-align":"left"}},"\u6BD4\u8F83\u9009\u9879",-1),S=o('<h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">boolean</span></code></p><p>\u4E24\u4E2A\u989C\u8272\u662F\u5426\u76F8\u4F3C</p><hr><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString</h3><p>\u25B8 <strong>toString</strong>(): <code><span class="token property">string</span></code></p><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">string</span></code></p><hr><h3 id="withalpha" tabindex="-1"><a class="header-anchor" href="#withalpha" aria-hidden="true">#</a> withAlpha</h3>',10),O=n("strong",null,"withAlpha",-1),N=n("code",null,[n("span",{class:"token property"},"a")],-1),P=n("code",null,[n("span",{class:"token property"},"Color")],-1),D=o(`<p>Returns a new color that matches this color with the alpha channel replaced with <code><span class="token property">a</span></code> (which ranges from 0 to 255).</p><p>Out of range values will have unexpected effects.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// black</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">withAlpha</span><span class="token punctuation">(</span><span class="token number">0x77</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0x77000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">a</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">alpha channel</td></tr></tbody></table><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9" aria-hidden="true">#</a> Returns</h4>`,7),E=n("code",null,[n("span",{class:"token property"},"Color")],-1),V=n("p",null,"a new color",-1),L=n("hr",null,null,-1),M=n("h3",{id:"withblue",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#withblue","aria-hidden":"true"},"#"),s(" withBlue")],-1),z=n("strong",null,"withBlue",-1),H=n("code",null,[n("span",{class:"token property"},"b")],-1),I=n("code",null,[n("span",{class:"token property"},"Color")],-1),J=o('<p>Returns a new color that matches this color with the blue channel replaced with <code><span class="token property">b</span></code> (which ranges from 0 to 255).</p><p>Out of range values will have unexpected effects.</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">b</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">blue channel</td></tr></tbody></table><h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10" aria-hidden="true">#</a> Returns</h4>',5),K=n("code",null,[n("span",{class:"token property"},"Color")],-1),Q=n("p",null,"a new color",-1),U=n("hr",null,null,-1),W=n("h3",{id:"withgreen",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#withgreen","aria-hidden":"true"},"#"),s(" withGreen")],-1),X=n("strong",null,"withGreen",-1),Y=n("code",null,[n("span",{class:"token property"},"g")],-1),Z=n("code",null,[n("span",{class:"token property"},"Color")],-1),$=o('<p>Returns a new color that matches this color with the green channel replaced with <code><span class="token property">g</span></code> (which ranges from 0 to 255).</p><p>Out of range values will have unexpected effects.</p><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">g</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">green channel</td></tr></tbody></table><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4>',5),nn=n("code",null,[n("span",{class:"token property"},"Color")],-1),sn=n("p",null,"a new color",-1),en=n("hr",null,null,-1),an=n("h3",{id:"withopacity",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#withopacity","aria-hidden":"true"},"#"),s(" withOpacity")],-1),tn=n("strong",null,"withOpacity",-1),on=n("code",null,[n("span",{class:"token property"},"opacity")],-1),ln=n("code",null,[n("span",{class:"token property"},"Color")],-1),rn=o(`<p>Returns a new color that matches this color with the alpha channel replaced with the given <code><span class="token property">opacity</span></code> (which ranges from 0.0 to 1.0).</p><p>Out of range values will have unexpected effects.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// black</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">withOpacity</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0x7F000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">opacity</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">opacity value</td></tr></tbody></table><h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12" aria-hidden="true">#</a> Returns</h4>`,7),pn=n("code",null,[n("span",{class:"token property"},"Color")],-1),cn=n("p",null,"a new color",-1),dn=n("hr",null,null,-1),un=n("h3",{id:"withred",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#withred","aria-hidden":"true"},"#"),s(" withRed")],-1),hn=n("strong",null,"withRed",-1),kn=n("code",null,[n("span",{class:"token property"},"r")],-1),gn=n("code",null,[n("span",{class:"token property"},"Color")],-1),fn=o('<p>Returns a new color that matches this color with the red channel replaced with <code><span class="token property">r</span></code> (which ranges from 0 to 255).</p><p>Out of range values will have unexpected effects.</p><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">r</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">red channel</td></tr></tbody></table><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13" aria-hidden="true">#</a> Returns</h4>',5),mn=n("code",null,[n("span",{class:"token property"},"Color")],-1),yn=n("p",null,"a new color",-1),_n=n("hr",null,null,-1),bn=n("h3",{id:"fromargb",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fromargb","aria-hidden":"true"},"#"),s(" fromARGB")],-1),vn=n("code",null,[n("span",{class:"token property"},"Static")],-1),xn=n("strong",null,"fromARGB",-1),wn=n("code",null,[n("span",{class:"token property"},"a")],-1),Cn=n("code",null,[n("span",{class:"token property"},"r")],-1),Rn=n("code",null,[n("span",{class:"token property"},"g")],-1),jn=n("code",null,[n("span",{class:"token property"},"b")],-1),qn=n("code",null,[n("span",{class:"token property"},"Color")],-1),Bn=o('<p>Construct a color from the lower 8 bits of four integers.</p><ul><li><code><span class="token property">a</span></code> is the alpha value, with 0 being transparent and 255 being fully opaque.</li><li><code><span class="token property">r</span></code> is [red], from 0 to 255.</li><li><code><span class="token property">g</span></code> is [green], from 0 to 255.</li><li><code><span class="token property">b</span></code> is [blue], from 0 to 255.</li></ul><p>Out of range values are brought into range using modulo 255.</p><p><strong><code><span class="token property">See</span></code></strong></p>',4),Gn=o(`<p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> red <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">fromARGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>red<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Color(0xFFFF0000)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">a</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">alpha value</td></tr><tr><td style="text-align:left;"><code><span class="token property">r</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">red value</td></tr><tr><td style="text-align:left;"><code><span class="token property">g</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">green value</td></tr><tr><td style="text-align:left;"><code><span class="token property">b</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">blue value</td></tr></tbody></table><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14" aria-hidden="true">#</a> Returns</h4>`,5),Tn=n("code",null,[n("span",{class:"token property"},"Color")],-1),Fn=n("p",null,"a new color",-1),An=n("hr",null,null,-1),Sn=n("h3",{id:"fromgray",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fromgray","aria-hidden":"true"},"#"),s(" fromGray")],-1),On=n("code",null,[n("span",{class:"token property"},"Static")],-1),Nn=n("strong",null,"fromGray",-1),Pn=n("code",null,[n("span",{class:"token property"},"gray")],-1),Dn=n("code",null,[n("span",{class:"token property"},"Color")],-1),En=o(`<p>Construct a color from a grayscale value. The alpha channel is set to 255, and the R, G, and B channels are set to the same value.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> gray <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">fromGray</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Color(0xFF808080)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">gray</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">the grayscale value</td></tr></tbody></table><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15" aria-hidden="true">#</a> Returns</h4>`,6),Vn=n("code",null,[n("span",{class:"token property"},"Color")],-1),Ln=n("p",null,"a new color",-1),Mn=n("hr",null,null,-1),zn=n("h3",{id:"fromrgb",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fromrgb","aria-hidden":"true"},"#"),s(" fromRGB")],-1),Hn=n("code",null,[n("span",{class:"token property"},"Static")],-1),In=n("strong",null,"fromRGB",-1),Jn=n("code",null,[n("span",{class:"token property"},"r")],-1),Kn=n("code",null,[n("span",{class:"token property"},"g")],-1),Qn=n("code",null,[n("span",{class:"token property"},"b")],-1),Un=n("code",null,[n("span",{class:"token property"},"Color")],-1),Wn=o(`<p>Construct a color from RGB channels. The alpha channel is set to 255.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> red <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">fromRGBO</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>red<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Color(0xFFFF0000)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">r</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">\u7EA2\u8272\u901A\u9053\u7684\u503C\uFF0C\u8303\u56F4\u4E3A0-255</td></tr><tr><td style="text-align:left;"><code><span class="token property">g</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">\u7EFF\u8272\u901A\u9053\u7684\u503C\uFF0C\u8303\u56F4\u4E3A0-255</td></tr><tr><td style="text-align:left;"><code><span class="token property">b</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">\u84DD\u8272\u901A\u9053\u7684\u503C\uFF0C\u8303\u56F4\u4E3A0-255</td></tr></tbody></table><h4 id="returns-16" tabindex="-1"><a class="header-anchor" href="#returns-16" aria-hidden="true">#</a> Returns</h4>`,6),Xn=n("code",null,[n("span",{class:"token property"},"Color")],-1),Yn=n("p",null,"\u65B0\u7684\u989C\u8272\u5BF9\u8C61",-1),Zn=n("hr",null,null,-1),$n=n("h3",{id:"fromrgbo",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fromrgbo","aria-hidden":"true"},"#"),s(" fromRGBO")],-1),ns=n("code",null,[n("span",{class:"token property"},"Static")],-1),ss=n("strong",null,"fromRGBO",-1),es=n("code",null,[n("span",{class:"token property"},"r")],-1),as=n("code",null,[n("span",{class:"token property"},"g")],-1),ts=n("code",null,[n("span",{class:"token property"},"b")],-1),os=n("code",null,[n("span",{class:"token property"},"opacity")],-1),ls=n("code",null,[n("span",{class:"token property"},"Color")],-1),rs=o('<p>Create a color from red, green, blue, and opacity, similar to <code><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> in CSS.</p><ul><li><code><span class="token property">r</span></code> is [red], from 0 to 255.</li><li><code><span class="token property">g</span></code> is [green], from 0 to 255.</li><li><code><span class="token property">b</span></code> is [blue], from 0 to 255.</li><li><code><span class="token property">opacity</span></code> is alpha channel of this color as a double, with 0.0 being transparent and 1.0 being fully opaque.</li></ul><p>Out of range values are brought into range using modulo 255.</p><p><strong><code><span class="token property">See</span></code></strong></p>',4),ps=o('<h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">r</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">red value</td></tr><tr><td style="text-align:left;"><code><span class="token property">g</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">green value</td></tr><tr><td style="text-align:left;"><code><span class="token property">b</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">blue value</td></tr><tr><td style="text-align:left;"><code><span class="token property">opacity</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">alpha value</td></tr></tbody></table><h4 id="returns-17" tabindex="-1"><a class="header-anchor" href="#returns-17" aria-hidden="true">#</a> Returns</h4>',3),cs=n("code",null,[n("span",{class:"token property"},"Color")],-1),is=n("p",null,"a new color",-1),ds=n("hr",null,null,-1),us=n("h3",{id:"parse",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parse","aria-hidden":"true"},"#"),s(" parse")],-1),hs=n("code",null,[n("span",{class:"token property"},"Static")],-1),ks=n("strong",null,"parse",-1),gs=n("code",null,[n("span",{class:"token property"},"color")],-1),fs=n("code",null,[n("span",{class:"token keyword"},"null")],-1),ms=n("code",null,[n("span",{class:"token property"},"Color")],-1),ys=o(`<p>Parse a color from a hex string, such as <code>#<span class="token constant">RRGGBB</span></code> or <code>#<span class="token constant">AARRGGBB</span></code>.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> color <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-12" tabindex="-1"><a class="header-anchor" href="#parameters-12" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">color</span></code></td><td style="text-align:left;"><code><span class="token property">string</span></code></td><td style="text-align:left;">\u989C\u8272\u5B57\u7B26\u4E32\uFF0C\u683C\u5F0F\u4E3A#RRGGBB\u6216#AARRGGBB</td></tr></tbody></table><h4 id="returns-18" tabindex="-1"><a class="header-anchor" href="#returns-18" aria-hidden="true">#</a> Returns</h4>`,6),_s=n("code",null,[n("span",{class:"token keyword"},"null")],-1),bs=n("code",null,[n("span",{class:"token property"},"Color")],-1),vs=n("p",null,"\u65B0\u7684\u989C\u8272\uFF0C\u6216\u8005null",-1);function xs(ws,Cs){const e=c("RouterLink");return r(),p("div",null,[n("p",null,[a(e,{to:"/en/v9/generated/"},{default:t(()=>[s("Auto.js Pro 9 Docs")]),_:1}),s(" / "),a(e,{to:"/en/v9/generated/modules/color.html"},{default:t(()=>[s("color")]),_:1}),s(" / Color")]),d,n("p",null,[a(e,{to:"/en/v9/generated/modules/color.html"},{default:t(()=>[s("color")]),_:1}),s(".Color")]),u,h,k,n("ul",null,[n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#constructor"},{default:t(()=>[s("constructor")]),_:1})])]),g,n("ul",null,[n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#alpha"},{default:t(()=>[s("alpha")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#blue"},{default:t(()=>[s("blue")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#green"},{default:t(()=>[s("green")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#opacity"},{default:t(()=>[s("opacity")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#red"},{default:t(()=>[s("red")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#value"},{default:t(()=>[s("value")]),_:1})])]),f,n("ul",null,[n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#equals"},{default:t(()=>[s("equals")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#issimilarto"},{default:t(()=>[s("isSimilarTo")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#tostring"},{default:t(()=>[s("toString")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#withalpha"},{default:t(()=>[s("withAlpha")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#withblue"},{default:t(()=>[s("withBlue")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#withgreen"},{default:t(()=>[s("withGreen")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#withopacity"},{default:t(()=>[s("withOpacity")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#withred"},{default:t(()=>[s("withRed")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#fromargb"},{default:t(()=>[s("fromARGB")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#fromgray"},{default:t(()=>[s("fromGray")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#fromrgb"},{default:t(()=>[s("fromRGB")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#fromrgbo"},{default:t(()=>[s("fromRGBO")]),_:1})]),n("li",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#parse"},{default:t(()=>[s("parse")]),_:1})])]),m,n("table",null,[y,n("tbody",null,[n("tr",null,[_,n("td",b,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[v]),_:1})])])])]),x,n("p",null,[a(e,{to:"/en/v9/generated/interfaces/color.CompareColorOptions.html"},{default:t(()=>[s("CompareColorOptions")]),_:1})]),w,n("table",null,[C,n("tbody",null,[n("tr",null,[R,n("td",j,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[q]),_:1})]),B]),n("tr",null,[G,n("td",T,[a(e,{to:"/en/v9/generated/interfaces/color.CompareColorOptions.html"},{default:t(()=>[F]),_:1})]),A])])]),S,n("p",null,[s("\u25B8 "),O,s("("),N,s("): "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[P]),_:1})]),D,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[E]),_:1})]),V,L,M,n("p",null,[s("\u25B8 "),z,s("("),H,s("): "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[I]),_:1})]),J,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[K]),_:1})]),Q,U,W,n("p",null,[s("\u25B8 "),X,s("("),Y,s("): "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[Z]),_:1})]),$,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[nn]),_:1})]),sn,en,an,n("p",null,[s("\u25B8 "),tn,s("("),on,s("): "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[ln]),_:1})]),rn,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[pn]),_:1})]),cn,dn,un,n("p",null,[s("\u25B8 "),hn,s("("),kn,s("): "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[gn]),_:1})]),fn,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[mn]),_:1})]),yn,_n,bn,n("p",null,[s("\u25B8 "),vn,s(),xn,s("("),wn,s(", "),Cn,s(", "),Rn,s(", "),jn,s("): "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[qn]),_:1})]),Bn,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#fromrgbo"},{default:t(()=>[s("fromRGBO")]),_:1}),s(" which takes the alpha value as a floating point value.")]),Gn,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[Tn]),_:1})]),Fn,An,Sn,n("p",null,[s("\u25B8 "),On,s(),Nn,s("("),Pn,s("): "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[Dn]),_:1})]),En,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[Vn]),_:1})]),Ln,Mn,zn,n("p",null,[s("\u25B8 "),Hn,s(),In,s("("),Jn,s(", "),Kn,s(", "),Qn,s("): "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[Un]),_:1})]),Wn,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[Xn]),_:1})]),Yn,Zn,$n,n("p",null,[s("\u25B8 "),ns,s(),ss,s("("),es,s(", "),as,s(", "),ts,s(", "),os,s("): "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[ls]),_:1})]),rs,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html#fromargb"},{default:t(()=>[s("fromARGB")]),_:1}),s(" which takes the opacity as an integer value.")]),ps,n("p",null,[a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[cs]),_:1})]),is,ds,us,n("p",null,[s("\u25B8 "),hs,s(),ks,s("("),gs,s("): "),fs,s(" | "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[ms]),_:1})]),ys,n("p",null,[_s,s(" | "),a(e,{to:"/en/v9/generated/classes/color.Color.html"},{default:t(()=>[bs]),_:1})]),vs])}const qs=l(i,[["render",xs],["__file","color.Color.html.vue"]]);export{qs as default};
