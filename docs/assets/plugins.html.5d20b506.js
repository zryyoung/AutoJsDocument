import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as l,a as s,b as n,d as t,e as a,r as c}from"./app.6aa2b576.js";const i={},u=a(`<h1 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> plugins</h1><p>Auto.js provides a mechanism for loading plug-ins, allowing users to write apk with Activity, Service, C/C++ library, etc., install it on an Android device, and load and call it with Auto.js.</p><p>A plug-in is an apk file that can be installed independently. After the user installs it, the plug-in is loaded and the API is called through the <code><span class="token property">$plugins</span></code> module.</p><h2 id="plugins-load-packagename" tabindex="-1"><a class="header-anchor" href="#plugins-load-packagename" aria-hidden="true">#</a> $plugins.load(packageName)</h2><ul><li><code><span class="token property">packageName</span></code> {string} Loaded plugin package name</li></ul><p>Load a plug-in and return the object exported by module.exports in the plug-in module.</p><p>If the plug-in is not installed, a <code><span class="token property">PluginLoadException</span></code> exception will be thrown.</p><p>The following is an example of the use of OCR plug-in: (see [OCR plug-in](#ocr plug-in) for the plug-in download address)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token constant">OCR</span> <span class="token operator">=</span> $plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;org.autojs.plugin.ocr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ocr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OCR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Capture the screen and recognize the text on the screen, and return the recognition result</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ocr<span class="token punctuation">.</span><span class="token function">ocrScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-develop-a-plugin" tabindex="-1"><a class="header-anchor" href="#how-to-develop-a-plugin" aria-hidden="true">#</a> How to develop a plugin</h2>`,10),r={href:"https://github.com/hyb1996/Auto.js-Plugin-SDK",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>The package names in this example are all <code>org<span class="token punctuation">.</span>autojs<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>demo</code>, the plug-in package name may be different in the actual project.</p><h3 id="plug-in-sdk-integration" tabindex="-1"><a class="header-anchor" href="#plug-in-sdk-integration" aria-hidden="true">#</a> Plug-in SDK integration</h3><p>Create a new Android project and add in the project&#39;s build.gradle file:</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>allprojects <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        maven <span class="token punctuation">{</span>url<span class="token string">&#39;https://jitpack.io&#39;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Add in the build.gradle file of the specific module (such as app):</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    implementation<span class="token string">&#39;com.github.hyb1996:Auto.js-Plugin-SDK:0.2&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),k={href:"https://jitpack.io/#hyb1996/Auto.js-Plugin-SDK/0.2",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="plug-in-configuration" tabindex="-1"><a class="header-anchor" href="#plug-in-configuration" aria-hidden="true">#</a> Plug-in configuration</h3><h4 id="_1-create-a-new-pluginhelloworld-file-inherited-from-plugin" tabindex="-1"><a class="header-anchor" href="#_1-create-a-new-pluginhelloworld-file-inherited-from-plugin" aria-hidden="true">#</a> 1. Create a new <code><span class="token property">PluginHelloWorld</span></code> file, inherited from Plugin.</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginHelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Plugin</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">PluginHelloWorld</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Context</span> selfContext<span class="token punctuation">,</span> <span class="token class-name">Object</span> runtime<span class="token punctuation">,</span> <span class="token class-name">Object</span> topLevelScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> selfContext<span class="token punctuation">,</span> runtime<span class="token punctuation">,</span> topLevelScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Return the assets directory path of the JavaScript glue layer code of the plugin</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAssetsScriptDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;plugin-helloworld&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Plug-in public API, which can be called by JavaScript code</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStringFromJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello, Auto.js!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Plug-in public API, which can be called by JavaScript code</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">getSelfContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getSelfContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HelloWorldActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">FLAG_ACTIVITY_NEW_TASK</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-added-mypluginregistry-file-inherited-from-pluginregistry" tabindex="-1"><a class="header-anchor" href="#_2-added-mypluginregistry-file-inherited-from-pluginregistry" aria-hidden="true">#</a> 2. Added <code><span class="token property">MyPluginRegistry</span></code> file, inherited from PluginRegistry:</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPluginRegistry</span> <span class="token keyword">extends</span> <span class="token class-name">PluginRegistry</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// Register the default plugin</span>
        <span class="token function">registerDefaultPlugin</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PluginLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Plugin</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Context</span> selfContext<span class="token punctuation">,</span> <span class="token class-name">Object</span> runtime<span class="token punctuation">,</span> <span class="token class-name">Object</span> topLevelScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PluginHelloWorld</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> selfContext<span class="token punctuation">,</span> runtime<span class="token punctuation">,</span> topLevelScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure the following meta-data in AndroidManifest.xml, <code><span class="token property">name</span></code> is <code><span class="token string">&quot;org.autojs.plugin.sdk.registry&quot;</span></code>, and <code><span class="token property">value</span></code> is the package name of MyPluginRegistry.</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>
        <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>
            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.autojs.plugin.sdk.registry<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.autojs.plugin.sdk.demo.MyPluginRegistry<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>
            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.HelloWorldActivity<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span>
            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.HelloworldPluginService<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-write-javascript-glue-layer" tabindex="-1"><a class="header-anchor" href="#_3-write-javascript-glue-layer" aria-hidden="true">#</a> 3. Write JavaScript glue layer</h4><p>Add the <code>index<span class="token punctuation">.</span>js</code> file in the corresponding directory of assets (returned by Plugin.getAssetsScriptDir), which is used as a glue layer to export the plugin API.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">plugin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> runtime <span class="token operator">=</span> plugin<span class="token punctuation">.</span>runtime<span class="token punctuation">;</span>
    <span class="token keyword">let</span> scope <span class="token operator">=</span> plugin<span class="token punctuation">.</span>topLevelScope<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    helloworld<span class="token punctuation">.</span>stringFromJava <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">getStringFromJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    helloworld<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        plugin<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> helloworld<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-call-in-auto-js-pro" tabindex="-1"><a class="header-anchor" href="#_4-call-in-auto-js-pro" aria-hidden="true">#</a> 4. Call in Auto.js Pro</h4><p>Compile the plug-in as apk (assembleDebug/assembleRelease) and install it on the device. Use the following code call in Auto.js Pro:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> helloworld <span class="token operator">=</span> $plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;org.autojs.plugin.sdk.demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>helloworld<span class="token punctuation">.</span>stringFromJava<span class="token punctuation">)</span><span class="token punctuation">;</span>
helloworld<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Auto.js Pro Plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-independent-service-aidl-method-call" tabindex="-1"><a class="header-anchor" href="#_5-independent-service-aidl-method-call" aria-hidden="true">#</a> 5. Independent service AIDL method call</h4><p>You can write a <code><span class="token property">Service</span></code> in the plug-in, which is invoked and bound by Auto.js Pro, and the Service interface can be called through aidl in js.</p><p>Override the method <code><span class="token property">getService</span></code> in Plugin.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Plug-in service class, optional, used to communicate with Auto.js Pro ontology in AIDL mode. Can return null</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ComponentName</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token function">getSelfContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HelloworldPluginService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create a new Service component (<strong>Note that it needs to be exported=&quot;true&quot;</strong> when registering in AndroidManifest, inherited from <code><span class="token property">PluginService</span></code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloworldPluginService</span> <span class="token keyword">extends</span> <span class="token class-name">PluginService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ACTION_ADD</span> <span class="token operator">=</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Result</span> <span class="token function">onRemoteCall</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> action<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RemoteCallback</span> callback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">ACTION_ADD</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token function">invokeAdd</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">notImplemented</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Result</span> <span class="token function">invokeAdd</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Number</span> a <span class="token operator">=</span> <span class="token class-name">PluginUtils</span><span class="token punctuation">.</span><span class="token function">getNotNull</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Number</span> b <span class="token operator">=</span> <span class="token class-name">PluginUtils</span><span class="token punctuation">.</span><span class="token function">getNotNull</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> sum <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Add glue layer code in index.js:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>helloworld<span class="token punctuation">.</span><span class="token function-variable function">remoteAdd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> plugin<span class="token punctuation">.</span><span class="token function">waitForConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> a<span class="token punctuation">,</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> b
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;sum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can call in Auto.js Pro:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> helloworld <span class="token operator">=</span> $plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;org.autojs.plugin.sdk.demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>helloworld<span class="token punctuation">.</span><span class="token function">remoteAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ocr-plugin" tabindex="-1"><a class="header-anchor" href="#ocr-plugin" aria-hidden="true">#</a> OCR plugin</h2><p>At present, the Auto.js official only provides a simple OCR plug-in as an example, its efficiency is relatively slow, only for reference.</p>`,25),h={href:"https://wws.lanzoux.com/iOfyWlpz7jc",target:"_blank",rel:"noopener noreferrer"},v=s("strong",null,"Password: 4fw3",-1),g=a('<h3 id="new-ocr-datafile-lang" tabindex="-1"><a class="header-anchor" href="#new-ocr-datafile-lang" aria-hidden="true">#</a> new OCR([dataFile, lang])</h3><ul><li><code><span class="token property">dataFile</span></code> {string} data path</li><li><code><span class="token property">lang</span></code> {string} language</li></ul><p>Create a new OCR object. The OCR plugin uses Tesseract as the engine. The dataFile and lang parameters of the constructor are used to initialize the Tesseract engine with the specified language model.</p><p>The data path <code><span class="token property">dataFile</span></code> must be the path of the parent directory of tessdata and must end with /. Any path after the last/will be ignored.</p><p>To load multiple languages, for example, <code>hin <span class="token operator">+</span> eng</code> will load Hindi and English.</p>',5),b={href:"https://github.com/rmtheis/tess-two/blob/master/tess-two/src/com/googlecode/tesseract/android/TessBaseAPI.java",target:"_blank",rel:"noopener noreferrer"},f=a(`<p>Use the built-in Chinese character library data to initialize OCR:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token constant">OCR</span> <span class="token operator">=</span> $plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;org.autojs.plugin.ocr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ocr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OCR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Initialize OCR with your own data:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token constant">OCR</span> <span class="token operator">=</span> $plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;org.autojs.plugin.ocr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ocr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OCR</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/tessdata/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;chi_sim&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pytorch-plugin" tabindex="-1"><a class="header-anchor" href="#pytorch-plugin" aria-hidden="true">#</a> Pytorch plugin</h2><blockquote><p>This plugin and documentation are developed and provided by the third-party developer <code><span class="token property">Haoran</span></code>, thank you very much.</p></blockquote>`,6),y={href:"https://wws.lanzous.com/iiz67lpzf3e",target:"_blank",rel:"noopener noreferrer"},w=s("strong",null,"Password: 4n6x",-1),x=a('<p>To use this module, please install the Pytorch-AjPlugin extension plug-in. And use <code><span class="token keyword">let</span> pytorch <span class="token operator">=</span> $plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;com.hraps.pytorch&quot;</span><span class="token punctuation">)</span></code> code to load.</p><p>The Pytorch module provides the functions that the completed deep learning neural network model executes on Android devices, and can realize functions that are difficult to achieve by conventional programs, such as: image recognition, language translation, language question and answer, etc.</p><p>Before use, you need to make sure that you have already trained the neural network model. Use Python to convert the model file into an Android script file, and use the Python function <code>torch<span class="token punctuation">.</span>jit<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> input_tensor<span class="token punctuation">)</span></code>.</p>',3),q=s("code",null,[s("span",{class:"token property"},"Haoran")],-1),j={href:"http://tangshusen.me/Dive-into-DL-PyTorch/#/",target:"_blank",rel:"noopener noreferrer"},T=a(`<p>You can test the device supportability through <code>pytorch<span class="token punctuation">.</span><span class="token function">debugOd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, and you can also see the high-quality recognition effect of this module on image detection.</p><h3 id="pytorch-weight-export-guide" tabindex="-1"><a class="header-anchor" href="#pytorch-weight-export-guide" aria-hidden="true">#</a> Pytorch weight export guide</h3><p>The <code><span class="token punctuation">.</span>pt</code> file needs to be converted to the <code><span class="token punctuation">.</span>torchscript<span class="token punctuation">.</span>pt</code> file to be adapted on the mobile terminal. Through tensor flow tracking, the model can be converted to the mobile terminal for use. The model is not friendly to third-party support libraries. It is recommended to use pure Pytorch to write neural network models and train them.</p><p>The following is the computer-side Python conversion script.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>model <span class="token operator">=</span> make_model<span class="token punctuation">(</span><span class="token string">&#39;resnet18&#39;</span><span class="token punctuation">)</span> <span class="token comment"># Import model structure</span>
model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_pt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Load training weight parameters</span>
model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># The model is set to evaluation mode, which must be turned on</span>
input_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span> <span class="token comment"># Set the input data format, here the 224*224 rgb3 channel image format is simulated to generate a random tensor.</span>
mobile <span class="token operator">=</span> torch<span class="token punctuation">.</span>jit<span class="token punctuation">.</span>trace<span class="token punctuation">(</span>model<span class="token punctuation">,</span> input_tensor<span class="token punctuation">,</span>strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># Model conversion</span>
mobile <span class="token operator">=</span> optimize_for_mobile<span class="token punctuation">(</span>mobile<span class="token punctuation">)</span> <span class="token comment"># mobile terminal optimization (optional)</span>
mobile<span class="token punctuation">.</span>save<span class="token punctuation">(</span>mobile_pt<span class="token punctuation">)</span> <span class="token comment"># save the file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="basic-functions" tabindex="-1"><a class="header-anchor" href="#basic-functions" aria-hidden="true">#</a> Basic functions</h3><h4 id="pytorch-load-path-device" tabindex="-1"><a class="header-anchor" href="#pytorch-load-path-device" aria-hidden="true">#</a> pytorch.load(path[,device])</h4><ul><li><code><span class="token property">path</span></code> {String} The path where the model is located</li><li><code><span class="token property">device</span></code> {int} Execution device, 0 is CPU, 1 is VULKAN, default is 0.</li><li>Return {PytorchModule}</li></ul><p>Import the network model. Only a few devices support VULKAN, and the device parameter may not be used.</p><p>When the value of path is &quot;yolov5s&quot;, the built-in target detection model will be imported, and when the value of path is &quot;textcnn, the built-in sentiment analysis model will be imported.&quot;</p><h4 id="pytoch-forward-module-input" tabindex="-1"><a class="header-anchor" href="#pytoch-forward-module-input" aria-hidden="true">#</a> pytoch.forward(module,input)</h4><ul><li><code><span class="token property">module</span></code> {PytorchModule} The imported neural network model.</li><li><code><span class="token property">input</span></code> {Tensor} Model input tensor.</li><li>Returns the output tensor of the {Tensor} model.</li></ul><p>Execute the network model to move forward and get the calculation result.</p><h4 id="pytoch-forwardtuple-module-input" tabindex="-1"><a class="header-anchor" href="#pytoch-forwardtuple-module-input" aria-hidden="true">#</a> pytoch.forwardTuple(module,input)</h4><ul><li><code><span class="token property">module</span></code> {PytorchModule} The imported neural network model.</li><li><code><span class="token property">input</span></code> {Tensor} Model input tensor.</li><li>Returns the output tensor of the {Tensor} model.</li></ul><p>Execute the network model to move forward and get the calculation result.</p><p>The difference with pytorch.forward() is that it returns the first item of the tuple in the output, which is suitable for the corresponding model, such as the target detection model. His essence is actually module.forward(IValue.from(inputTensor)).toTuple()[0].toTensor().</p><h4 id="pytorch-destory-module" tabindex="-1"><a class="header-anchor" href="#pytorch-destory-module" aria-hidden="true">#</a> pytorch.destory(module)</h4><ul><li><code><span class="token property">module</span></code> {PytorchModule} The neural network model to be released.</li></ul><p>Unleash the neural network.</p><h3 id="tensor-class" tabindex="-1"><a class="header-anchor" href="#tensor-class" aria-hidden="true">#</a> Tensor class</h3><p>The tensor class is the general input and output data structure of the neural network, which is convenient for the high-speed processing of the network, and is a high-dimensional array. For example, if a picture is 100<em>200 in size and has 3 RGB channels, it will be converted into a 100</em>200*3 long floating-point number array before being passed into the neural network.</p><h4 id="pytorch-fromblob-arr-shape" tabindex="-1"><a class="header-anchor" href="#pytorch-fromblob-arr-shape" aria-hidden="true">#</a> pytorch.fromBlob(arr,shape)</h4><ul><li><code><span class="token property">arr</span></code> {List} js array</li><li><code><span class="token property">shape</span></code> {List&lt;Long&gt;} The shape of the transformed tensor</li><li>Return the tensor generated by {Tensor}</li></ul><p>Construct tensor from js array.</p><h4 id="tensor-getdataasfloatarray" tabindex="-1"><a class="header-anchor" href="#tensor-getdataasfloatarray" aria-hidden="true">#</a> tensor.getDataAsFloatArray()</h4><ul><li>Return {List&lt;float&gt;} return the float array converted from tensor</li></ul><p>Convert the tensor to a floating-point array.</p><h4 id="tensor-getdataas-byte-double-float-int-long-array" tabindex="-1"><a class="header-anchor" href="#tensor-getdataas-byte-double-float-int-long-array" aria-hidden="true">#</a> tensor.getDataAs[Byte/Double/Float/Int/Long]Array()</h4><ul><li>Return {List&lt;...&gt;}\\ returns the array after tensor conversion</li></ul><p>Convert tensors into arrays of various types.</p><h3 id="objectdetection-object-detection-function-function" tabindex="-1"><a class="header-anchor" href="#objectdetection-object-detection-function-function" aria-hidden="true">#</a> ObjectDetection Object Detection-Function Function</h3><p>Target detection is used to analyze the position and type of various items in the image. If you don\u2019t understand, you can use pytorch.debugOd() to check the effect.</p><h4 id="pytorch-debugod-modulepath-classpath" tabindex="-1"><a class="header-anchor" href="#pytorch-debugod-modulepath-classpath" aria-hidden="true">#</a> pytorch.debugOd([modulePath,classPath])</h4><ul><li><code><span class="token property">modulePath</span></code> {String} Model file path (.pt/.pth file)</li><li><code><span class="token property">classPath</span></code> {String} tag name file path (.txt file)</li></ul><p>Test the target detection model file and start the built-in debugging page.</p><p>Empty incoming can use built-in target detection weights to test equipment support. That is, directly pytorch.debugOd().</p><h4 id="pytorch-liveod-modulepath-classpath" tabindex="-1"><a class="header-anchor" href="#pytorch-liveod-modulepath-classpath" aria-hidden="true">#</a> pytorch.liveOd(modulePath,classPath)</h4><ul><li><code><span class="token property">modulePath</span></code> {String} Model file path (.pt/.pth file)</li><li><code><span class="token property">classPath</span></code> {String} tag name file path (.txt file)</li></ul><p>Enter the camera real-time recognition page to view the dynamic push results.</p><h4 id="objectdetection-od-object-detection-common-functions" tabindex="-1"><a class="header-anchor" href="#objectdetection-od-object-detection-common-functions" aria-hidden="true">#</a> ObjectDetection(OD) Object Detection-Common Functions</h4><p>It is used to build a target detection network by itself and provide commonly used functions.</p><h4 id="pytorch-getiou-a-b" tabindex="-1"><a class="header-anchor" href="#pytorch-getiou-a-b" aria-hidden="true">#</a> pytorch.getIOU(a,b)</h4><ul><li><code><span class="token property">a</span></code> {Rect} range a</li><li><code><span class="token property">b</span></code> {Rect} range b</li><li>Return {float} IOU value</li></ul><p>Calculate the overlap ratio (IOU value) of the two rectangles, and the overlap area is more than the total area.</p><h4 id="pytorch-bitmaptotensor-img-mean-std" tabindex="-1"><a class="header-anchor" href="#pytorch-bitmaptotensor-img-mean-std" aria-hidden="true">#</a> pytorch.bitmapToTensor(img[,mean,std])</h4><ul><li><code><span class="token property">img</span></code> {Bitmap} original image</li><li><code><span class="token property">mean</span></code> {List&lt;float&gt;} normalized average value, the default value is [0.485, 0.456, 0.406]</li><li><code><span class="token property">std</span></code> {List&lt;float&gt;} Normalized standard deviation, the default value is [0.229, 0.224, 0.225]</li><li>Return {Tensor} Tensor tensor after image conversion</li></ul><p>Convert the image into a Tensor tensor type for easy input to the network model. The image needs to use the bitmap type, such as the image type in Autojs, which can be converted to bitmap through image.getBitmap().</p><p>The mean and std values \u200B\u200Bare used to normalize the color of the picture to a certain range. Please set them uniformly according to the model training value. It is not clear that it can be set to [0,0,0] [1,1,1].</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/a.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
inputTensor <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">bitmapToTensor</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span><span class="token function">getBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pytorch-floatstoresults-floats-row-column-imgscalex-imgscaley-threshold" tabindex="-1"><a class="header-anchor" href="#pytorch-floatstoresults-floats-row-column-imgscalex-imgscaley-threshold" aria-hidden="true">#</a> pytorch.floatsToResults(floats,row,column,imgScaleX,imgScaleY[,threshold])</h4><ul><li><code><span class="token property">floats</span></code> {List&lt;float&gt;} Yolo model output array</li><li><code><span class="token property">row</span></code> {int} the number of output results</li><li><code><span class="token property">column</span></code> {int} the amount of data for each result</li><li><code><span class="token property">imgScaleX</span></code> {float} Image X-axis scaling</li><li><code><span class="token property">imgScaleY</span></code> {float} Y-axis scaling of the image</li><li><code><span class="token property">threshold</span></code> {float} keep the lowest confidence value of the result</li><li>Return all output results of {List&lt;OdResult&gt;}</li></ul><p>Convert the output result array of the Yolo model into a recognition result class. Floats is the total output data, and floats.length should be equal to row*column.</p><p>When inputting the model, the picture is compressed into a fixed input size of the network. Here, the coordinates of the result position in the original image can be calculated inversely by inputting the XY value of imgScale.</p><p>The output of the Yolo model is composed of detection blocks, each detection block will fix the prediction result of the output result center point in it, and each detection result is composed of confidence, position, and probability of each type. For example, in the built-in Yolo model, each output contains the frame (x, y, w, h) of the result, a total of 4 values, and the confidence (that is, the correct rate) of the result is 1 value, and the result is for each type Probability, if the output will have data such as [car:0.2,bus:0.9,boat:0.1], the built-in model can identify a total of 80 items. So the final column value is 4+1+80=85. The row block is the number of detection blocks, and each detection block has column output numbers.</p><h4 id="pytorch-usenms-results-limit-threshold" tabindex="-1"><a class="header-anchor" href="#pytorch-usenms-results-limit-threshold" aria-hidden="true">#</a> pytorch.useNMS(results[,limit,threshold])</h4><ul><li><code><span class="token property">results</span></code> {List&lt;OdResult&gt;} all output results</li><li><code><span class="token property">limit</span></code> {int} Maximum remaining result limit</li><li><code><span class="token property">threshold</span></code> {float} Border repeat rate threshold</li><li>Return {List&lt;OdResult&gt;} NMS processed result</li></ul><p>Filter the results with probabilities of repetition. The NMS algorithm is NonMaxSuppression, which removes the result of the repetition rate higher than the threshold in the frame.</p><h3 id="odresult-class" tabindex="-1"><a class="header-anchor" href="#odresult-class" aria-hidden="true">#</a> OdResult class</h3><p>A class used to represent a single result of target detection, a compound class containing three parameters: rect, score, and classId.</p><h4 id="odresuult-score" tabindex="-1"><a class="header-anchor" href="#odresuult-score" aria-hidden="true">#</a> odResuult.score</h4><ul><li><code><span class="token property">score</span></code> {float} Get the confidence of the result, similar to the correct rate</li></ul><h4 id="odresult-rect" tabindex="-1"><a class="header-anchor" href="#odresult-rect" aria-hidden="true">#</a> odResult.rect</h4><ul><li><code><span class="token property">rect</span></code> {Rect} Get the frame position of the result, the document about the rect can be seen in the images module</li></ul><h4 id="odresult-classindex" tabindex="-1"><a class="header-anchor" href="#odresult-classindex" aria-hidden="true">#</a> odResult.classIndex</h4><ul><li><code><span class="token property">classIndex</span></code> {int} The type number of the target</li></ul><h3 id="naturallanguageprocessing-nlp-natural-language-processing-function" tabindex="-1"><a class="header-anchor" href="#naturallanguageprocessing-nlp-natural-language-processing-function" aria-hidden="true">#</a> NaturalLanguageProcessing(NLP) Natural language processing function</h3><p>Provides related functions of natural language processing models</p><h4 id="pytorch-debugtec-modulepath-vocabpath" tabindex="-1"><a class="header-anchor" href="#pytorch-debugtec-modulepath-vocabpath" aria-hidden="true">#</a> pytorch.debugTec([modulePath,vocabPath])</h4><ul><li><code><span class="token property">modulePath</span></code> {String} Model file path (.pt/.pth file)</li><li><code><span class="token property">vocabPath</span></code> {String} Vocabulary serial number file path (.txt file)</li></ul><p>Test the natural language sentiment analysis TextCNN model file and start the built-in debugging page.</p><p>Empty incoming can use built-in sentiment analysis weights to test device support. That is, directly pytorch.debugTEC().</p><h4 id="pytorch-simplifysentence-sentence" tabindex="-1"><a class="header-anchor" href="#pytorch-simplifysentence-sentence" aria-hidden="true">#</a> pytorch.simplifySentence(sentence)</h4><ul><li><code><span class="token property">sentence</span></code> {String} Input sentence.</li><li>Return {String} the simplified sentence.</li></ul><p>Simplify English sentences. Only keep alphanumeric characters and reduce them to lowercase.</p><h3 id="vocab-class" tabindex="-1"><a class="header-anchor" href="#vocab-class" aria-hidden="true">#</a> Vocab class</h3><p>The vocabulary class provides a more efficient conversion function between vocabulary and serial number.</p><h4 id="pytorch-vocabpath-path" tabindex="-1"><a class="header-anchor" href="#pytorch-vocabpath-path" aria-hidden="true">#</a> pytorch.vocabPath(path)</h4><ul><li><code><span class="token property">path</span></code> {String} Glossary file path</li><li>Return {Vocab} vocabulary entity</li></ul><p>The file should be composed of one word per line, and the correspondence between line numbers and words should be consistent with the word vector file used during model training.</p><h4 id="pytorch-vocab-words" tabindex="-1"><a class="header-anchor" href="#pytorch-vocab-words" aria-hidden="true">#</a> pytorch.vocab(words)</h4><ul><li><code><span class="token property">words</span></code> {List&lt;String&gt;} vocabulary list</li><li>Return {Vocab} vocabulary entity</li></ul><h4 id="vocab-size" tabindex="-1"><a class="header-anchor" href="#vocab-size" aria-hidden="true">#</a> vocab.size()</h4><ul><li>Return {long} vocabulary size</li></ul><p>Get the amount of vocabulary contained in the vocabulary.</p><h4 id="vocab-getword-id" tabindex="-1"><a class="header-anchor" href="#vocab-getword-id" aria-hidden="true">#</a> vocab.getWord(id)</h4><ul><li><code><span class="token property">id</span></code> {long} vocabulary number</li><li>Return {String} vocabulary text</li></ul><p>Get the vocabulary corresponding to the vocabulary number in the vocabulary list.</p><h4 id="vocab-getid-word" tabindex="-1"><a class="header-anchor" href="#vocab-getid-word" aria-hidden="true">#</a> vocab.getId(word)</h4><ul><li><code><span class="token property">word</span></code> {String} vocabulary text</li><li>Return {long} vocabulary number</li></ul><p>Get the serial number corresponding to the vocabulary text in the vocabulary.</p><h4 id="vocab-getwords-ids-length" tabindex="-1"><a class="header-anchor" href="#vocab-getwords-ids-length" aria-hidden="true">#</a> vocab.getWords(ids[,length])</h4><ul><li><code><span class="token property">ids</span></code> {List&lt;long&gt;} vocabulary number</li><li><code><span class="token property">length</span></code> {int} returns the length of the list</li><li>Return {List&lt;String&gt;} vocabulary text</li></ul><p>Get a vocabulary text list of multiple vocabulary numbers in the vocabulary.</p><h4 id="vocab-getids-words-length" tabindex="-1"><a class="header-anchor" href="#vocab-getids-words-length" aria-hidden="true">#</a> vocab.getIds(words[,length])</h4><ul><li><code><span class="token property">words</span></code> {List&lt;String&gt;} vocabulary text</li><li><code><span class="token property">length</span></code> {int} Return the length of the list, fill in the vacancy with 0.</li><li>Return {List&lt;long&gt;} vocabulary number</li></ul><p>Get a list of vocabulary serial numbers of multiple vocabularies in the vocabulary list.</p><h3 id="usage-examples" tabindex="-1"><a class="header-anchor" href="#usage-examples" aria-hidden="true">#</a> Usage examples</h3><h4 id="image-target-detection-yolov5s-model" tabindex="-1"><a class="header-anchor" href="#image-target-detection-yolov5s-model" aria-hidden="true">#</a> Image target detection (Yolov5s model)</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Pytorch plug-in target detection algorithm Yolov5 model implementation example
 *
 * Author: Hao Ran (Q: 2125764918)
 */</span>



<span class="token comment">//To experience the visual recognition effect of this plug-in, you can use these three lines of code:</span>
<span class="token comment">/*
pytorch = $plugins.load(&quot;com.hraps.pytorch&quot;)
pytorch.debugOd()
exit()
*/</span>


<span class="token comment">//Import the plug-in module</span>
pytorch <span class="token operator">=</span> $plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;com.hraps.pytorch&quot;</span><span class="token punctuation">)</span>

<span class="token comment">//Import neural network model input model file path (here imported built-in Yolov5s model)</span>
<span class="token keyword">var</span> model <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;yolov5s&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Import the type name corresponding to the recognition result (a string array composed of the class name, you can write it by yourself, such as [&quot;car&quot;,&quot;plane&quot;,&quot;person&quot;...])</span>
<span class="token keyword">var</span> classes <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">getCocoClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//Define the side length of the input image of the model. The input dimension is w*h*3</span>
<span class="token keyword">var</span> inputWidth <span class="token operator">=</span> <span class="token number">640</span>
<span class="token keyword">var</span> inputHeight <span class="token operator">=</span> <span class="token number">640</span>
<span class="token comment">//Define the number of model outputs and the size of each output dimension is row*column</span>
<span class="token comment">//row is the number of divisions of the yolo model, which is related to the input size</span>
<span class="token keyword">var</span> outputRow <span class="token operator">=</span> <span class="token number">25200</span>
<span class="token comment">//column is the dimension of each grid, consisting of 4 values \u200B\u200Bfor position (x, y, w, h), 1 value for score (score), 80 values \u200B\u200Bfor type (coco data set 80 classes), a total of 85 value</span>
<span class="token keyword">var</span> outputColumn <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">80</span>

<span class="token comment">//Import the picture to be recognized</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/DCIM/Camera/b.jpg&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Zoom to model input dimension</span>
<span class="token keyword">var</span> inputImg <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">[</span>inputWidth<span class="token punctuation">,</span> inputHeight<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//The image is converted to a tensor. The MEAN and STD values \u200B\u200Bare set to 000 and 111, that is, special normalization is not enabled</span>
inputTensor <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">bitmapToTensor</span><span class="token punctuation">(</span>inputImg<span class="token punctuation">.</span><span class="token function">getBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//Perform neural network advancement to obtain output tensor</span>
output <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">forwardTuple</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> inputTensor<span class="token punctuation">)</span>
<span class="token comment">//Tensor to float array</span>
f <span class="token operator">=</span> output<span class="token punctuation">.</span><span class="token function">getDataAsFloatArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Model output dimension: &quot;</span><span class="token operator">+</span> f<span class="token punctuation">.</span>length<span class="token punctuation">)</span>

<span class="token comment">//Calculate the graphics zoom ratio</span>
imgScaleX <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> inputWidth
imgScaleY <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> inputHeight
<span class="token comment">//Restore the real position of the recognition result and convert it to the target detection result class array</span>
results <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">floatsToResults</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> outputRow<span class="token punctuation">,</span> outputColumn<span class="token punctuation">,</span> imgScaleX<span class="token punctuation">,</span> imgScaleY<span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The number of initial network recognition: &quot;</span><span class="token operator">+</span> results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//NMS algorithm filters duplicate results</span>
nmsResults <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">useNMS</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span><span class="token string">&quot;Number of final results: &quot;</span><span class="token operator">+</span> nmsResults<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//Traverse the output result</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>nmsResults<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> nmsResults<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    rect <span class="token operator">=</span> result<span class="token punctuation">.</span>rect
    str <span class="token operator">=</span> <span class="token string">&quot;Type: &quot;</span><span class="token operator">+</span> classes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>classIndex<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">&quot; Confidence: &quot;</span><span class="token operator">+</span> result<span class="token punctuation">.</span>score <span class="token operator">+</span><span class="token string">&quot; Position: left&quot;</span> <span class="token operator">+</span> rect<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token string">&quot;up&quot;</span> <span class="token operator">+</span> rect<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token string">&quot;right&quot;</span> <span class="token operator">+</span> rect<span class="token punctuation">.</span> right <span class="token operator">+</span> <span class="token string">&quot;\u4E0B&quot;</span> <span class="token operator">+</span> rect<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="natural-language-sentiment-analysis-textcnn-model" tabindex="-1"><a class="header-anchor" href="#natural-language-sentiment-analysis-textcnn-model" aria-hidden="true">#</a> Natural language sentiment analysis (TextCNN model)</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Pytorch plug-in Language sentiment analysis algorithm TextCNN model implementation example
 *
 * Author: Hao Ran (Q: 2125764918)
 */</span>


<span class="token comment">//To experience the effects of this plug-in, you can use this line of code:</span>
<span class="token comment">/*
pytorch = $plugins.load(&quot;com.hraps.pytorch&quot;)
pytorch.debugTec()
exit()
*/</span>


<span class="token comment">//Sentence to be recognized</span>
<span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">&quot;The program is useful!&quot;</span>

<span class="token comment">//Import the plug-in module</span>
pytorch <span class="token operator">=</span> $plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;com.hraps.pytorch&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Import neural network model input model file path (here, the built-in textcnn model is imported)</span>
<span class="token keyword">var</span> model <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;textcnn&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Imported vocabulary is composed of a txt file with one line and one word. The line number and word should correspond to the sequence number of the word vector during model training (the vocabulary list corresponding to the built-in model is imported here)</span>
<span class="token keyword">var</span> vocab <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">getTextcnnVocab</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The vocabulary has been imported successfully, total&quot;</span> <span class="token operator">+</span> vocab<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;pieces&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Simplified sentence processing, filter punctuation, all lowercase</span>
<span class="token keyword">var</span> textSimple <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">simplifySentence</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Simplified sentence: &quot;</span><span class="token operator">+</span> textSimple<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Define the length of the model input vocabulary</span>
<span class="token keyword">var</span> inputSize <span class="token operator">=</span> <span class="token number">128</span>
<span class="token comment">//According to the vocabulary, replace the sentence with a word vector sequence number. Unknown words and insufficient lengths are automatically filled with 0</span>
<span class="token keyword">var</span> ids <span class="token operator">=</span> vocab<span class="token punctuation">.</span><span class="token function">getIds</span><span class="token punctuation">(</span>textSimple<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inputSize<span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span>
<span class="token comment">//Construct the list into Tensor type, suitable for network input</span>
<span class="token keyword">var</span> inputTensor <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">fromBlob</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//Execute the model to get the output result</span>
<span class="token keyword">var</span> outPutTensor <span class="token operator">=</span> pytorch<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> inputTensor<span class="token punctuation">)</span>
<span class="token comment">//The output tensor is converted to a floating-point array</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> outPutTensor<span class="token punctuation">.</span><span class="token function">getDataAsFloatArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Model output: &quot;</span><span class="token operator">+</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//Analysis results</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Statement:&quot;</span> <span class="token operator">+</span> text<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The result is: positive emotion&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The result is: negative emotions&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,102);function P(S,_){const e=c("ExternalLinkIcon");return p(),l("div",null,[u,s("blockquote",null,[s("p",null,[n("The following sample code can be found here for the complete project: "),s("a",r,[n("Plugin SDK"),t(e)])])]),d,s("p",null,[n("For more information, see "),s("a",k,[n("Jitpack.io"),t(e)]),n(".")]),m,s("p",null,[s("a",h,[n("OCR plug-in download"),t(e)]),n("("),v,n(")")]),g,s("p",null,[n("For more information, see "),s("a",b,[n("TessBaseAPI"),t(e)]),n(".")]),f,s("p",null,[s("a",y,[n("Pytorch plug-in download"),t(e)]),n("("),w,n(")")]),x,s("p",null,[n("If you don\u2019t know much about Pytorch, I (referring to the plugin author "),q,n(") recommend you to go to this website to learn about: "),s("a",j,[n("Deep Learning Pytorch"),t(e)])]),T])}const C=o(i,[["render",P],["__file","plugins.html.vue"]]);export{C as default};
