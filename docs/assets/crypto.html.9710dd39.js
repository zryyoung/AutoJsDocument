import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as e,e as a,r as i}from"./app.6aa2b576.js";const l={},u=n("h1",{id:"crypto",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#crypto","aria-hidden":"true"},"#"),s(" crypto")],-1),r={href:"https://pro.autojs.org/",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"The $crypto module provides support for symmetric encryption (such as AES), asymmetric encryption (such as RSA), and message digest (such as MD5, SHA).",-1),k=n("h2",{id:"crypto-digest-message-algorithm-options",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#crypto-digest-message-algorithm-options","aria-hidden":"true"},"#"),s(" $crypto.digest(message, algorithm[, options])")],-1),y=n("li",null,[n("code",null,[n("span",{class:"token property"},"data")]),s(" {any} The message that needs to be digested")],-1),m=n("li",null,[n("code",null,[n("span",{class:"token property"},"key")]),s(" {"),n("a",{href:"#key"},"Key"),s("} Decryption key")],-1),h=n("code",null,[n("span",{class:"token property"},"algorithm")],-1),v=a('<li><code><span class="token constant">MD5</span></code></li><li><code><span class="token constant">SHA</span><span class="token operator">-</span><span class="token number">1</span></code></li><li><code><span class="token constant">SHA</span><span class="token operator">-</span><span class="token number">224</span></code></li><li><code><span class="token constant">SHA</span><span class="token operator">-</span><span class="token number">256</span></code></li><li><code><span class="token constant">SHA</span><span class="token operator">-</span><span class="token number">384</span></code></li>',5),g=n("code",null,[n("span",{class:"token constant"},"SHA"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"512")],-1),b={href:"https://developer.android.com/reference/java/security/MessageDigest",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,[n("code",null,[n("span",{class:"token property"},"options")]),s(" {Object} optional options, used to specify "),n("a",{href:"#type-and-format-of-input-and-output"},"input and output type and format")],-1),q=n("li",null,[s("Return {any} returns different data according to the output type specified by "),n("code",null,[n("span",{class:"token property"},"options")])],-1),S=a(`<p>The data <code><span class="token property">data</span></code> uses the algorithm <code><span class="token property">algorithm</span></code> to calculate the message digest. The data <code><span class="token property">data</span></code> can be file, binary, base64, hex, string and other data. After decryption, the data can be returned to binary, base64, hex, string or directly written in To the file, see [Types and Formats of Input and Output](#Types and Formats of Input and Output) for details.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Calculate the md5 of the string abc</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;MD5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Calculate the sha-256 of the string abc</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SHA-256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;Auto.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SHA-256&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;hex&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Calculate md5 of file /sdcard/1.txt</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;MD5&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crypto-encrypt-data-key-algorithm-options" tabindex="-1"><a class="header-anchor" href="#crypto-encrypt-data-key-algorithm-options" aria-hidden="true">#</a> $crypto.encrypt(data, key, algorithm[, options])</h2>`,3),A=a('<li><code><span class="token property">data</span></code> {any} plaintext message, with parameters of different formats according to the input type specified by <code><span class="token property">options</span></code></li><li><code><span class="token property">key</span></code> {<a href="#key">Key</a>} Encryption key. Symmetric encryption algorithm uses a single key, asymmetric encryption requires a key pair, see <a href="#key">Key</a></li>',2),P=n("code",null,[n("span",{class:"token property"},"algorithm")],-1),K=a("<li>AES</li><li>AES/ECB/NoPadding</li><li>AES/ECB/PKCS5Padding</li><li>AES/CBC/NoPadding</li><li>AES/CBC/PKCS5Padding</li><li>AES/CFB/NoPadding</li><li>AES/CFB/PKCS5Padding</li><li>AES/CTR/NoPadding</li><li>AES/CTR/PKCS5Padding</li><li>AES/OFB/PKCS5Padding</li><li>AES/OFB/PKCS5Padding</li><li>RSA/ECB/PKCS1Padding</li><li>RSA/ECB/NoPadding</li>",13),x={href:"https://developer.android.com/reference/javax/crypto/Cipher",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,[n("code",null,[n("span",{class:"token property"},"options")]),s(" {Object} optional options, used to specify "),n("a",{href:"#type-and-format-of-input-and-output"},"input and output type and format")],-1),w=n("li",null,[s("Return {any} returns different data according to the output type specified by "),n("code",null,[n("span",{class:"token property"},"options")])],-1),E=a(`<p>Use the key <code><span class="token property">key</span></code> to encrypt the data <code><span class="token property">data</span></code> with the encryption algorithm <code><span class="token property">algorithm</span></code>. The data <code><span class="token property">data</span></code> can be file, binary, base64, hex, string and other data. After encryption, the data can be returned to binary, base64, hex. , String or write directly to the file, see [Types and Formats of Input and Output](#Types and Formats of Input and Output) for details.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello Autojs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// Key, because AES and other algorithms require 128/192/256 bits, our length here is 16, which is 128bits</span>
<span class="token keyword">let</span> str16 <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span>str16<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// AES</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-18, 27, -69, 81, 2, -87, -116, 23, -114, -86, -111, 40 , 58, -127, -29, -59]</span>
<span class="token comment">// AES output results are displayed in base64</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>
  $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7hu7UQKpjBeOqpEoOoHjxQ==</span>
<span class="token comment">// AES default plaintext padding mode PKCS5Padding, the result is the same as above</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>
  $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES/ECB/PKCS5Padding&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7hu7UQKpjBeOqpEoOoHjxQ==</span>

<span class="token comment">// AES encryption</span>
<span class="token keyword">let</span> cipherText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-18, 27, -69, 81, 2, -87, -116, 23, -114, -86, -111, 40, 58, -127, -29, -59]</span>

<span class="token comment">// RSA256KeyPair</span>
<span class="token keyword">let</span> algorithm <span class="token operator">=</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token string">&quot;2048&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// Generate RSA key pair</span>
key <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello Autojs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// RSA encryption</span>
cipherText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA/ECB/PKCS1Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [114, 99, -93, 6, -88, 8, -12, -53, -68, -15, ...]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crypto-decrypt-data-key-algorithm-options" tabindex="-1"><a class="header-anchor" href="#crypto-decrypt-data-key-algorithm-options" aria-hidden="true">#</a> $crypto.decrypt(data, key, algorithm[, options])</h2>`,3),C=a('<li><code><span class="token property">data</span></code> {any} The input type specified by the cipher text message <code><span class="token property">options</span></code> is a parameter of different formats</li><li><code><span class="token property">key</span></code> {<a href="#key">Key</a>} Decryption key. Symmetric encryption algorithm uses a single key, asymmetric encryption requires a key pair, see <a href="#key">Key</a></li>',2),T=n("code",null,[n("span",{class:"token property"},"algorithm")],-1),j=a("<li>AES</li><li>AES/ECB/NoPadding</li><li>AES/ECB/PKCS5Padding</li><li>AES/CBC/NoPadding</li><li>AES/CBC/PKCS5Padding</li><li>AES/CFB/NoPadding</li><li>AES/CFB/PKCS5Padding</li><li>AES/CTR/NoPadding</li><li>AES/CTR/PKCS5Padding</li><li>AES/OFB/PKCS5Padding</li><li>AES/OFB/PKCS5Padding</li><li>RSA/ECB/PKCS1Padding</li><li>RSA/ECB/NoPadding</li>",13),$={href:"https://developer.android.com/reference/javax/crypto/Cipher",target:"_blank",rel:"noopener noreferrer"},B=n("li",null,[n("code",null,[n("span",{class:"token property"},"options")]),s(" {Object} optional options, used to specify "),n("a",{href:"#type-and-format-of-input-and-output"},"input and output type and format")],-1),R=n("li",null,[s("Return {any} returns different data according to the output type specified by "),n("code",null,[n("span",{class:"token property"},"options")])],-1),O=a(`<p>Use the key <code><span class="token property">key</span></code> to decrypt the data <code><span class="token property">data</span></code> with the decryption algorithm <code><span class="token property">algorithm</span></code>. The data <code><span class="token property">data</span></code> can be file, binary, base64, hex, string and other data. After decryption, the data can be returned to binary, base64, hex , String or write directly to the file, see [Types and Formats of Input and Output](#Types and Formats of Input and Output) for details.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// AES encryption, encrypted as base64 data</span>
<span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">&quot;1234567890123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cipherText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Auto.js Pro!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// AES decryption, decrypt base64 data into a string</span>
<span class="token keyword">let</span> plaintext <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;input&quot;</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crypto-generatekeypair-algorithm-length" tabindex="-1"><a class="header-anchor" href="#crypto-generatekeypair-algorithm-length" aria-hidden="true">#</a> $crypto.generateKeyPair(algorithm[, length])</h2><ul><li><code><span class="token property">algorithm</span></code> {string} encryption algorithm, including <ul><li><code><span class="token constant">DH</span></code></li><li><code><span class="token constant">DSA</span></code></li><li><code><span class="token constant">EC</span></code></li><li><code><span class="token constant">RSA</span></code></li></ul></li><li><code><span class="token property">length</span></code> {number} The length of the key. Related to the algorithm, such as the length of the modulus specified in digits. The default is 256.</li><li>Return {<a href="#keypair">KeyPair</a>}</li></ul><p>Generate a pair of keys, including a public key and a private key. For example, in the RSA encryption algorithm, we can use private key encryption and public key decryption for signature; or public key encryption and private key decryption for data encryption.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> keyPair <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The public key is&quot;</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The private key is&quot;</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Public key encryption, private key decryption</span>
<span class="token keyword">let</span> plainText <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bytes <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plainText<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> decryptedText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decryptedText<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Public key decryption, private key encryption</span>
<span class="token keyword">let</span> base64 <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plainText<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
decryptedText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decryptedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> Key</h1><p>The key object. It can be constructed directly through the constructor. For example, <code><span class="token keyword">new</span> <span class="token class-name">Key</span><span class="token punctuation">(</span><span class="token string">&#39;12345678&#39;</span><span class="token punctuation">)</span></code>.</p><h2 id="new-key-data-options" tabindex="-1"><a class="header-anchor" href="#new-key-data-options" aria-hidden="true">#</a> new Key(data[, options])</h2><ul><li><code><span class="token property">data</span></code> {any} The content of the key depends on the input format of the <code><span class="token property">options</span></code> option, the default is a string format</li><li><code><span class="token property">options</span></code> {Object} Optional parameters, see [Type and format of input and output](#Type and format of input and output)</li></ul><p>The constructor, which constructs a Key object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">&#39;1234567890123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Get the binary data of Key</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> key<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token comment">// Convert to base64</span>
<span class="token keyword">let</span> base64 <span class="token operator">=</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token constant">NO_WRAP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// reconstruct a Key from base64</span>
<span class="token keyword">let</span> copiedKey <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copiedKey<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="key-data" tabindex="-1"><a class="header-anchor" href="#key-data" aria-hidden="true">#</a> Key.data</h2><ul><li><code>byte\\<span class="token punctuation">[</span>\\<span class="token punctuation">]</span></code></li></ul><p>Key binary data.</p><h1 id="keypair" tabindex="-1"><a class="header-anchor" href="#keypair" aria-hidden="true">#</a> KeyPair</h1><p>The key pair object. It can be generated by the <code>$crypto<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function or constructed by the constructor.</p><h2 id="new-keypair-publickey-privatekey-options" tabindex="-1"><a class="header-anchor" href="#new-keypair-publickey-privatekey-options" aria-hidden="true">#</a> new KeyPair(publicKey, privateKey[, options])</h2><p><strong>[Added in Pro 8.7.2]</strong></p><ul><li><code><span class="token property">publicKey</span></code> {any} public key data, according to the input format of the <code><span class="token property">options</span></code> option, the default is a string format</li><li><code><span class="token property">privateKey</span></code> {any} The data of the private key depends on the input format of the <code><span class="token property">options</span></code> option, the default is a string format</li><li><code><span class="token property">options</span></code> {Object} Optional parameters, see [Type and format of input and output](#Type and format of input and output)</li></ul><p>The constructor, which constructs a KeyPair object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> keyPair <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Obtain the binary data of the public key and private key and convert it to base64</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">publicKey</span><span class="token operator">:</span> <span class="token function">base64Bytes</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">privateKey</span><span class="token operator">:</span> <span class="token function">base64Bytes</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// reconstruct a Key from base64</span>
<span class="token keyword">let</span> copiedKeyPair <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">KeyPair</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> data<span class="token punctuation">.</span>privateKey<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copiedKeyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">base64Bytes</span><span class="token punctuation">(</span><span class="token parameter">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token constant">NO_WRAP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="keypair-privatekey" tabindex="-1"><a class="header-anchor" href="#keypair-privatekey" aria-hidden="true">#</a> KeyPair.privateKey</h2><ul><li>{<a href="#key">Key</a>}</li></ul><p>Private key.</p><h2 id="keypair-publickey" tabindex="-1"><a class="header-anchor" href="#keypair-publickey" aria-hidden="true">#</a> KeyPair.publicKey</h2><ul><li>{<a href="#key">Key</a>}</li></ul><p>Public key.</p><h1 id="type-and-format-of-input-and-output" tabindex="-1"><a class="header-anchor" href="#type-and-format-of-input-and-output" aria-hidden="true">#</a> Type and format of input and output</h1><p><code><span class="token property">options</span></code> {object} is used to specify the type and format of input and output for encryption, decryption, and message digest.</p><ul><li><p><code><span class="token property">input</span></code> {string} Input type, used to specify the type of source data for encryption, decryption, and digest. If the input is a string, the default is <code><span class="token property">string</span></code>; otherwise, the default is <code><span class="token property">bytes</span></code>. Optional values \u200B\u200Binclude:</p><ul><li><code><span class="token property">string</span></code> data in string format</li><li><code><span class="token property">base64</span></code> data in base64 format</li><li><code><span class="token property">hex</span></code> base16 format data</li><li><code><span class="token property">bytes</span></code> Java binary byte array</li><li><code><span class="token property">file</span></code> file type, the data will be read from the file for encryption and decryption</li></ul></li><li><p><code><span class="token property">output</span></code> {string} Output type, used to specify the type of data after encryption, decryption, and digest. For encryption and decryption, the default is <code><span class="token property">bytes</span></code>; for message digest, the default is <code><span class="token property">hex</span></code>. Optional values \u200B\u200Binclude:</p><ul><li><code><span class="token property">string</span></code> data in string format</li><li><code><span class="token property">base64</span></code> data in base64 format</li><li><code><span class="token property">hex</span></code> base16 format data</li><li><code><span class="token property">bytes</span></code> Java binary byte array</li><li><code><span class="token property">file</span></code> file type, to write the processed data to the file, the <code><span class="token property">dest</span></code> parameter must be specified at the same time</li></ul></li><li><p><code><span class="token property">dest</span></code> {string} Output file path, when the type of <code><span class="token property">output</span></code> is <code><span class="token property">file</span></code>, it is used to specify the path of the output file after encryption, decryption, and digest</p></li><li><p><code><span class="token property">encoding</span></code> {string} encoding format, when the type of <code><span class="token property">input</span></code> is <code><span class="token property">string</span></code>, it is used to specify the character encoding used to convert the input string into binary data; when the type of <code><span class="token property">output</span></code> is <code><span class="token property">string</span></code>, it is used to specify the output The character encoding used to convert data to string data. The default is <code>utf<span class="token operator">-</span><span class="token number">8</span></code></p></li><li><p><code><span class="token property">iv</span></code> {string} | {bytes} Specifies the initialization vector parameter of encryption such as AES, optional. Added in Pro 9.2.12 version.</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> filepath <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello Autojs&quot;</span><span class="token punctuation">;</span>
$files<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> str16 <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span>str16<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create base64 content before encryption</span>
<span class="token keyword">let</span> base64Content <span class="token operator">=</span> $base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// hex content before encryption</span>
<span class="token keyword">let</span> hexContent <span class="token operator">=</span> <span class="token string">&quot;48656c6c6f204175746f6a73&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Encrypted file, output format is binary</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Encrypt the file and output to another file</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token string">&quot;./output.txt&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Encrypt base64 content, the output format is base64</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;SGVsbG8gQXV0b2pz&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Encrypt hex content, the output format is hex</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;48656c6c6f204175746f6a73&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;hex&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;hex&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Autojs&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [-18, 27, -69, 81, 2, -87, -116, 23, -114, -86, -111, 40, 58, -127, -29, -59]</span>

<span class="token comment">// Calculate file MD5, output as hex</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">&quot;MD5&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;hex&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function F(H,N){const t=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("strong",null,[s("["),n("a",r,[s("Pro 8.0.0 New"),e(t)]),s("]")])]),d,k,n("ul",null,[y,m,n("li",null,[h,s(" {string} Message digest algorithm, including: "),n("ul",null,[v,n("li",null,[g,s(" For details, please refer to "),n("a",b,[s("MessageDigest"),e(t)])])])]),f,q]),S,n("ul",null,[A,n("li",null,[P,s(" {string} encryption algorithm, including: "),n("ul",null,[K,n("li",null,[s("... For details, please refer to "),n("a",x,[s("javax.crypto.Cipher"),e(t)])])])]),_,w]),E,n("ul",null,[C,n("li",null,[T,s(" {string} encryption algorithm, including: "),n("ul",null,[j,n("li",null,[s("... For details, please refer to "),n("a",$,[s("javax.crypto.Cipher"),e(t)])])])]),B,R]),O])}const M=p(l,[["render",F],["__file","crypto.html.vue"]]);export{M as default};
