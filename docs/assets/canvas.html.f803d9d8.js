import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,a as e,b as a,d as t,e as r,r as i}from"./app.6aa2b576.js";const c={},l=e("h1",{id:"canvas",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#canvas","aria-hidden":"true"},"#"),a(" canvas")],-1),d=e("p",null,"Canvas provides support for 2D drawing. It can be used in the development of simple minigames or image editing. It is easy to use canvas to draw lines and shapes on a single bitmap or a canvas.",-1),h=e("strong",null,"Important!",-1),u={href:"https://developer.android.com/reference/android/graphics/Canvas",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.android.com/reference/android/graphics/Canvas",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.android.com/reference/android/graphics/Paint",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.android.com/reference/android/graphics/Path",target:"_blank",rel:"noopener noreferrer"},w=r(`<p>The coordinate system of canvas is a Cartesian coordinate system. The origin is the top left corner of the control. The x-axis is the top edge of the control and the y-axis is the left edge of the control. For example, on a screen with a resolution of 1920*1080, the canvas control covers the full screen and draws a line from the top left corner to the bottom right corner of the screen as:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">,</span> <span class="token number">1920</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>How the canvas draw is based on the paint. For example, drawing a solid red square as</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set the paint Style to fill, then the square will be filled</span>
paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span><span class="token constant">FILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set the color of the paint to red</span>
paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// draw a square from (0, 0) to (100, 100)</span>
canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to draw the border of the square, you should set the paint Style to stroke.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set the paint Style to stroke, then the square will be stroked</span>
paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set the color of the paint to red</span>
paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// draw a square from (0, 0) to (100, 100)</span>
canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Canvas can draw basic shapes, pictures and so on.</p><h2 id="canvas-getwidth" tabindex="-1"><a class="header-anchor" href="#canvas-getwidth" aria-hidden="true">#</a> canvas.getWidth()</h2><ul><li>Returns {number}</li></ul><p>Returns the width of the current drawing layer.</p><h2 id="canvas-getheight" tabindex="-1"><a class="header-anchor" href="#canvas-getheight" aria-hidden="true">#</a> canvas.getHeight()</h2><ul><li>Returns {number}</li></ul><p>Returns the height of the current drawing layer.</p><h2 id="canvas-drawrgb-r-g-b" tabindex="-1"><a class="header-anchor" href="#canvas-drawrgb-r-g-b" aria-hidden="true">#</a> canvas.drawRGB(r, g, b)</h2><ul><li><code><span class="token property">r</span></code> {number} red component (0..255) of the color to draw onto the canvas</li><li><code><span class="token property">g</span></code> {number} green component (0..255) of the color to draw onto the canvas</li><li><code><span class="token property">b</span></code> {number} blue component (0..255) of the color to draw onto the canvas</li></ul><p>Fills the entire drawable area with the specified color. Equivalent to <code>canvas<span class="token punctuation">.</span><span class="token function">drawColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">rgb</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></code>.</p><h2 id="canvas-drawargb-a-r-g-b" tabindex="-1"><a class="header-anchor" href="#canvas-drawargb-a-r-g-b" aria-hidden="true">#</a> canvas.drawARGB(a, r, g, b)</h2><ul><li><code><span class="token property">a</span></code> {number} alpha component (0..255) of the color to draw onto the canvas</li><li><code><span class="token property">r</span></code> {number} red component (0..255) of the color to draw onto the canvas</li><li><code><span class="token property">g</span></code> {number} green component (0..255) of the color to draw onto the canvas</li><li><code><span class="token property">b</span></code> {number} blue component (0..255) of the color to draw onto the canvas</li></ul><p>Fill the entire drawable area with the specified color. Equivalent to <code>canvas<span class="token punctuation">.</span><span class="token function">drawColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">argb</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></code>.</p><h2 id="canvas-drawcolor-color" tabindex="-1"><a class="header-anchor" href="#canvas-drawcolor-color" aria-hidden="true">#</a> canvas.drawColor(color)</h2><ul><li><code><span class="token property">color</span></code> {number} the color to draw onto the canvas</li></ul><p>Fills the entire drawable area with the specified color.</p><h2 id="canvas-drawcolor-color-mode" tabindex="-1"><a class="header-anchor" href="#canvas-drawcolor-color-mode" aria-hidden="true">#</a> canvas.drawColor(color, mode)</h2><ul><li><code><span class="token property">color</span></code> {number} the color to draw onto the canvas</li><li><code><span class="token property">mode</span></code> {PorterDuff.Mode} the porter-duff mode to apply to the color</li></ul><p>Fills the entire drawable area with the specified color.</p><h2 id="canvas-drawpaint-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawpaint-paint" aria-hidden="true">#</a> canvas.drawPaint(paint)</h2><ul><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw onto the canvas</li></ul><p>Fills the entire drawable area with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint.</p><h2 id="canvas-drawpoint-x-y-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawpoint-x-y-paint" aria-hidden="true">#</a> canvas.drawPoint(x, y, paint)</h2><ul><li><code><span class="token property">x</span></code> {number} x-coordinate</li><li><code><span class="token property">y</span></code> {number} y-coordinate</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the point</li></ul><p>Draws a point specified by the coordinates (x, y) in the drawable area, and its diameter is specified by the paint&#39;s stroke width. The shape of the point is controlled by the paint&#39;s Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle.</p><blockquote><p>If the stroke width is 0, it will always draws exactly 1 pixel (or at most 4 if antialiasing is enabled).</p></blockquote><p>Equivalent to <code>canvas<span class="token punctuation">.</span><span class="token function">drawPoints</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span></code>.</p><h2 id="canvas-drawpoints-pts-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawpoints-pts-paint" aria-hidden="true">#</a> canvas.drawPoints(pts, paint)</h2><ul><li><code><span class="token property">pts</span></code> {Array&lt;number&gt;} array of points to draw [x0, y0, x1, y1, x2, y2, ...]</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the points</li></ul><p>Draws multiple points specified by the array of coordinates in the drawable area.</p><h2 id="canvas-drawline-startx-starty-stopx-stopy-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawline-startx-starty-stopx-stopy-paint" aria-hidden="true">#</a> canvas.drawLine(startX, startY, stopX, stopY, paint)</h2><ul><li><code><span class="token property">startX</span></code> {number} the x-coordinate of the start point</li><li><code><span class="token property">startY</span></code> {number} the y-coordinate of the start point</li><li><code><span class="token property">endX</span></code> {number} the x-coordinate of the end point</li><li><code><span class="token property">endY</span></code> {number} the y-coordinate of the end point</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the line</li></ul><p>Draws the line from (startX, startY) to (endX, endY) in the drawable area. The paint Style is ignored when drawing. In other words, the line is drawn even if the Style is set to fill. Degenerate lines (length is 0) will not be drawn.</p><h2 id="canvas-drawlines-pts-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawlines-pts-paint" aria-hidden="true">#</a> canvas.drawLines(pts, paint)</h2><ul><li><code><span class="token property">pts</span></code> {Array&lt;number&gt;} array of points to draw [x0 y0 x1 y1 x2 y2 ...]</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the points</li></ul><p>Draw a series of lines in the drawable area.</p><p>Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: <code>canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>pts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pts<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span></code> followed by <code>canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>pts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pts<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pts<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pts<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span></code> and so on.</p><p>The paint Style is ignored when drawing. In other words, the line is drawn even if the Style is set to fill.</p><h2 id="canvas-drawrect-r-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawrect-r-paint" aria-hidden="true">#</a> canvas.drawRect(r, paint)</h2><ul><li><code><span class="token property">r</span></code> {Rect} the boundaries of the rectangle</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the rectangle</li></ul><p>Draws the rectangle specified by the rectangle boundary r in the drawable area. The rectangle will be filled or framed based on the paint Style.</p><p>Equivalent to <code>canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">,</span> r<span class="token punctuation">.</span>top<span class="token punctuation">,</span> r<span class="token punctuation">.</span>right<span class="token punctuation">,</span> r<span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> paint<span class="token punctuation">)</span></code>.</p><h2 id="canvas-drawrect-left-top-right-bottom-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawrect-left-top-right-bottom-paint" aria-hidden="true">#</a> canvas.drawRect(left, top, right, bottom, paint)</h2><ul><li><code><span class="token property">left</span></code> {number} the x-coordinate of the left border of the rectangle</li><li><code><span class="token property">top</span></code> {number} the y-coordinate of the top border of the rectangle</li><li><code><span class="token property">right</span></code> {number} the x-coordinate of the right border of the rectangle</li><li><code><span class="token property">bottom</span></code> {number} the y-coordinate of the bottom border of the rectangle</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the rectangle</li></ul><p>Draws the rectangle specified by the rectangle boundaries (left, top, right, bottom) in the drawable area. The rectangle will be filled or framed based on the paint Style.</p><h2 id="canvas-drawoval-oval-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawoval-oval-paint" aria-hidden="true">#</a> canvas.drawOval(oval, paint)</h2><ul><li><code><span class="token property">oval</span></code> {RectF} the rectangle bounds of the oval to be drawn</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the oval</li></ul><p>Draw the specified oval in the drawable area. The oval will be filled or framed based on the Style in the paint.</p><h2 id="canvas-drawoval-left-top-right-bottom-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawoval-left-top-right-bottom-paint" aria-hidden="true">#</a> canvas.drawOval(left, top, right, bottom, paint)</h2><ul><li><code><span class="token property">left</span></code> {number} the x-coordinate of the left border of the rectangle bounds</li><li><code><span class="token property">top</span></code> {number} the y-coordinate of the top border of the rectangle bounds</li><li><code><span class="token property">right</span></code> {number} the x-coordinate of the right border of the rectangle bounds</li><li><code><span class="token property">bottom</span></code> {number} the y-coordinate of the bottom border of the rectangle bounds</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the oval</li></ul><p>Draw the specified oval in the drawable area. The oval will be filled or framed based on the Style in the paint.</p><h2 id="canvas-drawcircle-cx-cy-radius-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawcircle-cx-cy-radius-paint" aria-hidden="true">#</a> canvas.drawCircle(cx, cy, radius, paint)</h2><ul><li><code><span class="token property">cx</span></code> {number} the x-coordinate of the center of the circle to be drawn</li><li><code><span class="token property">cy</span></code> {number} the y-coordinate of the center of the circle to be drawn</li><li><code><span class="token property">radius</span></code> {number} the radius of the circle to be drawn</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the circle</li></ul><p>Draw the specified circle in the drawable area. If radius is &lt;= 0, then nothing will be drawn. The circle will be filled or framed based on the Style in the paint.</p><h2 id="canvas-drawarc-oval-startangle-sweepangle-usecenter-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawarc-oval-startangle-sweepangle-usecenter-paint" aria-hidden="true">#</a> canvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint)</h2><ul><li><code><span class="token property">oval</span></code> {RectF} the bounds of oval used to define the shape and size of the arc</li><li><code><span class="token property">startAngle</span></code> {number} starting angle (in degrees) where the arc begins</li><li><code><span class="token property">sweepAngle</span></code> {number} sweep angle (in degrees) measured clockwise</li><li><code><span class="token property">useCenter</span></code> {boolean} if true, include the center of the oval in the arc</li><li><code><span class="token property">paint</span></code> {Paint}the paint used to draw the arc</li></ul><p>Draw the specified arc in the drawable area, which will be scaled to fit inside the specified oval.</p><p>If the start angle is negative or &gt;= 360, the start angle is treated as start angle modulo 360.</p><p>If the sweep angle is &gt;= 360, then the oval is drawn completely. Note that this differs slightly from <code>path<span class="token punctuation">.</span><span class="token function">arcTo</span><span class="token punctuation">(</span>oval<span class="token punctuation">,</span> startAngle<span class="token punctuation">,</span> sweepAngle<span class="token punctuation">)</span></code>, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360</p><p>The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o&#39;clock on a watch.)</p><p>If useCenter is set to true, the border will include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge.</p><p>Equivalent to <code>canvas<span class="token punctuation">.</span><span class="token function">drawArc</span><span class="token punctuation">(</span>oval<span class="token punctuation">.</span>left<span class="token punctuation">,</span> oval<span class="token punctuation">.</span>top<span class="token punctuation">,</span> oval<span class="token punctuation">.</span>right<span class="token punctuation">,</span> oval<span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> startAngle<span class="token punctuation">,</span> sweepAngle<span class="token punctuation">,</span> useCenter<span class="token punctuation">,</span> paint<span class="token punctuation">)</span></code>.</p><h2 id="canvas-drawarc-left-top-right-bottom-startangle-sweepangle-usecenter-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawarc-left-top-right-bottom-startangle-sweepangle-usecenter-paint" aria-hidden="true">#</a> canvas.drawArc(left, top, right, bottom, startAngle, sweepAngle, useCenter, paint)</h2><ul><li><code><span class="token property">left</span></code> {number}</li><li><code><span class="token property">top</span></code> {number}</li><li><code><span class="token property">right</span></code> {number}</li><li><code><span class="token property">bottom</span></code> {number}</li><li><code><span class="token property">startAngle</span></code> {number} starting angle (in degrees) where the arc begins</li><li><code><span class="token property">sweepAngle</span></code> {number} sweep angle (in degrees) measured clockwise</li><li><code><span class="token property">useCenter</span></code> {boolean} if true, include the center of the oval in the arc</li><li><code><span class="token property">paint</span></code> {Paint}the paint used to draw the arc</li></ul><p>Draw the specified arc in the drawable area, which will be scaled to fit inside the specified oval. See <a href="#canvasdrawarcoval-startangle-sweepangle-usecenter-paint">canvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint)</a> for more details.</p><h2 id="canvas-drawroundrect-rect-rx-ry-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawroundrect-rect-rx-ry-paint" aria-hidden="true">#</a> canvas.drawRoundRect(rect, rx, ry, paint)</h2><ul><li><code><span class="token property">rect</span></code> {RectF} the rectangular bounds of the roundRect to be drawn</li><li><code><span class="token property">rx</span></code> {number} the x-radius of the oval used to round the corners</li><li><code><span class="token property">ry</span></code> {number} the y-radius of the oval used to round the corners</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the roundRect</li></ul><p>Draw the specified round-rect using the specified paint in the drawable area. The roundrect will be filled or framed based on the Style in the paint.</p><p>Equivalent to <code>canvas<span class="token punctuation">.</span><span class="token function">drawRoundRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>top<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>right<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> rx<span class="token punctuation">,</span> ry<span class="token punctuation">,</span> paint<span class="token punctuation">)</span></code>.</p><h2 id="canvas-drawroundrect-left-top-right-bottom-rx-ry-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawroundrect-left-top-right-bottom-rx-ry-paint" aria-hidden="true">#</a> canvas.drawRoundRect(left, top, right, bottom, rx, ry, paint)</h2><ul><li><code><span class="token property">left</span></code> {number}</li><li><code><span class="token property">top</span></code> {number}</li><li><code><span class="token property">right</span></code> {number}</li><li><code><span class="token property">bottom</span></code> {number}</li><li><code><span class="token property">rx</span></code> {number} the x-radius of the oval used to round the corners</li><li><code><span class="token property">ry</span></code> {number} the y-radius of the oval used to round the corners</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the roundRect</li></ul><p>Draw the specified round-rect using the specified paint in the drawable area. The roundrect will be filled or framed based on the Style in the paint.</p><h2 id="canvas-drawpath-path-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawpath-path-paint" aria-hidden="true">#</a> canvas.drawPath(path, paint)</h2><ul><li><code><span class="token property">path</span></code> {Path} the path to be drawn</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the path</li></ul><p>Draw the specified path using the specified paint in the drawable area. The path will be filled or framed based on the Style in the paint.</p><h2 id="canvas-drawbitmap-bitmap-left-top-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawbitmap-bitmap-left-top-paint" aria-hidden="true">#</a> canvas.drawBitmap(bitmap, left, top, paint)</h2><ul><li><code><span class="token property">bitmap</span></code> {Bitmap} the bitmap to be drawn</li><li><code><span class="token property">left</span></code> {number} the position of the left side of the bitmap being drawn</li><li><code><span class="token property">top</span></code> {number} the position of the top side of the bitmap being drawn</li><li><code><span class="token property">paint</span></code> {Paint} the paint used to draw the bitmap (may be null)</li></ul><p>Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix.</p><blockquote><p><strong>Note</strong>: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap&#39;s original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated.</p></blockquote><p>If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas.</p><h2 id="canvas-drawpicture-picture" tabindex="-1"><a class="header-anchor" href="#canvas-drawpicture-picture" aria-hidden="true">#</a> canvas.drawPicture(picture)</h2><ul><li><code><span class="token property">picture</span></code> {Picture} the picture to be drawn</li></ul><p>Save the canvas state, draw the picture, and restore the canvas state. This differs from <code>picture<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span></code>, which does not perform any save/restore.</p><blockquote><p><strong>Note</strong>: This forces the picture to internally call Picture#endRecording in order to prepare for playback.</p></blockquote><h2 id="canvas-drawtext-text-x-y-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawtext-text-x-y-paint" aria-hidden="true">#</a> canvas.drawText(text, x, y, paint)</h2><ul><li><code><span class="token property">text</span></code> {string} the text to be drawn</li><li><code><span class="token property">x</span></code> {number} the x-coordinate of the origin of the text being drawn</li><li><code><span class="token property">y</span></code> {number} the y-coordinate of the origin of the text being drawn</li><li><code><span class="token property">paint</span></code> {Paint} the paint used for the text (e.g. color, size, Style)</li></ul><p>Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint.</p><h2 id="canvas-drawtextonpath-text-path-hoffset-voffset-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawtextonpath-text-path-hoffset-voffset-paint" aria-hidden="true">#</a> canvas.drawTextOnPath(text, path, hOffset, vOffset, paint)</h2><ul><li><code><span class="token property">text</span></code> {string} the text to be drawn</li><li><code><span class="token property">path</span></code> {Path} the path the text should follow for its baseline</li><li><code><span class="token property">hOffset</span></code> {number} the distance along the path to add to the text&#39;s starting position</li><li><code><span class="token property">vOffset</span></code> {number} the distance above(-) or below(+) the path to position the text</li><li><code><span class="token property">paint</span></code> {Paint} the paint used for the text (e.g. color, size, Style)</li></ul><p>Draw the text in the drawable area, with origin at (x,y), using the specified paint, along the specified path. The paint&#39;s Align setting determines where along the path to start the text.</p><h2 id="canvas-translate-dx-dy" tabindex="-1"><a class="header-anchor" href="#canvas-translate-dx-dy" aria-hidden="true">#</a> canvas.translate(dx, dy)</h2><ul><li><code><span class="token property">dx</span></code> {number} the distance to translate in X</li><li><code><span class="token property">dy</span></code> {number} the distance to translate in Y</li></ul><p>Preconcat the current matrix with the specified translation.</p><h2 id="canvas-scale-sx-sy-px-py" tabindex="-1"><a class="header-anchor" href="#canvas-scale-sx-sy-px-py" aria-hidden="true">#</a> canvas.scale(sx, sy[, px, py])</h2><ul><li><code><span class="token property">sx</span></code> {number} the amount to scale in X</li><li><code><span class="token property">sy</span></code> {number} the amount to scale in Y</li><li><code><span class="token property">px</span></code> {number} the x-coord for the pivot point (unchanged by the scale), 0 if not provided</li><li><code><span class="token property">py</span></code> {number} the y-coord for the pivot point (unchanged by the scale), 0 if not provided</li></ul><p>Preconcat the current matrix with the specified scale.</p><h2 id="canvas-rotate-degrees-px-py" tabindex="-1"><a class="header-anchor" href="#canvas-rotate-degrees-px-py" aria-hidden="true">#</a> canvas.rotate(degrees[, px, py])</h2><ul><li><code><span class="token property">degrees</span></code> {number} the amount to rotate, in degrees</li><li><code><span class="token property">px</span></code> {number} the x-coord for the pivot point (unchanged by the rotation), 0 if not provided</li><li><code><span class="token property">py</span></code> {number} the y-coord for the pivot point (unchanged by the rotation), 0 if not provided</li></ul><p>Preconcat the current matrix with the specified rotation.</p><h2 id="canvas-skew-sx-sy" tabindex="-1"><a class="header-anchor" href="#canvas-skew-sx-sy" aria-hidden="true">#</a> canvas.skew(sx, sy)</h2><ul><li><code><span class="token property">sx</span></code> {number} the amount to skew in X</li><li><code><span class="token property">sy</span></code> {number} the amount to skew in Y Preconcat the current matrix with the specified skew.</li></ul><h1 id="paint" tabindex="-1"><a class="header-anchor" href="#paint" aria-hidden="true">#</a> Paint</h1><h1 id="matrix" tabindex="-1"><a class="header-anchor" href="#matrix" aria-hidden="true">#</a> Matrix</h1><h1 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> Path</h1><h1 id="patheffect" tabindex="-1"><a class="header-anchor" href="#patheffect" aria-hidden="true">#</a> PathEffect</h1><h1 id="porter-duff-mode-blend-mode" tabindex="-1"><a class="header-anchor" href="#porter-duff-mode-blend-mode" aria-hidden="true">#</a> Porter-Duff Mode &amp; Blend Mode</h1><h1 id="picture" tabindex="-1"><a class="header-anchor" href="#picture" aria-hidden="true">#</a> Picture</h1><h1 id="shader" tabindex="-1"><a class="header-anchor" href="#shader" aria-hidden="true">#</a> Shader</h1><h1 id="maskfilter" tabindex="-1"><a class="header-anchor" href="#maskfilter" aria-hidden="true">#</a> MaskFilter</h1><h1 id="colorfilter" tabindex="-1"><a class="header-anchor" href="#colorfilter" aria-hidden="true">#</a> ColorFilter</h1><h1 id="region" tabindex="-1"><a class="header-anchor" href="#region" aria-hidden="true">#</a> Region</h1><h1 id="typeface" tabindex="-1"><a class="header-anchor" href="#typeface" aria-hidden="true">#</a> Typeface</h1><h1 id="bitmap-imagedecoder" tabindex="-1"><a class="header-anchor" href="#bitmap-imagedecoder" aria-hidden="true">#</a> Bitmap &amp; ImageDecoder</h1><h1 id="ninepatch" tabindex="-1"><a class="header-anchor" href="#ninepatch" aria-hidden="true">#</a> NinePatch</h1>`,120);function m(v,y){const n=i("ExternalLinkIcon");return o(),p("div",null,[l,d,e("blockquote",null,[e("p",null,[h,a(" The canvas module is from "),e("a",u,[a("Android Canvas"),t(n)]),a(". Some usages and documentations of this module are missing but you can find them in Android documentation. See "),e("a",k,[a("Android Canvas"),t(n)]),a(", "),e("a",f,[a("Android Paint"),t(n)]),a(" and "),e("a",b,[a("Android Path"),t(n)]),a(" for more details.")])]),w])}const P=s(c,[["render",m],["__file","canvas.html.vue"]]);export{P as default};
