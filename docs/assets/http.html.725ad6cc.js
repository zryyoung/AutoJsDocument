import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,b as s,d as t,e,r as i}from"./app.6aa2b576.js";const l={},u=e(`<h1 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> http</h1><blockquote><p>Stability: 2-Stable</p></blockquote><p>The http module provides some functions for making http requests.</p><h2 id="http-get-url-options-callback" tabindex="-1"><a class="header-anchor" href="#http-get-url-options-callback" aria-hidden="true">#</a> http.get(url[, options, callback])</h2><ul><li><code><span class="token property">url</span></code> {string} The requested URL address must start with &quot;http://&quot; or &quot;https://&quot;. If the url does not start with &quot;http://&quot;, it will default to &quot;http://&quot;.</li><li><code><span class="token property">options</span></code> {Object} Request options. See [http.request()][].</li><li><code><span class="token property">callback</span></code> {Function} Callback function, optional, its parameter is a [Response][] object. If no callback function is added, the request will be blocked and executed synchronously.</li></ul><p>Make an HTTP GET request to the address url. If there is no callback function, the response to this request will be returned when the request is completed or failed (see [Response][]).</p><p>The simplest GET request is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;code = &quot;</span><span class="token operator">+</span> r<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html = &quot;</span><span class="token operator">+</span> r<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The GET request in the form of callback is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;code = &quot;</span><span class="token operator">+</span> res<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html = &quot;</span><span class="token operator">+</span> res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to add HTTP header information, add it to the options parameter, for example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
<span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token string-property property">&#39;Accept-Language&#39;</span><span class="token operator">:</span><span class="token string">&#39;zh-cn,zh;q=0.5&#39;</span><span class="token punctuation">,</span>
<span class="token string-property property">&#39;User-Agent&#39;</span><span class="token operator">:</span><span class="token string">&#39;Mozilla/5.0(Macintosh;IntelMacOSX10_7_0)AppleWebKit/535.11(KHTML,likeGecko)Chrome/17.0.963.56Safari/535.11&#39;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;code = &quot;</span><span class="token operator">+</span> r<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html = &quot;</span><span class="token operator">+</span> r<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An example of requesting weather and parsing the returned weather JSON result is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> city <span class="token operator">=</span> <span class="token string">&quot;Guangzhou&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.sojson.com/open/api/weather/json.shtml?city=&quot;</span> <span class="token operator">+</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Request failed: &quot;</span><span class="token operator">+</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span> res<span class="token punctuation">.</span>statusMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
<span class="token keyword">var</span> weather <span class="token operator">=</span> res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>weather<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toast</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Temperature: %s Humidity: %s Air Quality: %s&quot;</span><span class="token punctuation">,</span> weather<span class="token punctuation">.</span>data<span class="token punctuation">.</span>wendu<span class="token punctuation">,</span>
weather<span class="token punctuation">.</span>data<span class="token punctuation">.</span>shidu<span class="token punctuation">,</span> weather<span class="token punctuation">.</span>quality<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-post-url-data-options-callback" tabindex="-1"><a class="header-anchor" href="#http-post-url-data-options-callback" aria-hidden="true">#</a> http.post(url, data[, options, callback])</h2><ul><li><code><span class="token property">url</span></code> {string} The requested URL address must start with &quot;http://&quot; or &quot;https://&quot;. If the url does not start with &quot;http://&quot;, it will default to &quot;http://&quot;.</li><li><code><span class="token property">data</span></code> {string} | {Object} POST data.</li><li><code><span class="token property">options</span></code> {Object} Request options.</li><li><code><span class="token property">callback</span></code> {Function} Callback, its parameter is a [Response][] object. If the callback parameter is not added, the request will be blocked and executed synchronously.</li></ul><p>Make an HTTP POST request to the address url. If there is no callback function, the response to this request will be returned when the request is completed or failed (see [Response][]).</p><p>The POST data can be a string or a key-value pair. The specific meaning depends on the value of options.contentType. The default is &quot;application/x-www-form-urlencoded&quot; (form submission), which is the default method of JQuery&#39;s ajax function.</p><p>An example of a simulated form submission to log in to Taobao is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&quot;https://login.taobao.com/member/login.jhtml&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">&quot;your username&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> password <span class="token operator">=</span> <span class="token string">&quot;Your password&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
<span class="token string-property property">&quot;TPL_username&quot;</span><span class="token operator">:</span> username<span class="token punctuation">,</span>
<span class="token string-property property">&quot;TPL_password&quot;</span><span class="token operator">:</span> password
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> html <span class="token operator">=</span> res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Page Jumping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Login successful&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Login failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-postjson-url-data-options-callback" tabindex="-1"><a class="header-anchor" href="#http-postjson-url-data-options-callback" aria-hidden="true">#</a> http.postJson(url[, data, options, callback])</h2><ul><li><code><span class="token property">url</span></code> {string} The requested URL address must start with &quot;http://&quot; or &quot;https://&quot;. If the url does not start with &quot;http://&quot;, it will default to &quot;http://&quot;.</li><li><code><span class="token property">data</span></code> {Object} POST data.</li><li><code><span class="token property">options</span></code> {Object} Request options.</li><li><code><span class="token property">callback</span></code> {Function} Callback, its parameter is a [Response][] object. If the callback parameter is not added, the request will be blocked and executed synchronously.</li></ul><p>Initiate a POST request to the target Url in JSON format. If there is no callback function, the response to this request will be returned when the request is completed or failed (see [Response][]).</p><p>The JSON format means that <code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> will be called to convert the data object into a JSON string, and the &quot;Content-Type&quot; attribute is set to &quot;application/json&quot; in the HTTP header information. This method is the default method of AngularJS&#39;s ajax function.</p><p>An example of calling the Turing robot interface is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&quot;http://www.tuling123.com/openapi/api&quot;</span><span class="token punctuation">;</span>
r <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postJson</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;65458a5df537443b89b31f1c03202a80&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">userid</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-postmultipart-url-files-options-callback" tabindex="-1"><a class="header-anchor" href="#http-postmultipart-url-files-options-callback" aria-hidden="true">#</a> http.postMultipart(url, files[, options, callback])</h2><ul><li><code><span class="token property">url</span></code> {string} The requested URL address must start with &quot;http://&quot; or &quot;https://&quot;. If the url does not start with &quot;http://&quot;, it will default to &quot;http://&quot;.</li><li><code><span class="token property">files</span></code> {Object} POST data.</li><li><code><span class="token property">options</span></code> {Object} Request options.</li><li><code><span class="token property">callback</span></code> {Function} Callback, its parameter is a <code><span class="token property">Response</span></code> object. If the callback parameter is not added, the request will be blocked and executed synchronously.</li></ul><p>Initiate a multipart/form-data request to the target address (usually used for file uploads, etc.), where the files parameter is a key-value pair of {name1: value1, name2: value2, ...}, and the value format can be as follows Several situations:</p><ol><li><code><span class="token property">string</span></code></li><li>File type, that is, the type returned by open()</li><li>[fileName, filePath]</li><li>[fileName, mimeType, filePath]</li></ol><p>Among them, 1 is a non-file parameter, and 2, 3, and 4 are file parameters. For example, the simplest file upload request is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postMultipart</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
<span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If format 2 is used, the code is</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postMultipart</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
<span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If format 3 is used, the code is</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postMultipart</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
<span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If format 2 is used with non-file parameter &quot;appId=test&quot;, it is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">postMultipart</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
<span class="token literal-property property">appId</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
<span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-request-url-options-callback" tabindex="-1"><a class="header-anchor" href="#http-request-url-options-callback" aria-hidden="true">#</a> http.request(url[, options, callback])</h2><ul><li><code><span class="token property">url</span></code> {string} The requested URL address must start with &quot;http://&quot; or &quot;https://&quot;. If the url does not start with &quot;http://&quot;, it will default to &quot;http://&quot;.</li><li><code><span class="token property">options</span></code> {Object} Request options. See [http.buildRequest()][].</li><li><code><span class="token property">callback</span></code> {Function} Callback, its parameter is a [Response][] object. If the callback parameter is not added, the request will be blocked and executed synchronously.</li></ul><p>Initiate an HTTP request to the target address url. If there is no callback function, the response to this request will be returned when the request is completed or failed (see [Response][]).</p><p>Options can contain the following attributes:</p>`,42),r=n("code",null,[n("span",{class:"token property"},"headers")],-1),d={href:"http://www.runoob.com/http/http-header-fields.html",target:"_blank",rel:"noopener noreferrer"},k=n("li",null,[n("code",null,[n("span",{class:"token property"},"method")]),s(' {string} HTTP request method. Including "GET", "POST", "PUT", "DELETE", "PATCH".')],-1),h=n("code",null,[n("span",{class:"token property"},"contentType")],-1),m={href:"http://www.runoob.com/http/http-content-type.html",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("code",null,[n("span",{class:"token property"},"body")]),s(" {string} | {Array} | {Function} The content of the HTTP request. It can be a string or a byte array; or it can be a [BufferedSink](https://github.com/square/okio/blob/master/okio/src/main/java/okio/BufferedSink. java) is a function with parameters.")],-1),b=n("p",null,"This function is the basic function of get, post, postJson and other functions. Therefore, unless it is a request such as PUT, DELETE, or a more customized HTTP request, it will be more convenient to directly use functions such as get, post, postJson.",-1),f=n("h1",{id:"response",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#response","aria-hidden":"true"},"#"),s(" Response")],-1),q=n("p",null,"The response to the HTTP request.",-1),g=n("h2",{id:"response-statuscode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#response-statuscode","aria-hidden":"true"},"#"),s(" Response.statusCode")],-1),y=n("ul",null,[n("li",null,"{number}Status code. For example, 200 (OK), 404 (Not Found), etc.")],-1),w={href:"http://www.runoob.com/http/http-status-codes.html",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"response-statusmessage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#response-statusmessage","aria-hidden":"true"},"#"),s(" Response.statusMessage")],-1),j=n("ul",null,[n("li",null,"{string}")],-1),_=n("p",null,'HTTP status information of the current response. For example, "OK", "Bad Request", "Forbidden".',-1),x={href:"http://www.runoob.com/http/http-status-codes.html",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;The page is successfully obtained!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;The page was not found...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;error: &quot;</span><span class="token operator">+</span> res<span class="token punctuation">.</span>statusCode <span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span> res<span class="token punctuation">.</span>statusMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="response-headers" tabindex="-1"><a class="header-anchor" href="#response-headers" aria-hidden="true">#</a> Response.headers</h2><ul><li>{Object}</li></ul><p>The HTTP header information of the current response. The key of this object is the response header name, and the value is the respective response header value. All response header names are lowercase (?).</p>`,5),R={href:"http://www.runoob.com/http/http-header-fields.html",target:"_blank",rel:"noopener noreferrer"},H=e(`<p>example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;www.qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP Headers:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> headerName <span class="token keyword">in</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %s&quot;</span><span class="token punctuation">,</span> headerName<span class="token punctuation">,</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>headerName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="response-body" tabindex="-1"><a class="header-anchor" href="#response-body" aria-hidden="true">#</a> Response.body</h2><ul><li>{Object}</li></ul><p>The content of the current response. He has the following attributes and functions:</p><ul><li>bytes() {Array} returns the response content as a byte array</li><li>string() {string} returns the response content as a string</li><li>json() {Object} Treat the response content as data in JSON format and call JSON.parse to return the parsed object</li><li>contentType {string} The content type of the current response</li></ul><h2 id="response-request" tabindex="-1"><a class="header-anchor" href="#response-request" aria-hidden="true">#</a> Response.request</h2><ul><li>{Request} The request corresponding to the current response. See [Request][].</li></ul><h2 id="response-url" tabindex="-1"><a class="header-anchor" href="#response-url" aria-hidden="true">#</a> Response.url</h2><ul><li>{number} The request URL corresponding to the current response.</li></ul><h2 id="response-method" tabindex="-1"><a class="header-anchor" href="#response-method" aria-hidden="true">#</a> Response.method</h2><ul><li>{string} The method of the HTTP request corresponding to the current response. For example, &quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, etc.</li></ul><p>HTTP status of the current response</p>`,13);function O(I,S){const a=i("ExternalLinkIcon");return p(),c("div",null,[u,n("ul",null,[n("li",null,[r,s(" {Object} HTTP header information in the form of key-value pairs. For HTTP header information, see "),n("a",d,[s("Novice Tutorial: HTTP Response Header Information"),t(a)]),s(".")]),k,n("li",null,[h,s(' {string} The "Content-Type" in the HTTP header information indicates the content type of the HTTP request. For example, "text/plain", "application/json". For more information, see '),n("a",m,[s("Novice Tutorial: HTTP contentType"),t(a)]),s(".")]),v]),b,f,q,g,y,n("p",null,[s("For information about HTTP status codes, see "),n("a",w,[s("Rookie Tutorial: HTTP Status Codes"),t(a)]),s(".")]),T,j,_,n("p",null,[s("For information about HTTP status codes, see "),n("a",x,[s("Rookie Tutorial: HTTP Status Codes"),t(a)]),s(".")]),P,n("p",null,[s("For HTTP header information, see "),n("a",R,[s("Novice Tutorial: HTTP Response Header Information"),t(a)]),s(".")]),H])}const F=o(l,[["render",O],["__file","http.html.vue"]]);export{F as default};
