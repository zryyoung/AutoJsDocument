import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as a,e as s}from"./app.6aa2b576.js";const t={},o=s(`<h1 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> debug</h1><p><strong>[New in Pro 8.7.0]</strong></p><p>The Debug module provides some debugging tools, such as diagnosing memory leaks, getting a detailed stack of an Error, etc.</p><h2 id="debug-dumphprof-file" tabindex="-1"><a class="header-anchor" href="#debug-dumphprof-file" aria-hidden="true">#</a> $debug.dumpHprof(file)</h2><ul><li><code><span class="token property">file</span></code> {string} dump file path</li></ul><p>Dump the memory of the entire script process to the file file.</p><p>When you find that Auto.js Pro is taking up a lot of memory, you can run this function to dump the entire memory and give feedback to the developer, who can use the memory dump file to diagnose if there is a memory leak.</p><p>During the dump process, the whole process will be stuck, please don&#39;t operate your phone at this time, in order to cause dump failure or other problems, etc.; the dump usually takes a few tens of seconds to a few minutes, please wait patiently.</p><blockquote><p>How to send the file to the developer? You can attach your script and dump file and send it to hybbbb1996@gmail.com, the developer will check and reply as soon as possible. It is also recommended to enable memory leak checking by <code>$debug<span class="token punctuation">.</span><span class="token function">setMemoryLeakDetectionEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function before feedback to troubleshoot memory leaks in scripts to prevent oops and reduce developer&#39;s workload.</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$debug<span class="token punctuation">.</span><span class="token function">dumpHprof</span><span class="token punctuation">(</span><span class="token string">&#39;. /dump.hprof&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="debug-dumpandsendhprof-file" tabindex="-1"><a class="header-anchor" href="#debug-dumpandsendhprof-file" aria-hidden="true">#</a> $debug.dumpAndSendHprof([file])</h2><ul><li><code><span class="token property">file</span></code> {string} The path to the dump file, optional. Defaults to <code>dump<span class="token punctuation">.</span>hprof<span class="token punctuation">.</span>zip</code> in the current directory.</li></ul><p>Dump the memory of the entire script process into the file file and automatically compress it to a zip file. Uses the highest compression level, so it takes longer, but the file is smaller.</p><p>See <code>$debug<span class="token punctuation">.</span>dumpHprof</code> for more information.</p><h2 id="debug-getstacktrace-error" tabindex="-1"><a class="header-anchor" href="#debug-getstacktrace-error" aria-hidden="true">#</a> $debug.getStackTrace(error)</h2><ul><li><code><span class="token property">error</span></code> {Error} exception/error</li><li>return {string}</li></ul><p>Gets the detailed stack of an exception and returns it.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    undefined_var<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>$debug<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debug-setmemoryleakdetectionenabled-enabled" tabindex="-1"><a class="header-anchor" href="#debug-setmemoryleakdetectionenabled-enabled" aria-hidden="true">#</a> $debug.setMemoryLeakDetectionEnabled(enabled)</h2><ul><li><code><span class="token property">enabled</span></code> {boolean} Whether to enable memory leak detection</li></ul><p>When memory leak detection is enabled, objects that are not manually reclaimed, such as image objects, will be printed in the log.</p><p>The objects currently detected include.</p><ul><li>image images</li></ul><p>For example, the following code will cause a memory leak and you should see the leak log in the log some time after running.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
$debug<span class="token punctuation">.</span><span class="token function">setMemoryLeakDetectionEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This image should have been reclaimed manually by calling recycle</span>
    <span class="token keyword">let</span> leak <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// We intentionally commented out the recycle code</span>
    <span class="token comment">// leak.recycle();</span>
<span class="token punctuation">}</span>
<span class="token comment">// trigger gc</span>
$debug<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>This is turned on by default when Auto.js Pro is running; it is turned off by default in packaged software.</p></blockquote><h2 id="debug-gc" tabindex="-1"><a class="header-anchor" href="#debug-gc" aria-hidden="true">#</a> $debug.gc()</h2><p>Runs the garbage collector. Calling this method suggests that the Java virtual machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse. When control returns from the method call, the virtual machine has made its best effort to recycle all discarded objects.</p><p>The name gc stands for &quot;garbage collector&quot;. The virtual machine performs this recycling process automatically as needed, in a separate thread, even if the gc method is not invoked explicitly. The method System.gc() is the conventional and convenient means of invoking this method.</p>`,29),c=[o];function i(p,l){return n(),a("div",null,c)}const d=e(t,[["render",i],["__file","debug.html.vue"]]);export{d as default};
