import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,a as n,b as s,d as i,w as c,e,r as l}from"./app.6aa2b576.js";const u={},r=e(`<h1 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> events</h1><blockquote><p>Stability: 2-Stable</p></blockquote><p>The events module provides an interface for monitoring mobile phone notifications, buttons, and touches. You can use it to cooperate with the automatic operation function to complete the automation work.</p><p>The events itself is an <a href="#events_eventemitter">EventEmitter</a>, but there are some built-in events, including key events, notification events, Toast events, etc.</p><p>It should be noted that the event processing is single-threaded and is still executed in the original thread. If the script body or other event processing has time-consuming operations, polling, etc., the event will not be processed in time (it will enter the event queue to wait for the script The main body or other event processing is completed before execution). E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;toast&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//This code will not be executed</span>
    <span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Endless loop</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-emitter" tabindex="-1"><a class="header-anchor" href="#events-emitter" aria-hidden="true">#</a> events.emitter()</h2><p>Return a new <a href="#events_eventemitter">EventEmitter</a>. This EventEmitter does not have any built-in events.</p><h2 id="events-observekey" tabindex="-1"><a class="header-anchor" href="#events-observekey" aria-hidden="true">#</a> events.observeKey()</h2><p>Enable key monitoring, such as the volume key and the home key. Key-press monitoring is implemented using an accessibility service. If the accessibility service is not enabled, an exception will be thrown and prompted to enable it.</p><p>Only after this function is successfully executed, the monitoring of key events such as <code><span class="token property">onKeyDown</span></code> and <code><span class="token property">onKeyUp</span></code> will be effective.</p><p>This function can only be used above Android 4.3.</p><h2 id="events-onkeydown-keyname-listener" tabindex="-1"><a class="header-anchor" href="#events-onkeydown-keyname-listener" aria-hidden="true">#</a> events.onKeyDown(keyName, listener)</h2><ul><li><code><span class="token property">keyName</span></code> {string} The name of the key to be monitored</li><li><code><span class="token property">listener</span></code> {Function} Button listener. The parameter is a <a href="#events_keyevent">KeyEvent</a>.</li></ul><p>Register a button monitoring function, which will be called when the button corresponding to keyName is pressed. Refer to <a href="#events_keys">Keys</a> for available key names.</p><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Enable button monitoring</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Monitor volume up key press</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;volume_up&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Volume up button was pressed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Monitor the menu key press</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;menu&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;The menu button was pressed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-onkeyup-keyname-listener" tabindex="-1"><a class="header-anchor" href="#events-onkeyup-keyname-listener" aria-hidden="true">#</a> events.onKeyUp(keyName, listener)</h2><ul><li><code><span class="token property">keyName</span></code> {string} The name of the key to be monitored</li><li><code><span class="token property">listener</span></code> {Function} Button listener. The parameter is a <a href="#events_keyevent">KeyEvent</a>.</li></ul><p>Register a button monitoring function, which will be called when the button corresponding to keyName pops up. Refer to <a href="#events_keys">Keys</a> for available key names.</p><p>A complete key press includes key press and pop up. The press event is triggered at the &quot;instant&quot; when the finger presses a button, and the pop-up event is triggered when the finger releases the button.</p><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Enable button monitoring</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Monitor volume down button pops up</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;volume_down&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Volume up button up&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Monitor the Home button to pop up</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Home button pops up&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-oncekeydown-keyname-listener" tabindex="-1"><a class="header-anchor" href="#events-oncekeydown-keyname-listener" aria-hidden="true">#</a> events.onceKeyDown(keyName, listener)</h2><ul><li><code><span class="token property">keyName</span></code> {string} The name of the key to be monitored</li><li><code><span class="token property">listener</span></code> {Function} Button listener. The parameter is a <a href="#events_keyevent">KeyEvent</a></li></ul><p>Register a button monitor function, which will be called when the button corresponding to keyName is pressed, and then the button monitor will be unregistered.</p><p>That is, the listener is only called once after the first keypress event after the onceKeyDown is called.</p><h2 id="events-oncekeyup-keyname-listener" tabindex="-1"><a class="header-anchor" href="#events-oncekeyup-keyname-listener" aria-hidden="true">#</a> events.onceKeyUp(keyName, listener)</h2><ul><li><code><span class="token property">keyName</span></code> {string} The name of the key to be monitored</li><li><code><span class="token property">listener</span></code> {Function} Button listener. The parameter is a <a href="#events_keyevent">KeyEvent</a></li></ul><p>Register a button monitor function, which will be called when the button corresponding to keyName pops up, and then the button monitor will be unregistered.</p><p>That is, the listener is only called once after the first keypress event after the onceKeyUp is called.</p><h2 id="events-removeallkeydownlisteners-keyname" tabindex="-1"><a class="header-anchor" href="#events-removeallkeydownlisteners-keyname" aria-hidden="true">#</a> events.removeAllKeyDownListeners(keyName)</h2><ul><li><code><span class="token property">keyName</span></code> {string} key name</li></ul><p>Delete all listeners of the KeyDown (press) event of the key.</p><h2 id="events-removeallkeyuplisteners-keyname" tabindex="-1"><a class="header-anchor" href="#events-removeallkeyuplisteners-keyname" aria-hidden="true">#</a> events.removeAllKeyUpListeners(keyName)</h2><ul><li><code><span class="token property">keyName</span></code> {string} key name</li></ul><p>Delete all monitoring of the KeyUp event of the key.</p><h2 id="events-setkeyinterceptionenabled-key-enabled" tabindex="-1"><a class="header-anchor" href="#events-setkeyinterceptionenabled-key-enabled" aria-hidden="true">#</a> events.setKeyInterceptionEnabled([key, ]enabled)</h2><ul><li><code><span class="token property">enabled</span></code> {boolean}</li><li><code><span class="token property">key</span></code> {string} The key to be blocked</li></ul><p>Set whether the key shield is enabled. The so-called button shielding refers to shielding the function of the original button, for example, the volume button can no longer adjust the volume, but at this time, the button can still be monitored through the button event.</p><p>If the parameter key is not added, all keys will be blocked.</p><p>For example, calling <code>events<span class="token punctuation">.</span><span class="token function">setKeyInterceptionEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></code> will make the system&#39;s volume, home, and return keys no longer have the functions of adjusting volume, returning to the home page, and returning, but at this time, keystrokes can still be monitored through key events.</p><p>This function is usually combined with button monitoring. For example, if you want to monitor the volume key and make the volume adjustment box not pop up when the volume key is pressed, then:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">setKeyInterceptionEnabled</span><span class="token punctuation">(</span><span class="token string">&quot;volume_up&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;volume_up&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Volume up button was pressed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As long as a script blocks a certain key, the key will be blocked; when the script exits, all key blocks will be automatically unblocked.</p><h2 id="events-observetouch" tabindex="-1"><a class="header-anchor" href="#events-observetouch" aria-hidden="true">#</a> events.observeTouch()</h2><p>Enable screen touch monitoring. (Requires root privileges)</p><p>Only after this function is successfully executed, the touch event monitoring is effective.</p><p>Nothing will happen if you call this function without root privileges.</p><h2 id="events-settoucheventtimeout-timeout" tabindex="-1"><a class="header-anchor" href="#events-settoucheventtimeout-timeout" aria-hidden="true">#</a> events.setTouchEventTimeout(timeout)</h2><ul><li><code><span class="token property">timeout</span></code> {number} The minimum interval between two touch events. The unit is milliseconds. The default is 10 milliseconds. If number is less than 0, it will be treated as 0.</li></ul><p>Set the minimum time interval for the distribution of two touch events.</p><p>For example, if the interval is 10 milliseconds, after the previous touch event occurs and is processed by the registered listener, it will take at least 10 milliseconds before the next touch event can be dispatched and processed, and touches within these 10 milliseconds will be ignored.</p><p>It is recommended to increase this interval as much as possible while meeting the needs. A simple sliding action may trigger hundreds of touch events continuously. If the timeout is set too low, it may cause event congestion. It is strongly recommended not to set timeout to 0.</p><h2 id="events-gettoucheventtimeout" tabindex="-1"><a class="header-anchor" href="#events-gettoucheventtimeout" aria-hidden="true">#</a> events.getTouchEventTimeout()</h2><p>Returns the minimum time interval for touch events.</p><h2 id="events-ontouch-listener" tabindex="-1"><a class="header-anchor" href="#events-ontouch-listener" aria-hidden="true">#</a> events.onTouch(listener)</h2>`,57),d=n("code",null,[n("span",{class:"token property"},"listener")],-1),k=e(`<p>Register a touch monitor function. Equivalent to <code><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;touch&quot;</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span></code>.</p><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Enable touch monitoring</span>
events<span class="token punctuation">.</span><span class="token function">observeTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Register touch listener</span>
events<span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//When a touch event occurs, print out the coordinates of the touched point</span>
    <span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span><span class="token operator">+</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-removealltouchlisteners" tabindex="-1"><a class="header-anchor" href="#events-removealltouchlisteners" aria-hidden="true">#</a> events.removeAllTouchListeners()</h2><p>Delete all event listener functions.</p><h2 id="event-key" tabindex="-1"><a class="header-anchor" href="#event-key" aria-hidden="true">#</a> Event:&#39;key&#39;</h2><ul><li><code><span class="token property">keyCode</span></code> {number} key value</li><li><code><span class="token property">event</span></code> {KeyEvent} event</li></ul><p>This event is triggered when a button is pressed or popped up. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keyCode<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Handle key events</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The parameter KeyCode of the listener includes:</p><ul><li><code>keys<span class="token punctuation">.</span>home</code> home key</li><li><code>keys<span class="token punctuation">.</span>back</code> return key</li><li><code>keys<span class="token punctuation">.</span>menu</code> menu key</li><li><code>keys<span class="token punctuation">.</span>volume_up</code> volume up key</li><li><code>keys<span class="token punctuation">.</span>volume_down</code> volume down key</li></ul><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keyCode<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>keyCode <span class="token operator">==</span> keys<span class="token punctuation">.</span>menu <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> event<span class="token punctuation">.</span><span class="token constant">ACTION_UP</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Menu button is pressed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-key-down" tabindex="-1"><a class="header-anchor" href="#event-key-down" aria-hidden="true">#</a> Event:&#39;key_down&#39;</h2><ul><li><code><span class="token property">keyCode</span></code> {number} key value</li><li><code><span class="token property">event</span></code> {KeyEvent} event</li></ul><p>This event is triggered when a button is pressed.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;key_down&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keyCode<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Handle key press event</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-key-up" tabindex="-1"><a class="header-anchor" href="#event-key-up" aria-hidden="true">#</a> Event:&#39;key_up&#39;</h2><ul><li><code><span class="token property">keyCode</span></code> {number} key value</li><li><code><span class="token property">event</span></code> {KeyEvent} event</li></ul><p>This event will be triggered when a button pops up.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;key_up&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">keyCode<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Handle the key up event</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-exit" tabindex="-1"><a class="header-anchor" href="#event-exit" aria-hidden="true">#</a> Event:&#39;exit\`</h2><p>This event is triggered when the script exits normally or abnormally. If an exception is thrown during event processing, the processing of the exit event will be immediately suspended (even if the exit event has multiple processing functions) and the exception will be printed in the console and log.</p><p>When a script stops running, all floating windows of the script will be closed, an exit event will be triggered, and then resources will be recovered. If there is an infinite loop in the processing of the exit event, subsequent resources cannot be recovered in time. At this time, the script will stay in the task list. If it is closed in the task list, the processing of the exit event will be forcibly ended and subsequent resources will be recycled.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Start running&quot;</span><span class="token punctuation">)</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;End of operation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The operation is about to end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-observenotification" tabindex="-1"><a class="header-anchor" href="#events-observenotification" aria-hidden="true">#</a> events.observeNotification()</h2><p>Turn on notification monitoring. For example, QQ messages, WeChat messages, push notifications, etc.</p><p>Notification monitoring depends on the notification service. If the notification service is not running, it will throw an exception and jump to the notification permission opening interface. (Sometimes the notification service does not run even if the notification permission has been turned on, you need to close the permission and re-enable it at this time)</p><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">observeNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">onNotification</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">notification</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-observetoast" tabindex="-1"><a class="header-anchor" href="#events-observetoast" aria-hidden="true">#</a> events.observeToast()</h2><p>Turn on Toast monitoring.</p><p>Toast monitoring depends on the accessibility service, so this function will ensure that the accessibility service runs.</p><h2 id="event-toast" tabindex="-1"><a class="header-anchor" href="#event-toast" aria-hidden="true">#</a> Event:&#39;toast&#39;</h2><ul><li><code><span class="token property">toast</span></code> {Object}* <code><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> Get the text content of Toast <ul><li><code><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> Get the name of the application package that issued the Toast</li></ul></li></ul><p>This event is triggered when an application sends a toast (bubble message). But Auto.js software itself except toast.</p><p>For example, to record all toast applications:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">observeToast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">onToast</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">toast</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Toast content: &quot;</span><span class="token operator">+</span> toast<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">&quot; package name: &quot;</span><span class="token operator">+</span> toast<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-notification" tabindex="-1"><a class="header-anchor" href="#event-notification" aria-hidden="true">#</a> Event:&#39;notification&#39;</h2><ul><li><code><span class="token property">notification</span></code> <a href="#events_notification">Notification</a> notification object</li></ul><p>This event is triggered when an application sends out a notification, and the parameter is <a href="#events_notification">Notification</a>.</p><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">observeNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;notification&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;New notification received:\\n Title: %s, Content: %s, \\nPackage name: %s&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="notification" tabindex="-1"><a class="header-anchor" href="#notification" aria-hidden="true">#</a> Notification</h1><p>The notification object can obtain the notification details, including the notification title, content, package name, time, etc., and can also perform operations on the notification, such as clicking and deleting.</p><h2 id="notification-number" tabindex="-1"><a class="header-anchor" href="#notification-number" aria-hidden="true">#</a> Notification.number</h2><ul><li>{number}</li></ul><p>Number of notifications. For example, when QQ continuously receives two messages, the number is 2.</p><h2 id="notification-when" tabindex="-1"><a class="header-anchor" href="#notification-when" aria-hidden="true">#</a> Notification.when</h2><ul><li>{number}</li></ul><p>The timestamp of when the notification was sent can be used to construct a <code><span class="token property">Date</span></code> object. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">observeNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;notification&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Notification time is}&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>when<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="notification-getpackagename" tabindex="-1"><a class="header-anchor" href="#notification-getpackagename" aria-hidden="true">#</a> Notification.getPackageName()</h2><ul><li>Return {string}</li></ul><p>Get the name of the application package that sent the notification.</p><h2 id="notification-gettitle" tabindex="-1"><a class="header-anchor" href="#notification-gettitle" aria-hidden="true">#</a> Notification.getTitle()</h2><ul><li>Return {string}</li></ul><p>Get the title of the notification.</p><h2 id="notification-gettext" tabindex="-1"><a class="header-anchor" href="#notification-gettext" aria-hidden="true">#</a> Notification.getText()</h2><ul><li>Return {string}</li></ul><p>Get the content of the notification.</p><h2 id="notification-click" tabindex="-1"><a class="header-anchor" href="#notification-click" aria-hidden="true">#</a> Notification.click()</h2><p>Click the notification. For example, for a QQ message, click to enter the specific chat interface.</p><h2 id="notification-delete" tabindex="-1"><a class="header-anchor" href="#notification-delete" aria-hidden="true">#</a> Notification.delete()</h2><p>Delete the notification. The notification will disappear from the notification bar.</p><h1 id="keyevent" tabindex="-1"><a class="header-anchor" href="#keyevent" aria-hidden="true">#</a> KeyEvent</h1><blockquote><p>Stability: 2-Stable</p></blockquote><h2 id="keyevent-getaction" tabindex="-1"><a class="header-anchor" href="#keyevent-getaction" aria-hidden="true">#</a> KeyEvent.getAction()</h2><p>Returns the action of the event. include:</p><ul><li><code>KeyEvent<span class="token punctuation">.</span><span class="token constant">ACTION_DOWN</span></code> press event</li><li><code>KeyEvent<span class="token punctuation">.</span><span class="token constant">ACTION_UP</span></code> pop-up event</li></ul><h2 id="keyevent-getkeycode" tabindex="-1"><a class="header-anchor" href="#keyevent-getkeycode" aria-hidden="true">#</a> KeyEvent.getKeyCode()</h2><p>Returns the key value of the key. include:</p><ul><li><code>KeyEvent<span class="token punctuation">.</span><span class="token constant">KEYCODE_HOME</span></code> home key</li><li><code>KeyEvent<span class="token punctuation">.</span><span class="token constant">KEYCODE_BACK</span></code> return key</li><li><code>KeyEvent<span class="token punctuation">.</span><span class="token constant">KEYCODE_MENU</span></code> menu key</li><li><code>KeyEvent<span class="token punctuation">.</span><span class="token constant">KEYCODE_VOLUME_UP</span></code> Volume up key</li><li><code>KeyEvent<span class="token punctuation">.</span><span class="token constant">KEYCODE_VOLUME_DOWN</span></code> Volume down key</li></ul><h2 id="keyevent-geteventtime" tabindex="-1"><a class="header-anchor" href="#keyevent-geteventtime" aria-hidden="true">#</a> KeyEvent.getEventTime()</h2><ul><li>Return {number}</li></ul><p>Returns the timestamp when the event occurred.</p><h2 id="keyevent-getdowntime" tabindex="-1"><a class="header-anchor" href="#keyevent-getdowntime" aria-hidden="true">#</a> KeyEvent.getDownTime()</h2><p>Returns the timestamp of the most recent press event. If it is a press event, it is the same as <code><span class="token function">getEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><h2 id="keyevent-keycodetostring-keycode" tabindex="-1"><a class="header-anchor" href="#keyevent-keycodetostring-keycode" aria-hidden="true">#</a> KeyEvent.keyCodeToString(keyCode)</h2><p>Convert the key value to a string. For example, KEYCODE_HOME is converted to &quot;KEYCODE_HOME&quot;.</p><h1 id="keys" tabindex="-1"><a class="header-anchor" href="#keys" aria-hidden="true">#</a> keys</h1><blockquote><p>Stability: 2-Stable</p></blockquote><p>The names of all available keys in key events are:</p><ul><li><code><span class="token property">volume_up</span></code> volume up key</li><li><code><span class="token property">volume_down</span></code> volume down button</li><li><code><span class="token property">home</span></code> home screen key</li><li><code><span class="token property">back</span></code> return key</li><li><code><span class="token property">menu</span></code> menu key</li></ul><h1 id="eventemitter" tabindex="-1"><a class="header-anchor" href="#eventemitter" aria-hidden="true">#</a> EventEmitter</h1><blockquote><p>Stability: 2-Stable</p></blockquote><h2 id="eventemitter-defaultmaxlisteners" tabindex="-1"><a class="header-anchor" href="#eventemitter-defaultmaxlisteners" aria-hidden="true">#</a> EventEmitter.defaultMaxListeners</h2><p>By default, up to 10 listeners can be registered for each event. The limit of a single EventEmitter instance can be changed using the emitter.setMaxListeners(n) method. The default value of all EventEmitter instances can be changed using the EventEmitter.defaultMaxListeners property.</p><p>Setting EventEmitter.defaultMaxListeners should be cautious because it will affect all EventEmitter instances, including those created before. Therefore, calling emitter.setMaxListeners(n) takes precedence over EventEmitter.defaultMaxListeners.</p><p>Note that unlike Node.js, <strong>this is a hard limit</strong>. The EventEmitter instance does not allow adding more listeners, and a TooManyListenersException will be thrown when the number of listeners exceeds the maximum.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>emitter<span class="token punctuation">.</span><span class="token function">setMaxListeners</span><span class="token punctuation">(</span>emitter<span class="token punctuation">.</span><span class="token function">getMaxListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emitter<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
  emitter<span class="token punctuation">.</span><span class="token function">setMaxListeners</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>emitter<span class="token punctuation">.</span><span class="token function">getMaxListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-addlistener-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-addlistener-eventname-listener" aria-hidden="true">#</a> EventEmitter.addListener(eventName, listener)</h2><ul><li><code><span class="token property">eventName</span></code> {any}</li><li><code><span class="token property">listener</span></code> {Function}</li></ul><p>Alias \u200B\u200Bof emitter.on(eventName, listener).</p><h2 id="eventemitter-emit-eventname-args" tabindex="-1"><a class="header-anchor" href="#eventemitter-emit-eventname-args" aria-hidden="true">#</a> EventEmitter.emit(eventName[, ...args])</h2><ul><li><code><span class="token property">eventName</span></code> {any}</li><li><code><span class="token property">args</span></code> {any}</li></ul><p>According to the registration order of the listeners, call each listener registered to the event named eventName synchronously, and pass in the provided parameters.</p><p>If the event has a listener, it returns true, otherwise it returns false.</p><h2 id="eventemitter-eventnames" tabindex="-1"><a class="header-anchor" href="#eventemitter-eventnames" aria-hidden="true">#</a> EventEmitter.eventNames()</h2><p>Returns an array listing the events of the trigger registered listener. The values \u200B\u200Bin the array are strings or symbols.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myEE <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">emitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myEE<span class="token punctuation">.</span><span class="token function">eventNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Print: [&#39;foo&#39;,&#39;bar&#39;, Symbol(symbol)]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-getmaxlisteners" tabindex="-1"><a class="header-anchor" href="#eventemitter-getmaxlisteners" aria-hidden="true">#</a> EventEmitter.getMaxListeners()</h2><p>Returns the current maximum listener limit value of EventEmitter. This value can be set by emitter.setMaxListeners(n) or the default is EventEmitter.defaultMaxListeners.</p><h2 id="eventemitter-listenercount-eventname" tabindex="-1"><a class="header-anchor" href="#eventemitter-listenercount-eventname" aria-hidden="true">#</a> EventEmitter.listenerCount(eventName)</h2><ul><li><code><span class="token property">eventName</span></code> {string} The name of the event being monitored</li></ul><p>Returns the number of listeners that are listening to the event named eventName.</p><h2 id="eventemitter-listeners-eventname" tabindex="-1"><a class="header-anchor" href="#eventemitter-listeners-eventname" aria-hidden="true">#</a> EventEmitter.listeners(eventName)</h2><ul><li><code><span class="token property">eventName</span></code> {string}</li></ul><p>Returns a copy of the array of listeners for the event named eventName.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;someone connected!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span><span class="token function">listeners</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Print: [[Function]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-on-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-on-eventname-listener" aria-hidden="true">#</a> EventEmitter.on(eventName, listener)</h2><ul><li><code><span class="token property">eventName</span></code> {any} event name</li><li><code><span class="token property">listener</span></code> {Function} callback function</li></ul><p>Add the listener function to the end of the listener array for the event named eventName. It does not check whether the listener has been added. Calling multiple times and passing in the same eventName and listener will cause the listener to be added and called multiple times.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;There is a connection!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Returns an EventEmitter reference, which can be chained.</p><p>By default, event listeners will be called sequentially in the order they were added. The emitter.prependListener() method can be used to add event listeners to the beginning of the listener array.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myEE <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">emitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">prependListener</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// print:</span>
<span class="token comment">// b</span>
<span class="token comment">// a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-once-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-once-eventname-listener" aria-hidden="true">#</a> EventEmitter.once(eventName, listener)#</h2><ul><li><code><span class="token property">eventName</span></code> {any} event name</li><li><code><span class="token property">listener</span></code> {Function} callback function</li></ul><p>Add a one-shot listener function to the event named eventName. The next time the eventName event is triggered, the listener will be removed and then called.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;First call!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Returns an EventEmitter reference, which can be chained.</p><p>By default, event listeners will be called sequentially in the order they were added. The emitter.prependOnceListener() method can be used to add event listeners to the beginning of the listener array.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myEE <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">emitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">prependOnceListener</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// print:</span>
<span class="token comment">// b</span>
<span class="token comment">// a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-prependlistener-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-prependlistener-eventname-listener" aria-hidden="true">#</a> EventEmitter.prependListener(eventName, listener)</h2><ul><li><code><span class="token property">eventName</span></code> {any} event name</li><li><code><span class="token property">listener</span></code> {Function} callback function</li></ul><p>Add the listener function to the beginning of the listener array for the event named eventName. It does not check whether the listener has been added. Calling multiple times and passing in the same eventName and listener will cause the listener to be added and called multiple times.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">prependListener</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;There is a connection!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Returns an EventEmitter reference, which can be chained.</p><h2 id="eventemitter-prependoncelistener-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-prependoncelistener-eventname-listener" aria-hidden="true">#</a> EventEmitter.prependOnceListener(eventName, listener)</h2><ul><li><code><span class="token property">eventName</span></code> {any} event name</li><li><code><span class="token property">listener</span></code> {Function} callback function</li></ul><p>Add a one-shot listener function to the beginning of the listener array for the event named eventName. The next time the eventName event is triggered, the listener will be removed and then called.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">prependOnceListener</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;First call!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Returns an EventEmitter reference, which can be chained.</p><h2 id="eventemitter-removealllisteners-eventname" tabindex="-1"><a class="header-anchor" href="#eventemitter-removealllisteners-eventname" aria-hidden="true">#</a> EventEmitter.removeAllListeners([eventName])</h2><ul><li><code><span class="token property">eventName</span></code> {any}</li></ul><p>Remove all or the listeners of the specified eventName.</p><p>Note that it is a bad practice to remove listeners added elsewhere in the code, especially when the EventEmitter instance is created by other components or modules.</p><p>Returns an EventEmitter reference, which can be chained.</p><h2 id="eventemitter-removelistener-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-removelistener-eventname-listener" aria-hidden="true">#</a> EventEmitter.removeListener(eventName, listener)</h2><ul><li><code><span class="token property">eventName</span></code> {any}</li><li><code><span class="token property">listener</span></code> {Function}</li></ul><p>Remove the specified listener from the listener array for the event named eventName.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;There is a connection!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
server<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>removeListener will only remove at most one listener instance from the listener array. If any single listener is added to the listener array of the specified eventName multiple times, removeListener must be called multiple times to remove each instance.</p><p>Note that once an event is triggered, all listeners bound to it will be triggered in sequence. This means that any call to removeListener() or removeAllListeners() will not remove them from emit() after the event is triggered and before the last listener has finished executing. Subsequent events will happen as expected.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myEmitter <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">emitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">callbackA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  myEmitter<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">,</span> callbackB<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">callbackB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">,</span> callbackA<span class="token punctuation">)</span><span class="token punctuation">;</span>

myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">,</span> callbackB<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// callbackA removes the listener callbackB, but it will still be called.</span>
<span class="token comment">// The trigger is the internal listener array is [callbackA, callbackB]</span>
myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// print:</span>
<span class="token comment">// A</span>
<span class="token comment">// B</span>

<span class="token comment">// callbackB is removed.</span>
<span class="token comment">// The internal listener array is [callbackA]</span>
myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// print:</span>
<span class="token comment">// A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because the listener is managed using an internal array, calling it will change the position index of any listener registered after the listener is removed. Although this does not affect the call sequence of the listeners, it means that a copy of the listener array returned by the emitter.listeners() method needs to be recreated.</p><p>Returns an EventEmitter reference, which can be chained.</p><h2 id="eventemitter-setmaxlisteners-n" tabindex="-1"><a class="header-anchor" href="#eventemitter-setmaxlisteners-n" aria-hidden="true">#</a> EventEmitter.setMaxListeners(n)</h2><ul><li><code><span class="token property">n</span></code> {number}</li></ul><p>By default, if more than 10 listeners are added for a particular event, EventEmitter will print a warning. This limitation helps to find memory leaks. However, not all events are limited to 10. The emitter.setMaxListeners() method allows to modify the limits of the specified EventEmitter instance. A value of Infinity (or 0) indicates that the number of listeners is not limited.</p><p>Returns an EventEmitter reference, which can be chained.</p><h1 id="events-broadcast-broadcast-between-scripts" tabindex="-1"><a class="header-anchor" href="#events-broadcast-broadcast-between-scripts" aria-hidden="true">#</a> events.broadcast: Broadcast between scripts</h1><p>In addition to the <code>ScriptEngine<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method provided by the engines module, the communication between scripts can also use the broadcast provided by the events module.</p><p>events.broadcast itself is an EventEmitter, but its events are shared between scripts, all scripts can send and listen to these events; event processing will be executed in the main thread of the script (the function <code><span class="token function">onThisThread</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> <span class="token operator">...</span> may be added later<span class="token punctuation">)</span> args<span class="token punctuation">)</span></code> to provide the ability to execute in other threads).</p><p>For example, sending a broadcast hello in a script:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>events<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\u5C0F\u660E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Monitor and process in other scripts:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>events<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span><span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Keep the script running</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,159);function v(m,h){const a=l("RouterLink");return o(),p("div",null,[r,n("ul",null,[n("li",null,[d,s(" {Function} The function whose parameter is "),i(a,{to:"/en/v8/images.html#images_point"},{default:c(()=>[s("Point")]),_:1})])]),k])}const g=t(u,[["render",v],["__file","events.html.vue"]]);export{g as default};
