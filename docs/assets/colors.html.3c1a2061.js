import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as s,a as e,b as o,d as t,e as a,r as c}from"./app.6aa2b576.js";const i={},h=a('<h1 id="colors" tabindex="-1"><a class="header-anchor" href="#colors" aria-hidden="true">#</a> colors</h1><blockquote><p>Stability: 2-Stable</p></blockquote><p>There are two ways to represent a color in Auto.js.</p><p>One is to use a string &quot;#AARRGGBB&quot; or &quot;#RRGGBB&quot;, where AA is the value of Alpha channel (transparency), RR is the value of R channel (red), GG is the value of G channel (green), and BB is The value of the B channel (blue). For example, &quot;#ffffff&quot; means white, and &quot;#7F000000&quot; means semi-transparent black.</p><p>The other is to use a hexadecimal &quot;32-bit integer&quot; 0xAARRGGBB to represent a color. For example, <code><span class="token number">0xFF112233</span></code> represents the color &quot;#112233&quot;, and <code><span class="token number">0x11223344</span></code> represents the color &quot;#11223344&quot;.</p><p>You can use <code>colors<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to convert a color integer to a string, and use <code>colors<span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to parse a color string into a color integer.</p><h2 id="colors-tostring-color" tabindex="-1"><a class="header-anchor" href="#colors-tostring-color" aria-hidden="true">#</a> colors.toString(color)</h2><ul><li><code><span class="token property">color</span></code> {number} integer RGB color value</li><li>Return {string}</li></ul><p>Returns a string of the color value, the format is &quot;#AARRGGBB&quot;.</p><h2 id="colors-red-color" tabindex="-1"><a class="header-anchor" href="#colors-red-color" aria-hidden="true">#</a> colors.red(color)</h2><ul><li><code><span class="token property">color</span></code> {number} | {string} color value</li><li>Return {number}</li></ul><p>Returns the value of the R channel of the color color, ranging from 0 to 255.</p><h2 id="colors-green-color" tabindex="-1"><a class="header-anchor" href="#colors-green-color" aria-hidden="true">#</a> colors.green(color)</h2><ul><li><code><span class="token property">color</span></code> {number} | {string} color value</li><li>Return {number}</li></ul><p>Returns the value of the G channel of the color color, ranging from 0 to 255.</p><h2 id="colors-blue-color" tabindex="-1"><a class="header-anchor" href="#colors-blue-color" aria-hidden="true">#</a> colors.blue(color)</h2><ul><li><code><span class="token property">color</span></code> {number} | {string} color value</li><li>Return {number}</li></ul><p>Returns the value of the B channel of the color color, ranging from 0 to 255.</p><h2 id="colors-alpha-color" tabindex="-1"><a class="header-anchor" href="#colors-alpha-color" aria-hidden="true">#</a> colors.alpha(color)</h2><ul><li><code><span class="token property">color</span></code> {number} | {string} color value</li><li>Return {number}</li></ul><p>Returns the value of the Alpha channel of color, ranging from 0 to 255.</p><h2 id="colors-rgb-red-green-blue" tabindex="-1"><a class="header-anchor" href="#colors-rgb-red-green-blue" aria-hidden="true">#</a> colors.rgb(red, green, blue)</h2><ul><li>red {number} the value of the R channel of the color</li><li>blue {number} the value of the G channel of the color</li><li>green {number} the value of the B channel of the color</li><li>Return {number}</li></ul><p>Returns the integer color value formed by these color channels. The alpha channel will be 255 (opaque).</p><h2 id="colors-argb-alpha-red-green-blue" tabindex="-1"><a class="header-anchor" href="#colors-argb-alpha-red-green-blue" aria-hidden="true">#</a> colors.argb(alpha, red, green, blue)</h2><ul><li><code><span class="token property">alpha</span></code> {number} The value of the alpha channel of the color</li><li><code><span class="token property">red</span></code> {number} the value of the R channel of the color</li><li><code><span class="token property">green</span></code> {number} the value of the G channel of the color</li><li><code><span class="token property">blue</span></code> {number} the value of the B channel of the color</li><li>Return {number}</li></ul><p>Returns the integer color value formed by these color channels.</p><h2 id="colors-parsecolor-colorstr" tabindex="-1"><a class="header-anchor" href="#colors-parsecolor-colorstr" aria-hidden="true">#</a> colors.parseColor(colorStr)</h2><ul><li><code><span class="token property">colorStr</span></code> {string} A string representing the color, such as &quot;#112233&quot;</li><li>Return {number}</li></ul><p>Returns the integer value of the color.</p><h2 id="colors-issimilar-color2-color2-threshold-algorithm" tabindex="-1"><a class="header-anchor" href="#colors-issimilar-color2-color2-threshold-algorithm" aria-hidden="true">#</a> colors.isSimilar(color2, color2[, threshold, algorithm])</h2>',31),u=e("li",null,[e("code",null,[e("span",{class:"token property"},"color1")]),o(" {number} | {string} color value 1")],-1),p=e("li",null,[e("code",null,[e("span",{class:"token property"},"color1")]),o(" {number} | {string} color value 2")],-1),d=e("li",null,[e("code",null,[e("span",{class:"token property"},"threshold")]),o(" {number} The critical value of color similarity, the default is 4. The value range is 0~255. The larger the value, the smaller the degree of similarity allowed. If the value is 0, the function will return true only when the two colors are equal.")],-1),f=e("code",null,[e("span",{class:"token property"},"algorithm")],-1),g=e("li",null,'"diff": Difference matching. Matches when the sum of the absolute values \u200B\u200Bof the R, G, and B differences of a given color is less than the threshold.',-1),b=e("li",null,'"rgb": rgb Euler distance similarity. Match when the rgb Euler distance with the given color color is less than or equal to the threshold.',-1),m={href:"https://en.wikipedia.org/wiki/Color_difference",target:"_blank",rel:"noopener noreferrer"},k=e("li",null,'"hs": hs Euler distance matching. hs is the hue value in HSV space.',-1),v=e("li",null,"Return {Boolean}",-1),F=a(`<p>Returns whether the two colors are similar.</p><h2 id="colors-equals-color1-color2" tabindex="-1"><a class="header-anchor" href="#colors-equals-color1-color2" aria-hidden="true">#</a> colors.equals(color1, color2)</h2><ul><li><code><span class="token property">color1</span></code> {number} | {string} color value 1</li><li><code><span class="token property">color1</span></code> {number} | {string} color value 2</li><li>Return {Boolean}</li></ul><p>Returns whether the two colors are equal. *<em>Note that this function will ignore the value of the Alpha channel for comparison</em>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;#112233&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#112234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0xFF112233</span><span class="token punctuation">,</span> <span class="token number">0xFF223344</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="colors-black" tabindex="-1"><a class="header-anchor" href="#colors-black" aria-hidden="true">#</a> colors.BLACK</h1><p>Black, color value #FF000000</p><h1 id="colors-dkgray" tabindex="-1"><a class="header-anchor" href="#colors-dkgray" aria-hidden="true">#</a> colors.DKGRAY</h1><p>Dark gray, color value #FF444444</p><h1 id="colors-gray" tabindex="-1"><a class="header-anchor" href="#colors-gray" aria-hidden="true">#</a> colors.GRAY</h1><p>Gray, color value #FF888888</p><h1 id="colors-ltgray" tabindex="-1"><a class="header-anchor" href="#colors-ltgray" aria-hidden="true">#</a> colors.LTGRAY</h1><p>Light gray, color value #FFCCCCCC</p><h1 id="colors-white" tabindex="-1"><a class="header-anchor" href="#colors-white" aria-hidden="true">#</a> colors.WHITE</h1><p>White, color value #FFFFFFFF</p><h1 id="colors-red" tabindex="-1"><a class="header-anchor" href="#colors-red" aria-hidden="true">#</a> colors.RED</h1><p>Red, color value #FFFF0000</p><h1 id="colors-green" tabindex="-1"><a class="header-anchor" href="#colors-green" aria-hidden="true">#</a> colors.GREEN</h1><p>Green, color value #FF00FF00</p><h1 id="colors-blue" tabindex="-1"><a class="header-anchor" href="#colors-blue" aria-hidden="true">#</a> colors.BLUE</h1><p>Blue, color value #FF0000FF</p><h1 id="colors-yellow" tabindex="-1"><a class="header-anchor" href="#colors-yellow" aria-hidden="true">#</a> colors.YELLOW</h1><p>Yellow, color value #FFFFFF00</p><h1 id="colors-cyan" tabindex="-1"><a class="header-anchor" href="#colors-cyan" aria-hidden="true">#</a> colors.CYAN</h1><p>Cyan, color value #FF00FFFF</p><h1 id="colors-magenta" tabindex="-1"><a class="header-anchor" href="#colors-magenta" aria-hidden="true">#</a> colors.MAGENTA</h1><p>Magenta, color value #FFFF00FF</p><h1 id="colors-transparent" tabindex="-1"><a class="header-anchor" href="#colors-transparent" aria-hidden="true">#</a> colors.TRANSPARENT</h1><p>Transparent, color value #00000000</p>`,29);function R(y,x){const r=c("ExternalLinkIcon");return n(),s("div",null,[h,e("ul",null,[u,p,d,e("li",null,[f,o(' {string} Color matching algorithm, the default is "diff", including: '),e("ul",null,[g,b,e("li",null,[o('"rgb+": Weighted rgb Euler distance matching ('),e("a",m,[o("LAB Delta E"),t(r)]),o(").")]),k])]),v]),F])}const B=l(i,[["render",R],["__file","colors.html.vue"]]);export{B as default};
