import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.6aa2b576.js";const t={},i=e(`<h1 id="engines" tabindex="-1"><a class="header-anchor" href="#engines" aria-hidden="true">#</a> engines</h1><blockquote><p>Stability: 2 - Stable</p></blockquote><p>The engines module contains a number of functions related to the scripting environment, script running, and scripting engine, including running other scripts, closing scripts, etc.</p><p>For example, to get the directory where the script is located.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">toast</span><span class="token punctuation">(</span>engines<span class="token punctuation">.</span><span class="token function">myEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="engines-execscript-name-script-config" tabindex="-1"><a class="header-anchor" href="#engines-execscript-name-script-config" aria-hidden="true">#</a> engines.execScript(name, script[, config])</h2><ul><li>\`\`name\` {string} The name of the script to run. This name has nothing to do with the name of the file, it is just the name displayed in the task manager.</li><li><code><span class="token property">script</span></code> {string} The content of the script to be run.</li><li><code><span class="token property">config</span></code> {Object} The configuration item to run. <ul><li><code><span class="token property">delay</span></code> {number} The number of milliseconds to delay execution, default is 0</li><li><code><span class="token property">loopTimes</span></code> {number} The number of times to run the loop, default is 1. 0 is an infinite loop.</li><li><code><span class="token property">interval</span></code> {number} The time interval between runs of the loop, default is 0</li><li><code><span class="token property">path</span></code> {Array} | {string} Specifies the directory where the script will run. These paths will be used to find module files when requiring.</li></ul></li></ul><p>Runs the script script in a new scripting environment. returns a <a href="#engines_scriptexecution">ScriptExecution</a> object.</p><p>The new script environment specifies that the variables in the script are not shared with those of the original script, and that the script will be run in a new thread.</p><p>The simplest example is as follows.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>engines<span class="token punctuation">.</span><span class="token function">execScript</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;toast(&#39;hello world&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you want to run it in a loop, then.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//run the script every 3 seconds, loop 10 times</span>
engines<span class="token punctuation">.</span><span class="token function">execScript</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;toast(&#39;hello world&#39;)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loopTimes</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">3000</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Scripting with strings is very inconvenient and can be combined with the \`\`Function.toString()\` method to execute a specific function:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// Note that the variables here are not shared with the variables in the body of the script</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
engines<span class="token punctuation">.</span><span class="token function">execScript</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;helloWorld();\\n&quot;</span> <span class="token operator">+</span> helloWorld<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If variables are to be passed, then these can be wrapped into a function at</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    args <span class="token operator">=</span> args <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    engines<span class="token punctuation">.</span><span class="token function">execScript</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>name<span class="token punctuation">,</span> action<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;);\\n&quot;</span> <span class="token operator">+</span> action<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// The function to be executed, is a simple addition</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>a <span class="token operator">+</span> args<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//execute 1 + 2 in a new script environment</span>
<span class="token function">exec</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="engines-execscriptfile-path-config" tabindex="-1"><a class="header-anchor" href="#engines-execscriptfile-path-config" aria-hidden="true">#</a> engines.execScriptFile(path[, config])</h2><ul><li><code><span class="token property">path</span></code> {string} The path of the script to run.</li><li><code><span class="token property">config</span></code> {Object} The configuration item to run. <ul><li><code><span class="token property">delay</span></code> {number} The number of milliseconds to delay execution, default is 0</li><li><code><span class="token property">loopTimes</span></code> {number} The number of times to run the loop, default is 1. 0 is an infinite loop.</li><li><code><span class="token property">interval</span></code> {number} The time interval between runs of the loop, default is 0</li><li><code><span class="token property">path</span></code> {Array} | {string} Specifies the directory where the script will run. These paths will be used to find module files when requiring.</li></ul></li></ul><p>Runs the script file path in a new scripting environment. returns a <a href="#ScriptExecution">ScriptExecution</a> object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>engines<span class="token punctuation">.</span><span class="token function">execScriptFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/script/1.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="engines-execautofile-path-config" tabindex="-1"><a class="header-anchor" href="#engines-execautofile-path-config" aria-hidden="true">#</a> engines.execAutoFile(path[, config])</h2><ul><li><code><span class="token property">path</span></code> {string} The path to the recording file to run.</li><li><code><span class="token property">config</span></code> {Object} Run configuration item <ul><li><code><span class="token property">delay</span></code> {number} The number of milliseconds to delay the execution, default is 0.</li><li><code><span class="token property">loopTimes</span></code> {number} The number of loops to run, default is 1. 0 is an infinite loop.</li><li><code><span class="token property">interval</span></code> {number} The time interval between runs of the loop, default is 0</li><li><code><span class="token property">path</span></code> {Array} | {string} Specifies the directory where the script will run. These paths will be used to find module files when requiring.</li></ul></li></ul><p>Runs the recording file path in a new scripting environment. returns a <a href="#ScriptExecution">ScriptExecution</a> object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>engines<span class="token punctuation">.</span><span class="token function">execAutoFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/script/1.auto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="engines-stopall" tabindex="-1"><a class="header-anchor" href="#engines-stopall" aria-hidden="true">#</a> engines.stopAll()</h2><p>Stops all running scripts. Including the current script itself.</p><h2 id="engines-stopallandtoast" tabindex="-1"><a class="header-anchor" href="#engines-stopallandtoast" aria-hidden="true">#</a> engines.stopAllAndToast()</h2><p>Stops all running scripts and shows the number of stopped scripts. Include the current script itself.</p><h2 id="engines-myengine" tabindex="-1"><a class="header-anchor" href="#engines-myengine" aria-hidden="true">#</a> engines.myEngine()</h2><p>Returns the script engine object of the current script (<a href="#engines?id=scriptengine">ScriptEngine</a>)</p><p><strong>[new in v4.1.0]</strong> In particular, the object can be used to get his runtime parameters, including external parameters, intent, etc. via <code><span class="token property">execArgv</span></code>. For example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>engines<span class="token punctuation">.</span><span class="token function">myEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execArgv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Normal scripts usually run with empty parameters, while those started by broadcast of timed tasks can get the start intent.</p><h2 id="engines-all" tabindex="-1"><a class="header-anchor" href="#engines-all" aria-hidden="true">#</a> engines.all()</h2><ul><li>Returns {Array}</li></ul><p>Returns an array of all currently running script engines <a href="#engines_scriptengine">ScriptEngine</a>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>engines<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="scriptexecution" tabindex="-1"><a class="header-anchor" href="#scriptexecution" aria-hidden="true">#</a> ScriptExecution</h1><p>The object returned when executing a script, through which you can get the execution engine, configuration, etc., or you can stop this execution.</p><p>To stop the execution of this script, use \`\`execution.getEngine().forceStop()\`.</p><h2 id="scriptexecution-getengine" tabindex="-1"><a class="header-anchor" href="#scriptexecution-getengine" aria-hidden="true">#</a> ScriptExecution.getEngine()</h2><p>Returns the script engine object (<a href="#engines?id=scriptengine">ScriptEngine</a>) that executes the script.</p><h2 id="scriptexecution-getconfig" tabindex="-1"><a class="header-anchor" href="#scriptexecution-getconfig" aria-hidden="true">#</a> ScriptExecution.getConfig()</h2><p>Returns the script&#39;s runtime configuration (<a href="#engines?id=scriptconfig">ScriptConfig</a>)</p><h1 id="scriptengine" tabindex="-1"><a class="header-anchor" href="#scriptengine" aria-hidden="true">#</a> ScriptEngine</h1><p>Script engine object.</p><h2 id="scriptengine-forcestop" tabindex="-1"><a class="header-anchor" href="#scriptengine-forcestop" aria-hidden="true">#</a> ScriptEngine.forceStop()</h2><p>Stops the execution of the script engine.</p><h2 id="scriptengine-cwd" tabindex="-1"><a class="header-anchor" href="#scriptengine-cwd" aria-hidden="true">#</a> ScriptEngine.cwd()</h2><ul><li>Return {string}</li></ul><p>Returns the path of the script execution. For a script file, it is the folder where this script is located; for other scripts, such as string scripts, it is <code><span class="token keyword">null</span></code> or the value set at execution.</p><h2 id="scriptengine-getsource" tabindex="-1"><a class="header-anchor" href="#scriptengine-getsource" aria-hidden="true">#</a> ScriptEngine.getSource()</h2><ul><li>Returns <a href="#engines_scriptsource">ScriptSource</a></li></ul><p>Returns the script object currently being executed by the script engine.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>engines<span class="token punctuation">.</span><span class="token function">myEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="scriptengine-exit-eventname-args" tabindex="-1"><a class="header-anchor" href="#scriptengine-exit-eventname-args" aria-hidden="true">#</a> ScriptEngine.exit(eventName[, . .args])</h2><ul><li><code><span class="token property">eventName</span></code> {string} event name</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any} event parameters</li></ul><p>Sends an event to the script engine that can be listened to in the events module of the corresponding script and perform event handling in the script&#39;s main thread.</p><p>For example, the script receiver.js would read as follows.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Listen to the say event</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">words</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toastLog</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Keep the script running</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another script in the same directory can start him and send this event.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//run the script</span>
<span class="token keyword">var</span> e <span class="token operator">=</span> engines<span class="token punctuation">.</span><span class="token function">execScriptFile</span><span class="token punctuation">(</span><span class="token string">&quot;. /receiver.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//wait for the script to start</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Send events to the script</span>
e<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="scriptconfig" tabindex="-1"><a class="header-anchor" href="#scriptconfig" aria-hidden="true">#</a> ScriptConfig</h1><p>The configuration of the script during execution.</p><h2 id="delay" tabindex="-1"><a class="header-anchor" href="#delay" aria-hidden="true">#</a> delay</h2><ul><li>{number}</li></ul><p>The number of milliseconds to delay execution</p><h2 id="interval" tabindex="-1"><a class="header-anchor" href="#interval" aria-hidden="true">#</a> interval</h2><ul><li>{number}</li></ul><p>The time interval between runs of the loop</p><h2 id="looptimes" tabindex="-1"><a class="header-anchor" href="#looptimes" aria-hidden="true">#</a> loopTimes</h2><ul><li>{number}</li></ul><p>The number of times the loop will run</p><h2 id="getpath" tabindex="-1"><a class="header-anchor" href="#getpath" aria-hidden="true">#</a> getPath()</h2><ul><li>Returns {Array}</li></ul><p>Returns a string array representing the path the module looks for when the script is run.</p>`,77),p=[i];function o(c,r){return s(),a("div",null,p)}const d=n(t,[["render",o],["__file","engines.html.vue"]]);export{d as default};
