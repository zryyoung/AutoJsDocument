import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as a,e as s}from"./app.6aa2b576.js";const t="/docs/assets/project-menu.b422b5e8.jpg",o={},p=s(`<h1 id="project-and-resources" tabindex="-1"><a class="header-anchor" href="#project-and-resources" aria-hidden="true">#</a> Project and resources</h1><p>When our code becomes more and more complex, we may need to write multiple js files, and the files call each other; some js files may also need to read resource files such as pictures and music. A project is a folder used to organize multiple files. The project folder contains a project.json file that describes the configuration of the project. This configuration file allows you to package without refilling the packaging information every time.</p><p>Through the menu in the lower right corner of the file management interface of Auto.js Pro, select the project to create a new project. You can choose a different project template or a custom template when creating it, and just choose an empty project when you use it for the first time.</p><p>After creating a new project, a folder with the project name will be automatically created, under which you can see at least two files:</p><ul><li><code>main<span class="token punctuation">.</span>js</code>: The main entry file of the project, which will be executed when the project is run</li><li><code>project<span class="token punctuation">.</span>json</code>: project configuration file, configuration project name, package name, packaging configuration, etc.</li></ul><p>In the project, all the resource files and module files we use must be placed in the project folder and referenced with relative paths, so that they can be packaged into the apk and run correctly when packaging.</p><p>For example, we wrote a module file <code>sum<span class="token punctuation">.</span>js</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// sum.js</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         result <span class="token operator">+=</span> i<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then in <code>main<span class="token punctuation">.</span>js</code>, you need to use a relative path reference:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./sum.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Similarly, resource files such as images also need to use relative path references. For example, our project folder has the following files:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>main.js
sum.js
apple.png
project.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When reading apple images, you need to use relative paths, such as <code><span class="token keyword">let</span> apple <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&#39;./apple.png&#39;</span><span class="token punctuation">)</span></code>.</p><h2 id="project-management-and-packaging" tabindex="-1"><a class="header-anchor" href="#project-management-and-packaging" aria-hidden="true">#</a> Project management and packaging</h2><p>Open the folder of the project, and you can see a compass icon on the upper toolbar:</p><p><img src="`+t+'" alt="Project Management" loading="lazy"></p><p>After clicking, the pop-up menu can edit the project, package the project, publish the project, etc. The packaging of the project is basically the same as the packaging in the previous section, and will not be elaborated here; publishing the project will upload the project to the store. After the review is passed, everyone can download the project.</p>',17),c=[p];function i(r,l){return n(),a("div",null,c)}const m=e(o,[["render",i],["__file","using-project.html.vue"]]);export{m as default};
