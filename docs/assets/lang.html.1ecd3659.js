import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as l,a as n,d as e,w as t,b as s,e as o,r}from"./app.6aa2b576.js";const i={},d=o('<h1 id="lang" tabindex="-1"><a class="header-anchor" href="#lang" aria-hidden="true">#</a> lang</h1><p>lang provides language-related API, such as <code><span class="token property">delay</span></code>.</p><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h3>',4),u=n("h3",{id:"interfaces",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#interfaces","aria-hidden":"true"},"#"),s(" Interfaces")],-1),k=n("h3",{id:"functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#functions","aria-hidden":"true"},"#"),s(" Functions")],-1),h=o(`<h2 id="functions-1" tabindex="-1"><a class="header-anchor" href="#functions-1" aria-hidden="true">#</a> Functions</h2><h3 id="delay" tabindex="-1"><a class="header-anchor" href="#delay" aria-hidden="true">#</a> delay</h3><p>\u25B8 <strong>delay</strong>(<code><span class="token property">timeout</span></code>): <code><span class="token property">Promise</span></code>&lt;<code><span class="token keyword">void</span></code>&gt;</p><p>Returns a Promise, which will resolve after timeout. For example, <code><span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></code> will resolve after 1 second. This function does not block the thread/event loop.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lang&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">timeout</span></code></td><td style="text-align:left;"><code><span class="token property">number</span></code></td><td style="text-align:left;">timeout, if less than or equal to 0, then the function returns a Promise that resolves immediately.</td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">Promise</span></code>&lt;<code><span class="token keyword">void</span></code>&gt;</p><hr><h3 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> lazy</h3><p>\u25B8 <strong>lazy</strong>(<code><span class="token property">target</span></code>, <code><span class="token property">name</span></code>, <code>__namedParameters<span class="token operator">?</span></code>): <code><span class="token property">any</span></code></p><p>TypeScript decorator, which cannot be used in JavaScript.</p><p>Decorates class&#39;s getter properties, and the decorated properties will be automatically executed and saved the value on the first call, and then use the saved value on subsequent calls.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lang&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">Sum</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

   <span class="token function">constructor</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token decorator"><span class="token at operator">@</span><span class="token function">lazy</span></span>
   <span class="token keyword">get</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;calculating sum...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result <span class="token operator">+=</span> i<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> result<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// calculating sum...55</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 55</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">target</span></code></td><td style="text-align:left;"><code><span class="token property">any</span></code></td></tr><tr><td style="text-align:left;"><code><span class="token property">name</span></code></td><td style="text-align:left;"><code><span class="token property">string</span></code></td></tr><tr><td style="text-align:left;"><code><span class="token property">__namedParameters</span></code></td><td style="text-align:left;"><code><span class="token property">PropertyDescriptor</span></code></td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">any</span></code></p><hr><h3 id="lazyprop" tabindex="-1"><a class="header-anchor" href="#lazyprop" aria-hidden="true">#</a> lazyProp</h3>`,23),m=n("strong",null,"lazyProp",-1),y=n("code",null,[n("span",{class:"token constant"},"T")],-1),v=n("code",null,[n("span",{class:"token property"},"evaluator")],-1),b=n("code",null,[n("span",{class:"token property"},"ReadOnlyProperty")],-1),f=n("code",null,[n("span",{class:"token constant"},"T")],-1),g=o('<h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token constant">T</span></code></td></tr></tbody></table><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">evaluator</span></code></td><td style="text-align:left;">() =&gt; <code><span class="token constant">T</span></code></td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4>',5),x=n("code",null,[n("span",{class:"token property"},"ReadOnlyProperty")],-1),_=n("code",null,[n("span",{class:"token constant"},"T")],-1),w=o(`<hr><h3 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> promise</h3><p>\u25B8 <strong>promise</strong>&lt;<code><span class="token constant">T</span></code>&gt;(<code><span class="token property">executor</span></code>): <code><span class="token property">Promise</span></code>&lt;<code><span class="token constant">T</span></code>&gt;</p><p>Creates a Promise, which is similar to <code><span class="token keyword">new</span> <span class="token class-name">Promise</span></code>, but it will keep the engine running when the Promise is in the pending state (before resolve/reject).</p><p>Because nodejs does not know the asynchronous behavior of Java APIs, this function is usually used to create a Promise for a Java API, and keep the engine running until the Java API returns.</p><p><strong><code><span class="token property">Example</span></code></strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> promise <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lang&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> android <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;android&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">loadAudioAsync</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> SoundPool <span class="token operator">=</span> android<span class="token punctuation">.</span>media<span class="token punctuation">.</span>SoundPool<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> soundPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoundPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> SoundPool<span class="token punctuation">.</span><span class="token constant">STREAM_MUSIC</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     soundPool<span class="token punctuation">.</span><span class="token function">setOnLoadCompleteListener</span><span class="token punctuation">(</span>$autojs<span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>soundPool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     soundPool<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token constant">T</span></code></td></tr></tbody></table><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code><span class="token property">executor</span></code></td><td style="text-align:left;">(<code><span class="token property">resolve</span></code>: (<code><span class="token property">value</span></code>: <code><span class="token constant">T</span></code> | <code><span class="token property">PromiseLike</span></code>&lt;<code><span class="token constant">T</span></code>&gt;) =&gt; <code><span class="token keyword">void</span></code>, <code><span class="token property">reject</span></code>: (<code>reason<span class="token operator">?</span></code>: <code><span class="token property">any</span></code>) =&gt; <code><span class="token keyword">void</span></code>) =&gt; <code><span class="token keyword">void</span></code></td></tr></tbody></table><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code><span class="token property">Promise</span></code>&lt;<code><span class="token constant">T</span></code>&gt;</p>`,13);function P(T,j){const a=r("RouterLink");return c(),l("div",null,[n("p",null,[e(a,{to:"/en/v9/generated/"},{default:t(()=>[s("Auto.js Pro 9 Docs")]),_:1}),s(" / lang")]),d,n("ul",null,[n("li",null,[e(a,{to:"/en/v9/generated/classes/lang.Deferred.html"},{default:t(()=>[s("Deferred")]),_:1})]),n("li",null,[e(a,{to:"/en/v9/generated/classes/lang.TimeoutError.html"},{default:t(()=>[s("TimeoutError")]),_:1})])]),u,n("ul",null,[n("li",null,[e(a,{to:"/en/v9/generated/interfaces/lang.ReadOnlyProperty.html"},{default:t(()=>[s("ReadOnlyProperty")]),_:1})])]),k,n("ul",null,[n("li",null,[e(a,{to:"/en/v9/generated/modules/lang.html#delay"},{default:t(()=>[s("delay")]),_:1})]),n("li",null,[e(a,{to:"/en/v9/generated/modules/lang.html#lazy"},{default:t(()=>[s("lazy")]),_:1})]),n("li",null,[e(a,{to:"/en/v9/generated/modules/lang.html#lazyprop"},{default:t(()=>[s("lazyProp")]),_:1})]),n("li",null,[e(a,{to:"/en/v9/generated/modules/lang.html#promise"},{default:t(()=>[s("promise")]),_:1})])]),h,n("p",null,[s("\u25B8 "),m,s("<"),y,s(">("),v,s("): "),e(a,{to:"/en/v9/generated/interfaces/lang.ReadOnlyProperty.html"},{default:t(()=>[b]),_:1}),s("<"),f,s(">")]),g,n("p",null,[e(a,{to:"/en/v9/generated/interfaces/lang.ReadOnlyProperty.html"},{default:t(()=>[x]),_:1}),s("<"),_,s(">")]),w])}const S=p(i,[["render",P],["__file","lang.html.vue"]]);export{S as default};
