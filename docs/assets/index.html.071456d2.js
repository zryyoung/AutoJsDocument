import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as r,a as s,b as n,d as a,w as i,e,r as p}from"./app.6aa2b576.js";const u={},d=e(`<h1 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h1><div class="custom-container warning"><p class="custom-container-title">Note</p><p>This document is the document of the API v2 based on Node.js added in Pro 9 (the API v1 is still available). If you want to view the documentation of the old API v1, please switch in the menu bar.</p></div><blockquote><p>This document is being improved; to join the internal test, please join telegram group https://t.me/joinchat/ExZ-DlDaQmn7Mswy. It is normal for the beta version to have bugs, please give positive feedback and tolerance. It is forbidden to discuss sensitive and illegal topics in the closed beta group, otherwise it will be permanently blocked.</p></blockquote><p>Auto.js Pro 9 is a brand new version of Auto.js Pro. In addition to new functions such as editor and packaging, the most important thing is to bring <strong>Node.js-based engine and brand-new API v2</strong> (p. The API v1 is still available), accompanied by a huge npm ecosystem (close to 2 million npm packages), and still supports interaction with Android/Java (that is, Android/Java API can be used in Node.js).</p><h2 id="the-difference-between-the-api-v2-and-the-api-v1" tabindex="-1"><a class="header-anchor" href="#the-difference-between-the-api-v2-and-the-api-v1" aria-hidden="true">#</a> The difference between the API v2 and the API v1</h2><p>The advantages of Node.js (API v2) over Rhino (API v1) are:</p><ul><li>The JavaScript execution performance of the Node.js engine is more than 100 times that of Rhino</li><li>The code using the Node.js engine <strong>encryption strength is high</strong>, currently cannot be restored</li><li>Node.js supports language standards above ES2021, Rhino only supports ES5 and some ES6 features</li><li>The Node.js engine itself has very few bugs, while the module system and language implementation of the Rhino engine have many bugs</li><li>The API v2 corresponding to Node.js is better designed and more standard</li><li>You can use third-party npm packages</li><li>Node.js has a lot of network information</li></ul><p>The disadvantages of Node.js (API v2) compared to Rhino (API v1) are:</p><ul><li>The API v2 corresponding to Node.js has a high threshold for getting started, and requires a certain understanding of Promise and asynchrony, especially for novices</li><li>The documentation of the API v2 is difficult to read and is currently being improved</li><li>Rhino and the API v1 community have many source codes, materials, and examples</li><li>The API v1 is more convenient to use</li></ul><h2 id="how-to-choose-an-engine-when-you-are-new-to-auto-js-pro" tabindex="-1"><a class="header-anchor" href="#how-to-choose-an-engine-when-you-are-new-to-auto-js-pro" aria-hidden="true">#</a> How to choose an engine when you are new to Auto.js Pro</h2><p>What if you are:</p><ol><li>Novices who have no programming foundation and do not want to learn programming in depth</li><li>As long as the code can run, do not pursue maintainability and readability</li><li>I only want to use the automatic operation, the function of the picture and color part</li><li>Do not pursue the latest language standards, and can tolerate non-standard parts and bugs in the engine and API design itself</li></ol><p>Then it is recommended that you use the Rhino engine and the API v1 to get started faster. You don&#39;t need special configuration, the code is executed with this engine by default.</p><p>What if you are:</p><ol><li>Computer major or have certain development experience</li><li>It is the first time to learn programming, but I want to learn industry standards and norms, so as to lay the foundation for further study or learning Android/JavaScript/Web in the future</li><li>Have certain code literacy and pursuit</li><li>High software security and encryption requirements</li><li>Want to use npm package to meet requirements such as connecting to mysql</li><li>Pursue higher JS running performance</li><li>Love programming, or love to explore, love to learn</li></ol><p>Then it is recommended that you use the Node.js engine and the API v2, and you only need to understand the Rhino engine and the API v1.</p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>The choice of engine is not absolute, you can use the Rhino engine while using the Node.js engine, or look at another engine/API after learning for a while.</p></div><h2 id="quick-start" tabindex="-1"><a class="header-anchor" href="#quick-start" aria-hidden="true">#</a> Quick start</h2><p>This section describes how to use the Node.js engine and the API v2.</p><h3 id="run-code-with-node-js-engine" tabindex="-1"><a class="header-anchor" href="#run-code-with-node-js-engine" aria-hidden="true">#</a> Run code with Node.js engine</h3><p>For backwards compatibility, code in Pro 9 still defaults to the old Rhino engine. To use the new Node.js engine, use either of the following:</p><ol><li>Add <code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span></code> to the header of the file, for example:</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Print the version of nodejs</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Node.js version: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>The file ends with <code><span class="token punctuation">.</span>node<span class="token punctuation">.</span>js</code> or <code><span class="token punctuation">.</span>mjs</code>. The ES Module function will be enabled at the end of <code><span class="token punctuation">.</span>mjs</code>, see https://nodejs.org/api/esm.html</li></ol><h3 id="using-node-js-built-in-modules" tabindex="-1"><a class="header-anchor" href="#using-node-js-built-in-modules" aria-hidden="true">#</a> Using Node.js built-in modules</h3><p>In Node.js, you can use dozens of modules that come with it, such as:</p><ul><li><strong><code><span class="token property">fs</span></code></strong>: file system, used to read and write files (similar to the files module in Pro 8)</li><li><strong><code><span class="token property">http</span></code>, <code><span class="token property">https</span></code></strong>: http(s) request and service, used to send http(s) request or build http server</li><li><strong><code><span class="token property">worker_threads</span></code></strong>: Worker threads for executing tasks in parallel (similar to the threads module in Pro 8) *...</li></ul>`,27),h={href:"https://nodejs.org/dist/latest-v16.x/docs/api/",target:"_blank",rel:"noopener noreferrer"},k=e(`<p>Here is an example of reading a text file using the built-in fs module:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use readFile to read files, see https://nodejs.org/dist/latest-v16.x/docs/api/fs.html#fsreadfilepath-options-callback</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/sdcard/script/test.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;encoding&#39;</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read file:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;read file successfully:&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-pro-9-built-in-modules" tabindex="-1"><a class="header-anchor" href="#use-pro-9-built-in-modules" aria-hidden="true">#</a> Use Pro 9 built-in modules</h3><p>As a supplement to the built-in modules of Node.js, Pro 9 migrated some modules of Pro 8 to the API of Pro 9, such as:</p><ul><li><strong><code><span class="token property">app</span></code></strong>: Used to start other applications, obtain other application information, send broadcasts, emails, etc.</li><li><strong><code><span class="token property">ui</span></code></strong>: used to display custom interface, web interface</li><li><strong><code><span class="token property">accessibility</span></code></strong>: Used to complete automation tasks using accessibility APIs *...</li></ul>`,5),m=s("code",null,[s("span",{class:"token function"},"require"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")")],-1),g=s("code",null,[s("span",{class:"token property"},"app")],-1),v=s("code",null,[s("span",{class:"token property"},"$app")],-1),f=e('<code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span></code>',1),b=e(`<p>A list of all modules can be viewed on the right side of this document or in the upper right menu.</p><p>The API of each module may be different from Pro 8. Most APIs are designed to be asynchronous rather than synchronous blocking, and some global functions and variables are designed as functions within the module. For example, <code><span class="token property">requestScreenCapture</span></code> function is a synchronous function in Pro 8 version, which requests screenshot permission, and it will be blocked until the user operates, so it cannot be executed in the UI thread. It is an asynchronous function in Pro 9, returning a Promise, You need to use <code><span class="token keyword">await</span></code> or <code><span class="token property">then</span></code> to get the result; <code><span class="token function">setClip</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">getClip</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> are global functions in Pro 8, and belong to modules in Pro 9][clip_manager](https://g. pro.autojs.org/docs/v9/modules/clip_manager.html).</p><p>The following is an example of using the media_projection module to request screenshot permission and using the image module to find images:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Use the destructuring syntax to import some functions and variables of the module</span>
<span class="token comment">// Of course, you can also use const image = require(&quot;image&quot;) and then use image.readImage(), but it is relatively cumbersome</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>readImage<span class="token punctuation">,</span> findImage<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>requestScreenCapture<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;media_projection&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Main function, marked with async to use await to wait for the result</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// request screenshot permission</span>
     <span class="token keyword">const</span> capturer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// read the image you are looking for</span>
     <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readImage</span><span class="token punctuation">(</span><span class="token string">&quot;./template.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// Get the screenshot of the next frame</span>
     <span class="token keyword">const</span> capture <span class="token operator">=</span> <span class="token keyword">await</span> capturer<span class="token punctuation">.</span> <span class="token function">nextImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// template matching template in screenshot</span>
     <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findImage</span><span class="token punctuation">(</span>capture<span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// print the result</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;findImage: &#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// stop screenshot</span>
     capturer<span class="token punctuation">.</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// Recycle image</span>
     template<span class="token punctuation">.</span> <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execute the main function</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-npm-to-install-third-party-modules" tabindex="-1"><a class="header-anchor" href="#use-npm-to-install-third-party-modules" aria-hidden="true">#</a> Use npm to install third-party modules</h3><p>There are a large number of third-party modules on npm, most of which can be used in Pro 9. Modules need to be installed with the npm command before using them.</p><ol><li><p>The npm package requires a project to install. In the file management of Pro 9, click the menu in the lower right corner, select the project, and select the Node.js project in the template.</p></li><li><p>On the new project page, fill in the application name and package name (the package name must contain English &quot;.&quot;, such as com.example), and click OK</p></li><li><p>In the project folder, click the project icon in the toolbar, click Terminal</p></li><li><p>Enter &quot;npm i --no-bin-links module name&quot; to install the npm package. After installation, you can use the module in the project code</p></li></ol><p>Taking the uuid module for generating UUID as an example, the whole process is as follows:</p><p><img src="https://autojspro-apk-1252460104.cos.ap-guangzhou.myqcloud.com/npm-install.gif" alt="npm-install" loading="lazy"></p>`,9),y={href:"https://www.npmjs.com/package/uuid",target:"_blank",rel:"noopener noreferrer"},w=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> uuid <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;uuid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;uuid:&quot;</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span><span class="token function">v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Follow-up needs to install other modules, also in the terminal, through the <code><span class="token property">cd</span></code> command to enter the corresponding project directory.</p>`,2),j={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},q=s("code",null,[s("span",{class:"token operator"},"--"),n("no"),s("span",{class:"token operator"},"-"),n("bin"),s("span",{class:"token operator"},"-"),n("links")],-1),I=s("code",null,[n("node_modules"),s("span",{class:"token operator"},"/"),s("span",{class:"token punctuation"},"."),n("bin")],-1),_=s("code",null,[n("node node_modules"),s("span",{class:"token operator"},"/"),n("webpack"),s("span",{class:"token operator"},"/"),n("bin"),s("span",{class:"token operator"},"/"),n("webpack"),s("span",{class:"token punctuation"},"."),n("js")],-1),x=e('<h3 id="install-npm-global-modules" tabindex="-1"><a class="header-anchor" href="#install-npm-global-modules" aria-hidden="true">#</a> Install npm global modules</h3><p>The built-in npm of Pro 9 can also install global modules, such as typescript compiling ts files, webpack-cli packaging js files, etc.</p><p>Execute <code>npm i <span class="token operator">-</span>g typescript</code> in the terminal to install the typescript module, and then execute the <code><span class="token property">tsc</span></code> command in the terminal to compile the ts file.</p><blockquote><p>Attention! Do not upgrade the built-in npm version, otherwise you may encounter unexpected problems; in addition, you cannot use <code><span class="token operator">--</span>no<span class="token operator">-</span>bin<span class="token operator">-</span>links</code> parameter, otherwise the corresponding command will not be found.</p></blockquote><h3 id="call-java-android-api" tabindex="-1"><a class="header-anchor" href="#call-java-android-api" aria-hidden="true">#</a> Call Java/Android API</h3>',5),P={href:"https://pro.autojs.org/docs/v9/interfaces/globals.AutoJs.html",target:"_blank",rel:"noopener noreferrer"},A=e(`<p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// Get the $java object for interacting with Java</span>
<span class="token keyword">const</span> $java <span class="token operator">=</span> $autojs<span class="token punctuation">.</span>java<span class="token punctuation">;</span>
<span class="token comment">// load Java/Android class</span>
<span class="token keyword">const</span> StringBuilder <span class="token operator">=</span> $java<span class="token punctuation">.</span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token string">&#39;java. lang. StringBuilder&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Create an object of this class</span>
<span class="token keyword">const</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// call the method of this class</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T={href:"https://pro.autojs.org/docs/v9/interfaces/globals.Java.html",target:"_blank",rel:"noopener noreferrer"},N=e(`<p>In addition to this relatively primitive way, Pro 9 provides the <code><span class="token property">rhino</span></code> module, which is used to provide a way of interacting with Java similar to the rhino engine in Pro 8:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// After calling install, you can directly access Java classes by java.*, android.*, etc.</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;rhino&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> StringBuilder <span class="token operator">=</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringBuilder<span class="token punctuation">;</span>
<span class="token keyword">const</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">&quot;YXV0b2pz&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Functions such as importClass/importPackage are not supported yet; JavaAdapter is not supported either.</p></blockquote><p>For more information on Java/Android interaction, please wait for the subsequent separate chapters to expand.</p><h2 id="thread-and-thread-model" tabindex="-1"><a class="header-anchor" href="#thread-and-thread-model" aria-hidden="true">#</a> Thread and Thread Model</h2><h3 id="single-threaded-and-multi-threaded" tabindex="-1"><a class="header-anchor" href="#single-threaded-and-multi-threaded" aria-hidden="true">#</a> Single-threaded and multi-threaded</h3><p>Node.js usage follows a single-threaded model with an event loop, and it&#39;s the same in Pro 9, so you can&#39;t use the threads module to start new threads like in Pro 8.</p><p>In most cases, you do not need to use threads. Some time-consuming operations, such as findImage and click, are encapsulated as asynchronous operations and can be executed in parallel. When calling some Java APIs, if these APIs are asynchronous operations, you can also specify Java functions to execute threads, such as:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;rhino&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> BitmapFactory <span class="token operator">=</span> android<span class="token punctuation">.</span> graphics<span class="token punctuation">.</span> BitmapFactory<span class="token punctuation">;</span>
<span class="token comment">// test.png file in the current directory</span>
<span class="token keyword">const</span> file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./test.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// Call BitmapFactory.decodeFile(file) to decode the image file into Bitmap</span>
     <span class="token comment">// This is a time-consuming operation, we specify to execute it on the io thread</span>
     <span class="token keyword">const</span> bitmap <span class="token operator">=</span> <span class="token keyword">await</span> BitmapFactory<span class="token punctuation">.</span>decodeFile<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;io&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
     bitmap<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If none of the above can meet your needs, and you need pure JavaScript computing logic to run in a separate thread, then you need to use the <code><span class="token property">worker_threads</span></code> module of Node.js, see [Node.js documentation](https://nodejs.org/dist /latest-v16.x/docs/api/worker_threads.html) and related information on the Internet. Unlike the threads sub-thread in Pro 8, worker_thread can share all public and global variables with the main thread, and requires additional communication, so it will not be expanded here.</p>`,10),S=e(`<h3 id="ui-thread" tabindex="-1"><a class="header-anchor" href="#ui-thread" aria-hidden="true">#</a> UI thread</h3><p>By default, the Node.js engine runs on a non-UI thread, but it cannot operate interface-related content; therefore Pro 9 provides the option of the UI thread, by using the string &quot;ui-thread&quot; or &quot;ui&quot; in the file header to ID, for example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs ui&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>isUiThread<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;ui&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isUiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There is a difference between &quot;ui&quot; and &quot;ui-thread&quot;:</p><ul><li><strong><code><span class="token property">ui</span></code></strong>: Used to display the interface (Activity), such as displaying a Web page for user operations after startup, see the documentation of the UI module.</li><li><strong><code>ui<span class="token operator">-</span>thread</code></strong>: Do not display a new page at startup, but the code runs on the UI thread, which is generally used to display and control the floating window in the code without interface, see the documentation of the floating window module.</li></ul><p>In addition, if you occasionally need to operate UI elements in a non-UI thread, such as displaying and controlling dialog boxes, you can use the aforementioned method of switching threads when calling Java APIs. For example <code>view<span class="token punctuation">.</span>setText<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;ui&quot;</span><span class="token punctuation">)</span></code>.</p><h2 id="guidelines-for-reading-module-documentation" tabindex="-1"><a class="header-anchor" href="#guidelines-for-reading-module-documentation" aria-hidden="true">#</a> Guidelines for reading module documentation</h2><p>The documentation of the module is generated by code, and reading the documentation requires some skills, otherwise the documentation may be difficult to understand.</p>`,8),U={href:"https://pro.autojs.org/docs/v9/modules/app.html",target:"_blank",rel:"noopener noreferrer"},J=e(`<ul><li><strong><code><span class="token property">Interface</span></code></strong>: Interface, the first time you read the document, skip this part directly.</li><li><strong><code><span class="token property">Variables</span></code></strong>: Variables of this module. We see <code><span class="token property">packageName</span></code> in this list, which means that the app module has a variable called <code><span class="token property">packageName</span></code>. It can be used in the following ways:</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Click on the document of the variable, and you can see that there is a <code><span class="token property">constant</span></code> mark in front of it, indicating that this is a constant and its value cannot be modified, that is, <code>app<span class="token punctuation">.</span>packageName <span class="token operator">=</span> <span class="token string">&quot;xxx&quot;</span></code> will report an error; the type is string, a string. Combined with the variable name, we can know that this is the package name of the current app. Of course, there will be Chinese comments for variables later, but they haven\u2019t been written yet, so we have to guess through the variable names.</p><ul><li><strong><code><span class="token property">Function</span></code></strong>: The function of this module. We see many functions in this list, such as <code><span class="token property">editFile</span></code>, <code><span class="token property">startActivity</span></code>. These are the functions of the app module, take <code><span class="token property">startActivity</span></code> as an example, click on its document to see:</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">startActivity</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> IntentOptionsWithRoot<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It has a parameter target, similar to string or IntentOptionsWithRoot. We all know that string is a string, which is similar to the usage of <code>app<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token string">&quot;console&quot;</span><span class="token punctuation">)</span></code> in Pro 8. What about IntentOptionsWithRoot?</p>`,6),R={href:"https://pro.autojs.org/docs/v9/interfaces/app.IntentOptionsWithRoot.html",target:"_blank",rel:"noopener noreferrer"},F=s("code",null,[s("span",{class:"token property"},"root")],-1),W={href:"https://pro.autojs.org/docs/v9/interfaces/app.IntentOptions.html",target:"_blank",rel:"noopener noreferrer"},C=e(`<p>Taken together, we can know that IntentOptionsWithRoot requires us to pass in an object, which can have optional attributes such as root and action, so we can write like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     <span class="token string-property property">&quot;root&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
     <span class="token string-property property">&quot;action&quot;</span><span class="token operator">:</span> <span class="token string">&quot;android.intent.action.VIEW&quot;</span><span class="token punctuation">,</span>
     <span class="token string-property property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://pro.autojs.org&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="route-planning" tabindex="-1"><a class="header-anchor" href="#route-planning" aria-hidden="true">#</a> Route Planning</h2><p>For the route planning of the V9 version, please refer to https://github.com/hyb1996/Auto.js/issues/526.</p>`,4);function B(O,E){const t=p("ExternalLinkIcon"),o=p("font");return l(),r("div",null,[d,s("p",null,[n("See "),s("a",h,[n("Node.js 16.x documentation"),a(t)]),n(" for all Node.js built-in modules and their documentation.")]),k,s("blockquote",null,[a(o,{color:"red",style:{"font-weight":"bold"}},{default:i(()=>[n("Important: ")]),_:1}),n(" In Pro 9, all modules need to use "),m,n(" to import before they can be used, unlike Pro 8 Just use global variables directly. For example, you cannot directly use "),g,n(" or "),v,n(" variable, but you need to use "),f,n(" to import modules.")]),b,s("p",null,[n("You can refer to "),s("a",y,[n("documentation of uuid module"),a(t)]),n(" to use this module in main.js:")]),w,s("p",null,[n("To search for modules, please search in "),s("a",j,[n("npm official website"),a(t)]),n(".")]),s("blockquote",null,[s("p",null,[n("The reason to use the "),q,n(" option is because many npm modules will link some executable scripts to the "),I,n(" directory during installation, but the Android internal storage partition (sdcard) file The system does not support symbolic links, so we need to use this option to disable it. But at the same time, we often use these executable files in npm scripts, such as running the webpack command after installing webpack, and running the react-scripts command after installing react. At this time, only js files with specific paths can be executed instead, such as Use "),_,n(` instead. Another solution is to migrate the default script folder to the app's private directory. The file system here supports conforming links. You can modify the default script folder to "~" in the settings, but it should be noted that the private directory will be uninstalled when the APP is uninstalled. Therefore, `),a(o,{color:"red"},{default:i(()=>[n(" If you modify the script directory to a private directory, the script content will be lost after uninstalling Auto.js Pro! ")]),_:1})])]),x,s("p",null,[n("Pro 9 provides a global object "),s("a",P,[n("$autojs"),a(t)]),n(", providing some special APIs, such as calling Java APIs.")]),A,s("p",null,[n("In addition to findClass, $java provides APIs such as switching threads when calling Java methods, see "),s("a",T,[n("$java object documentation"),a(t)]),n(".")]),N,s("blockquote",null,[s("p",null,[s("strong",null,[a(o,{color:"red"},{default:i(()=>[n("Note:")]),_:1})]),n(" At present, sub-threads in worker_threads cannot access autojs-related APIs and modules, such as $autojs, and can only access Node.js built-in modules and objects .")])]),S,s("p",null,[n("Taking the app module as an example, after opening the "),s("a",U,[n("app module documentation"),a(t)]),n(", you will see a list:")]),J,s("p",null,[n("Click "),s("a",R,[n("IntentOptionsWithRoot"),a(t)]),n(" to see the documentation for IntentOptionsWithRoot. First look at the Properties column, which describes the properties of the interface. There is a boolean attribute "),F,n(", preceded by an Optional tag, indicating that it is an optional attribute; then look at the previous inheritance relationship, indicating that IntentOptionsWithRoot inherits from IntentOptions, jump to "),s("a",W,[n(" IntentOptions"),a(t)]),n(", you can see that it has many attributes, such as action of type string. In fact, you don\u2019t need to jump to the past, check Inherited in the upper right corner, you can see all inherited attributes.")]),C])}const D=c(u,[["render",B],["__file","index.html.vue"]]);export{D as default};
