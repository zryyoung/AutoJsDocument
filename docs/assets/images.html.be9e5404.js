import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as p,a as n,b as a,d as t,e as s,r as c}from"./app.6aa2b576.js";const l={},r=s(`<h1 id="images" tabindex="-1"><a class="header-anchor" href="#images" aria-hidden="true">#</a> images</h1><blockquote><p>Stability: 2-Stable</p></blockquote><p>The images module provides some common picture processing functions in mobile devices, including screenshots, reading and writing pictures, picture cropping, rotation, binarization, color finding and picture finding, etc.</p><p>This module is divided into two parts, the part of finding pictures and color and the part of picture processing.</p><p>It should be noted that after the image object is created, try to recover when it is not in use, and at the same time avoid creating a large number of images in a loop. Because a picture is a resource that takes up a lot of memory, although Auto.js uses various methods (such as picture caching mechanism, reclaiming pictures during garbage collection, and reclaiming all pictures at the end of the script) to minimize the leakage of picture resources and memory usage, but Bad code can still take up a lot of memory.</p><p>The Image object is recycled by calling the <code><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// read picture</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;./1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Operate the picture</span>
<span class="token operator">...</span>
<span class="token comment">// Recycle pictures</span>
img<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The exception is that the picture returned by <code><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> does not need to be recycled.</p><h2 id="picture-processing" tabindex="-1"><a class="header-anchor" href="#picture-processing" aria-hidden="true">#</a> Picture processing</h2><h2 id="images-read-path" tabindex="-1"><a class="header-anchor" href="#images-read-path" aria-hidden="true">#</a> images.read(path)</h2><ul><li><code><span class="token property">path</span></code> {string} Image path</li></ul><p>Read the image file in path path and return an Image object. If the file does not exist or the file cannot be decoded, null is returned.</p><h2 id="images-load-url" tabindex="-1"><a class="header-anchor" href="#images-load-url" aria-hidden="true">#</a> images.load(url)</h2><ul><li><code><span class="token property">url</span></code> {string} Image URL address</li></ul><p>Load the web image at the URL address and return an Image object. If the address does not exist or the picture cannot be decoded, null is returned.</p><h2 id="images-copy-img" tabindex="-1"><a class="header-anchor" href="#images-copy-img" aria-hidden="true">#</a> images.copy(img)</h2><ul><li><code><span class="token property">img</span></code> {Image} image</li><li>Back to {Image}</li></ul><p>Copy a picture and return to a new copy. This function will completely copy the data of the img object.</p><h2 id="images-save-image-path-format-png-quality-100" tabindex="-1"><a class="header-anchor" href="#images-save-image-path-format-png-quality-100" aria-hidden="true">#</a> images.save(image, path[, format = &quot;png&quot;, quality = 100])</h2><ul><li><code><span class="token property">image</span></code> {Image} image</li><li><code><span class="token property">path</span></code> {string} path</li><li><code><span class="token property">format</span></code> {string} Picture format, optional values \u200B\u200Bare: <ul><li><code><span class="token property">png</span></code></li><li><code><span class="token property">jpeg</span></code>/<code><span class="token property">jpg</span></code></li><li><code><span class="token property">webp</span></code></li></ul></li><li><code><span class="token property">quality</span></code> {number} Image quality, an integer value from 0 to 100</li></ul><p>Save the image image to the path in PNG format. If the file does not exist, it will be created; if the file exists, it will be overwritten.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Compress the picture to half the original quality and save</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
images<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/1.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jpg&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">viewFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-frombase64-base64" tabindex="-1"><a class="header-anchor" href="#images-frombase64-base64" aria-hidden="true">#</a> images.fromBase64(base64)</h2><ul><li><code><span class="token property">base64</span></code> {string} Base64 data of the picture</li><li>Back to {Image}</li></ul><p>Decode Base64 data and return the decoded Image object. If base64 cannot be decoded, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="images-tobase64-img-format-png-quality-100" tabindex="-1"><a class="header-anchor" href="#images-tobase64-img-format-png-quality-100" aria-hidden="true">#</a> images.toBase64(img[, format = &quot;png&quot;, quality = 100])</h2><ul><li><code><span class="token property">image</span></code> {image} picture</li><li><code><span class="token property">format</span></code> {string} Picture format, optional values \u200B\u200Bare: <ul><li><code><span class="token property">png</span></code></li><li><code><span class="token property">jpeg</span></code>/<code><span class="token property">jpg</span></code></li><li><code><span class="token property">webp</span></code></li></ul></li><li><code><span class="token property">quality</span></code> {number} Image quality, an integer value from 0 to 100</li><li>Return {string}</li></ul><p>Encode the picture as base64 data and return it.</p><h2 id="images-frombytes-bytes" tabindex="-1"><a class="header-anchor" href="#images-frombytes-bytes" aria-hidden="true">#</a> images.fromBytes(bytes)</h2><ul><li><code><span class="token property">bytes</span></code> {byte[]} byte array</li></ul><p>Decode the byte array bytes and return the decoded image Image object. If bytes cannot be decoded, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="images-tobytes-img-format-png-quality-100" tabindex="-1"><a class="header-anchor" href="#images-tobytes-img-format-png-quality-100" aria-hidden="true">#</a> images.toBytes(img[, format = &quot;png&quot;, quality = 100])</h2><ul><li><code><span class="token property">image</span></code> {image} picture</li><li><code><span class="token property">format</span></code> {string} Picture format, optional values \u200B\u200Bare: <ul><li><code><span class="token property">png</span></code></li><li><code><span class="token property">jpeg</span></code>/<code><span class="token property">jpg</span></code></li><li><code><span class="token property">webp</span></code></li></ul></li><li><code><span class="token property">quality</span></code> {number} Image quality, an integer value from 0 to 100</li><li>Return {byte[]}</li></ul><p>Encode the picture into a byte array and return.</p><h2 id="images-clip-img-x-y-w-h" tabindex="-1"><a class="header-anchor" href="#images-clip-img-x-y-w-h" aria-hidden="true">#</a> images.clip(img, x, y, w, h)</h2><ul><li><code><span class="token property">img</span></code> {Image} image</li><li><code><span class="token property">x</span></code> {number} The abscissa of the upper left corner of the clipping area</li><li><code><span class="token property">y</span></code> {number} The ordinate of the upper left corner of the clipping area</li><li><code><span class="token property">w</span></code> {number} the width of the clipping area</li><li><code><span class="token property">h</span></code> {number} The height of the clipping area</li><li>Back to {Image}</li></ul><p>Cut an area of \u200B\u200Bsize w * h from the position (x, y) of the picture img, and return a new picture of the cut area.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> src <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> clip <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">clip</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
images<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>clip<span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/clip.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-resize-img-size-interpolation" tabindex="-1"><a class="header-anchor" href="#images-resize-img-size-interpolation" aria-hidden="true">#</a> images.resize(img, size[, interpolation])</h2><p><strong>[v4.1.0 New]</strong></p>`,40),u=n("li",null,[n("p",null,[n("code",null,[n("span",{class:"token property"},"img")]),a(" {Image} image")])],-1),d=n("li",null,[n("p",null,[n("code",null,[n("span",{class:"token property"},"size")]),a(" {Array} Two-element array [w, h], respectively representing the width and height; if there is only one element, the width and height are equal")])],-1),h=n("p",null,[n("code",null,[n("span",{class:"token property"},"interpolation")]),a(' {string} Interpolation method, optional, the default is "LINEAR" (linear interpolation), the optional values \u200B\u200Bare:')],-1),m=s('<li><code><span class="token constant">NEAREST</span></code> nearest neighbor interpolation</li><li><code><span class="token constant">LINEAR</span></code> linear interpolation (default)</li><li><code><span class="token constant">AREA</span></code> area interpolation</li><li><code><span class="token constant">CUBIC</span></code> cubic spline interpolation</li>',4),g=n("code",null,[n("span",{class:"token constant"},"LANCZOS4")],-1),k={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga5bb5a1fea74ea38e1a5445ca803ff121",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,[n("p",null,"Back to {Image}")],-1),b=s('<p>Resize the picture and return to the adjusted picture. For example, to scale the image to 200*300: <code>images<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>.</p>',1),v={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga47a974309e9102f5f08231edc7e7529d",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"images-scale-img-fx-fy-interpolation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-scale-img-fx-fy-interpolation","aria-hidden":"true"},"#"),a(" images.scale(img, fx, fy[, interpolation])")],-1),w=n("p",null,[n("strong",null,"[v4.1.0 New]")],-1),x=n("li",null,[n("p",null,[n("code",null,[n("span",{class:"token property"},"img")]),a(" {Image} image")])],-1),_=n("li",null,[n("p",null,[n("code",null,[n("span",{class:"token property"},"fx")]),a(" {number} Width zoom multiple")])],-1),q=n("li",null,[n("p",null,[n("code",null,[n("span",{class:"token property"},"fy")]),a(" {number} height zoom multiple")])],-1),I=n("p",null,[n("code",null,[n("span",{class:"token property"},"interpolation")]),a(' {string} Interpolation method, optional, the default is "LINEAR" (linear interpolation), the optional values \u200B\u200Bare:')],-1),T=s('<li><code><span class="token constant">NEAREST</span></code> nearest neighbor interpolation</li><li><code><span class="token constant">LINEAR</span></code> linear interpolation (default)</li><li><code><span class="token constant">AREA</span></code> area interpolation</li><li><code><span class="token constant">CUBIC</span></code> cubic spline interpolation</li>',4),j=n("code",null,[n("span",{class:"token constant"},"LANCZOS4")],-1),C={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga5bb5a1fea74ea38e1a5445ca803ff121",target:"_blank",rel:"noopener noreferrer"},R=n("li",null,[n("p",null,"Back to {Image}")],-1),B=s('<p>Zoom the picture, and return to the zoomed picture. For example, the picture becomes half of the original: <code>images<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span></code>.</p>',1),A={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga47a974309e9102f5f08231edc7e7529d",target:"_blank",rel:"noopener noreferrer"},S=s('<h2 id="images-rotate-img-degree-x-y" tabindex="-1"><a class="header-anchor" href="#images-rotate-img-degree-x-y" aria-hidden="true">#</a> images.rotate(img, degree[, x, y])</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} image</li><li><code><span class="token property">degree</span></code> {number} Rotation angle.</li><li><code><span class="token property">x</span></code> {number} The x coordinate of the rotation center, the default is the midpoint of the picture</li><li><code><span class="token property">y</span></code> {number} The y coordinate of the rotation center, the default is the midpoint of the picture</li><li>Back to {Image}</li></ul><p>Rotate the picture counterclockwise by degree, and return the rotated picture object.</p><p>For example, rotate 90 degrees counterclockwise as <code>images<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span></code>.</p><h2 id="images-concat-img1-image2-direction" tabindex="-1"><a class="header-anchor" href="#images-concat-img1-image2-direction" aria-hidden="true">#</a> images.concat(img1, image2[, direction])</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img1</span></code> {Image} Picture 1</li><li><code><span class="token property">img2</span></code> {Image} Picture 2</li><li>direction {string} Connection direction, the default is &quot;RIGHT&quot;, the optional values \u200B\u200Bare: <ul><li><code><span class="token constant">LEFT</span></code> connect picture 2 to the left of picture 1</li><li><code><span class="token constant">RIGHT</span></code> connect picture 2 to the right of picture 1</li><li><code><span class="token constant">TOP</span></code> connect picture 2 to picture 1</li><li><code><span class="token constant">BOTTOM</span></code> connect picture 2 to the bottom of picture 1</li></ul></li><li>Back to {Image}</li></ul><p>Connect two pictures and return the connected image. If the sizes of the two pictures are not the same, the smaller one will be centered appropriately.</p><h2 id="images-grayscale-img" tabindex="-1"><a class="header-anchor" href="#images-grayscale-img" aria-hidden="true">#</a> images.grayscale(img)</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} image</li><li>Back to {Image}</li></ul><p>Grayscale the picture, and return to the grayscaled picture.</p><h2 id="image-threshold-img-threshold-maxval-type" tabindex="-1"><a class="header-anchor" href="#image-threshold-img-threshold-maxval-type" aria-hidden="true">#</a> image.threshold(img, threshold, maxVal[, type])</h2><p><strong>[v4.1.0 New]</strong></p>',15),E=n("li",null,[n("p",null,[n("code",null,[n("span",{class:"token property"},"img")]),a(" {Image} image")])],-1),N=n("li",null,[n("p",null,[n("code",null,[n("span",{class:"token property"},"threshold")]),a(" {number} threshold")])],-1),z=n("li",null,[n("p",null,[n("code",null,[n("span",{class:"token property"},"maxVal")]),a(" {number} maximum value")])],-1),F=n("code",null,[n("span",{class:"token property"},"type")],-1),O={href:"https://docs.opencv.org/3.4.4/d7/d1b/group__imgproc__misc.html#gaa9e58d2860d4afa658ef70a9b1115576",target:"_blank",rel:"noopener noreferrer"},G=s('<ul><li><code><span class="token constant">BINARY</span></code></li><li><code><span class="token constant">BINARY_INV</span></code></li><li><code><span class="token constant">TRUNC</span></code></li><li><code><span class="token constant">TOZERO</span></code></li><li><code><span class="token constant">TOZERO_INV</span></code></li><li><code><span class="token constant">OTSU</span></code></li><li><code><span class="token constant">TRIANGLE</span></code></li></ul>',1),M=n("li",null,[n("p",null,"Back to {Image}")],-1),L=s('<p>Threshold the image and return the processed image. You can use this function for image binarization. For example: <code>images<span class="token punctuation">.</span><span class="token function">threshold</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token string">&quot;BINARY&quot;</span><span class="token punctuation">)</span></code>, this code changes all values \u200B\u200Bgreater than 100 in the image to 255, and the rest to 0, so as to achieve the effect of binarization. If the img is a grayscale image, this code will get a black and white image.</p>',1),P={href:"https://blog.csdn.net/u012566751/article/details/77046445",target:"_blank",rel:"noopener noreferrer"},V=s('<h2 id="images-adaptivethreshold-img-maxvalue-adaptivemethod-thresholdtype-blocksize-c" tabindex="-1"><a class="header-anchor" href="#images-adaptivethreshold-img-maxvalue-adaptivemethod-thresholdtype-blocksize-c" aria-hidden="true">#</a> images.adaptiveThreshold(img, maxValue, adaptiveMethod, thresholdType, blockSize, C)</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} image</li><li><code><span class="token property">maxValue</span></code> {number} maximum value</li><li><code><span class="token property">adaptiveMethod</span></code> {string} The algorithm used to calculate the threshold in a neighborhood. The optional values \u200B\u200Bare: <ul><li><code><span class="token constant">MEAN_C</span></code> calculates the average value of the field and subtracts the value of parameter C</li><li><code><span class="token constant">GAUSSIAN_C</span></code> calculates the Gaussian mean of the field and subtracts the value of parameter C</li></ul></li><li><code><span class="token property">thresholdType</span></code> {string} Thresholding type, optional values \u200B\u200Bare: <ul><li><code><span class="token constant">BINARY</span></code></li><li><code><span class="token constant">BINARY_INV</span></code></li></ul></li><li><code><span class="token property">blockSize</span></code> {number} neighborhood block size</li><li><code><span class="token constant">C</span></code> {number} Offset adjustment amount</li><li>Back to {Image}</li></ul><p>Perform adaptive thresholding on the picture and return the processed image.</p>',4),Y={href:"https://blog.csdn.net/guduruyu/article/details/68059450",target:"_blank",rel:"noopener noreferrer"},D=n("h2",{id:"images-cvtcolor-img-code-dstcn",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-cvtcolor-img-code-dstcn","aria-hidden":"true"},"#"),a(" images.cvtColor(img, code[, dstCn])")],-1),U=n("p",null,[n("strong",null,"[v4.1.0 New]")],-1),W=n("li",null,[n("code",null,[n("span",{class:"token property"},"img")]),a(" {Image} image")],-1),H=n("code",null,[n("span",{class:"token property"},"code")],-1),Z={href:"https://docs.opencv.org/3.4.4/d8/d01/group__imgproc__color__conversions.html#ga4e0972be5de079fed4e3a10e24ef5ef0",target:"_blank",rel:"noopener noreferrer"},Q=n("ul",null,[n("li",null,[n("code",null,[n("span",{class:"token constant"},"BGR2GRAY")]),a(" BGR converted to grayscale")]),n("li",null,[n("code",null,[n("span",{class:"token constant"},"BGR2HSV")]),a(" Convert BGR to HSV")]),n("li",null,"``")],-1),J=n("li",null,[n("code",null,[n("span",{class:"token property"},"dstCn")]),a(" {number} The number of color channels of the target image, if not filled in, it will be automatically determined according to other parameters.")],-1),X=n("li",null,"Back to {Image}",-1),K=n("p",null,"Perform color space conversion on the image and return the converted image.",-1),$={href:"https://blog.csdn.net/u011574296/article/details/70896811?locationNum=14&fps=1",target:"_blank",rel:"noopener noreferrer"},nn=s('<h2 id="images-inrange-img-lowerbound-upperbound" tabindex="-1"><a class="header-anchor" href="#images-inrange-img-lowerbound-upperbound" aria-hidden="true">#</a> images.inRange(img, lowerBound, upperBound)</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} image</li><li><code><span class="token property">lowerBound</span></code> {string} | {number} Color lower bound</li><li><code><span class="token property">upperBound</span></code> {string} | {number} Color lower bound</li><li>Back to {Image}</li></ul><p>Binarize the picture, the colors outside the lowerBound~upperBound range all become 0, and the colors within the range become 255.</p><p>For example, <code>images<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#000000&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#222222&quot;</span><span class="token punctuation">)</span></code>.</p><h2 id="images-interval-img-color-interval" tabindex="-1"><a class="header-anchor" href="#images-interval-img-color-interval" aria-hidden="true">#</a> images.interval(img, color, interval)</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} image</li><li><code><span class="token property">color</span></code> {string} | {number} color value</li><li><code><span class="token property">interval</span></code> {number} The range interval of each channel</li><li>Back to {Image}</li></ul><p>Binarize the picture, all colors outside the range of color-interval ~ color+interval become 0, and all colors within the range become 255. The addition and subtraction of color here is for each channel.</p><p>For example, <code>images<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#888888&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span></code>, the color value of each channel is 0x88, and the range after adding and subtracting 16 is [0x78, 0x98], so this code will change #787878~#989898 The color of is changed to #FFFFFF, and the color outside this range is changed to #000000.</p><h2 id="images-blur-img-size-anchor-type" tabindex="-1"><a class="header-anchor" href="#images-blur-img-size-anchor-type" aria-hidden="true">#</a> images.blur(img, size[, anchor, type])</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} image</li><li><code><span class="token property">size</span></code> {Array} defines the size of the filter, such as [3, 3]</li><li><code><span class="token property">anchor</span></code> {Array} Specify the anchor point position (the smoothed point), the default is the image center</li><li><code><span class="token property">type</span></code> {string} Infer the edge pixel type, the default is &quot;DEFAULT&quot;, the optional values \u200B\u200Bare: <ul><li><code><span class="token constant">CONSTANT</span></code> iiiiii|abcdefgh|iiiiiii with some specified i</li><li><code><span class="token constant">REPLICATE</span></code> aaaaaa|abcdefgh|hhhhhhh</li><li><code><span class="token constant">REFLECT</span></code> fedcba|abcdefgh|hgfedcb</li><li><code><span class="token constant">WRAP</span></code> cdefgh|abcdefgh|abcdefg</li><li><code><span class="token constant">REFLECT_101</span></code> gfedcb|abcdefgh|gfedcba</li><li><code><span class="token constant">TRANSPARENT</span></code> uvwxyz|abcdefgh|ijklmno</li><li><code><span class="token constant">REFLECT101</span></code> same as BORDER_REFLECT_101</li><li><code><span class="token constant">DEFAULT</span></code> same as BORDER_REFLECT_101</li><li><code><span class="token constant">ISOLATED</span></code> do not look outside of ROI</li></ul></li><li>Back to {Image}</li></ul><p>Blur (smooth) the image and return to the processed image.</p>',14),an={href:"https://www.cnblogs.com/denny402/p/3848316.html",target:"_blank",rel:"noopener noreferrer"},sn=s(`<h2 id="images-medianblur-img-size" tabindex="-1"><a class="header-anchor" href="#images-medianblur-img-size" aria-hidden="true">#</a> images.medianBlur(img, size)</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} image</li><li><code><span class="token property">size</span></code> {Array} defines the size of the filter, such as [3, 3]</li><li>Back to {Image}</li></ul><p>Perform median filtering on the image and return the processed image.</p><p>You can refer to related blogs (such as [Implementing Image Smoothing] (https://www.cnblogs.com/denny402/p/3848316.html)) or OpenCV document [blur](https://docs.opencv.org/3.4 .4/d4/d86/group__imgproc__filter.html#ga564869aa33e58769b4469101aac458f9).</p><h2 id="images-gaussianblur-img-size-sigmax-sigmay-type" tabindex="-1"><a class="header-anchor" href="#images-gaussianblur-img-size-sigmax-sigmay-type" aria-hidden="true">#</a> images.gaussianBlur(img, size[, sigmaX, sigmaY, type])</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} image</li><li><code><span class="token property">size</span></code> {Array} defines the size of the filter, such as [3, 3]</li><li><code><span class="token property">sigmaX</span></code> {number} The standard deviation in the x direction, if not filled in, it will be calculated automatically</li><li><code><span class="token property">sigmaY</span></code> {number} The standard deviation in the y direction, it will be calculated automatically if it is not filled in</li><li><code><span class="token property">type</span></code> {string} Infer the edge pixel type, the default is &quot;DEFAULT&quot;, see <code>images<span class="token punctuation">.</span>blur</code></li><li>Back to {Image}</li></ul><p>Perform Gaussian blur on the image and return to the processed image.</p><p>You can refer to related blogs (such as [Implementing Image Smoothing] (https://www.cnblogs.com/denny402/p/3848316.html)) or the OpenCV document [GaussianBlur] (https://docs.opencv.org/3.4 .4/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1).</p><h2 id="images-mattoimage-mat" tabindex="-1"><a class="header-anchor" href="#images-mattoimage-mat" aria-hidden="true">#</a> images.matToImage(mat)</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">mat</span></code> {Mat} OpenCV&#39;s Mat object</li><li>Back to {Image}</li></ul><p>Convert Mat object to Image object.</p><h2 id="find-pictures-and-colors" tabindex="-1"><a class="header-anchor" href="#find-pictures-and-colors" aria-hidden="true">#</a> Find pictures and colors</h2><h2 id="images-requestscreencapture-landscape" tabindex="-1"><a class="header-anchor" href="#images-requestscreencapture-landscape" aria-hidden="true">#</a> images.requestScreenCapture([landscape])</h2><ul><li><code><span class="token property">landscape</span></code> {boolean} Boolean value, indicating whether the screenshot to be executed is a landscape screen. If landscape is false, it means vertical screen screenshot; true means horizontal screen screenshot.</li></ul><p>Apply for screenshot permission from the system, and return whether the request is successful.</p><p>The first time you use this function, a screenshot permission request will pop up. It is recommended to select &quot;Always Allow&quot;.</p><p>This function only applies for screenshot permission, and does not actually execute screenshots. The real screenshot function is <code><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><p>This function only needs to be executed once in the screenshot script, instead of calling <code><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> every time.</p><p><strong>If you do not specify the landscape value, the screenshot orientation is determined by the current device screen orientation</strong>, so be sure to pay attention to the screen orientation when executing this function.</p><p>It is recommended to run this function on the interface of this software. A flashing black screen is likely to occur when other software interfaces are running.</p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Request a screenshot</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to request screenshot&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//Continuously take screenshots of 10 pictures (with an interval of 1 second) and save them to the memory card directory</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/screen_capture_&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This function can also be used as a global function.</p><h2 id="images-capturescreen" tabindex="-1"><a class="header-anchor" href="#images-capturescreen" aria-hidden="true">#</a> images.captureScreen()</h2><p>Capture the current screen and return an Image object.</p><p>Executing this function without screenshot permission will throw a SecurityException.</p><p>This function will not return null, and two calls may return the same Image object. This is because it takes a certain amount of time to update the device screenshots, and continuous calls within a short period of time (usually 16ms) will return the same screenshot.</p><p>The screenshot needs to be converted to Bitmap format, so the execution of this function takes a certain amount of time (0~20ms).</p><p>In addition, after requestScreenCapture() is executed successfully, it will take a certain amount of time for the screenshot to be available. Therefore, if you call captureScreen() immediately, it will wait for a certain period of time (usually several hundred ms) before returning the screenshot.</p><p>example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Request a horizontal screenshot</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Screenshot</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Get the color value at point (100, 100)</span>
<span class="token keyword">var</span> color <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">pixel</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Display the color value</span>
<span class="token function">toast</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This function can also be used as a global function.</p><h2 id="images-capturescreen-path" tabindex="-1"><a class="header-anchor" href="#images-capturescreen-path" aria-hidden="true">#</a> images.captureScreen(path)</h2><ul><li><code><span class="token property">path</span></code> {string} The path to save the screenshot</li></ul><p>Capture the current screen and save it to path in PNG format. If the file does not exist, it will be created; if the file exists, it will be overwritten.</p><p>The function will not return any value. This function can also be used as a global function.</p><h2 id="images-pixel-image-x-y" tabindex="-1"><a class="header-anchor" href="#images-pixel-image-x-y" aria-hidden="true">#</a> images.pixel(image, x, y)</h2><ul><li><code><span class="token property">image</span></code> {Image} image</li><li><code><span class="token property">x</span></code> {number} The abscissa of the pixel to be obtained.</li><li><code><span class="token property">y</span></code> {number} The ordinate of the pixel to be obtained.</li></ul><p>Returns the ARGB value of the pixel of the image image at point (x, y).</p><p>The format of the value is 0xAARRGGBB, which is a &quot;32-bit integer&quot; (although JavaScript does not distinguish between integer types and other numeric types).</p><p>The origin of the coordinate system is the upper left corner of the picture. Take the left side of the picture as the y-axis, and the upper side as the x-axis.</p><h2 id="images-findcolor-image-color-options" tabindex="-1"><a class="header-anchor" href="#images-findcolor-image-color-options" aria-hidden="true">#</a> images.findColor(image, color, options)</h2><ul><li><code><span class="token property">image</span></code> {Image} image</li><li><code><span class="token property">color</span></code> {number} | {string} The RGB value of the color to be found. If it is an integer, it represents the RGB value in the form of 0xRRGGBB (the A channel will be ignored); if it is a string, it represents its RGB value with &quot;#RRGGBB&quot;.</li><li><code><span class="token property">options</span></code> {Object} options</li></ul><p>Look for the color color in the picture. When it is found, it returns the found point Point, and when it cannot find it, it returns null.</p><p>Options include:</p><ul><li><code><span class="token property">region</span></code> {Array} Find the color region. Is an array of two or four elements. (region[0], region[1]) represents the upper left corner of the color-finding area; region[2]*region[3] represents the width and height of the color-finding area. If there are only two elements in the region, the color-finding region is (region[0], region[1]) to the lower right corner of the screen. If the region option is not specified, the color-finding area is the entire picture.</li><li><code><span class="token property">threshold</span></code> {number} The critical value of color similarity when searching for color, the range is 0~255 (the smaller the more similar, 0 means the color is equal, 255 means any color can be matched). The default is 4. The conversion of threshold and floating point similarity (0.0~1.0) is similarity = (255-threshold) / 255.</li></ul><p>This function can also be used as a global function.</p><p>An example of cyclic color finding is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Look for the color in a loop, stop when it finds red (#ff0000) and report the coordinates</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">findColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#ff0000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Find the red color, the coordinates are (&quot;</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span><span class="token operator">+</span> point<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An example of color finding in an area is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Read local picture/sdcard/1.png</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Determine whether the image is loaded successfully</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>img<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;No such picture&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//Find the color in the picture, and specify the color-finding area to be the area with a width of 300 and a length of 200 at the position (400, 500), and the specified color-finding critical value is 4</span>
<span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">findColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#00ff00&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
     <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">4</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Found it:&quot;</span> <span class="token operator">+</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findcolorinregion-img-color-x-y-width-height-threshold" tabindex="-1"><a class="header-anchor" href="#images-findcolorinregion-img-color-x-y-width-height-threshold" aria-hidden="true">#</a> images.findColorInRegion(img, color, x, y[, width, height, threshold])</h2><p>An easy way to find the color of an area.</p><p>Equivalent to</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>images<span class="token punctuation">.</span><span class="token function">findColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">]</span><span class="token punctuation">,</span>
     <span class="token literal-property property">threshold</span><span class="token operator">:</span> threshold
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This function can also be used as a global function.</p><h2 id="images-findcolorequals-img-color-x-y-width-height" tabindex="-1"><a class="header-anchor" href="#images-findcolorequals-img-color-x-y-width-height" aria-hidden="true">#</a> images.findColorEquals(img, color[, x, y, width, height])</h2><ul><li><code><span class="token property">img</span></code> {Image} image</li><li><code><span class="token property">color</span></code> {number} | {string} the color to find</li><li><code><span class="token property">x</span></code> {number} The abscissa of the upper left corner of the color finding area</li><li><code><span class="token property">y</span></code> {number} The ordinate of the upper left corner of the color finding area</li><li><code><span class="token property">width</span></code> {number} The width of the color finding area</li><li><code><span class="token property">height</span></code> {number} the height of the color finding area</li><li>Return {Point}</li></ul><p>Find a point where the color and color are exactly equal in the specified area of \u200B\u200Bthe image img, and return to the left of that point; if not found, return <code><span class="token keyword">null</span></code>.</p><p>The color finding area is specified by <code><span class="token property">x</span></code>, <code><span class="token property">y</span></code>, <code><span class="token property">width</span></code>, <code><span class="token property">height</span></code>. If the color finding area is not specified, it will be searched in the whole picture.</p><p>This function can also be used as a global function.</p><p>Example: (Judging whether there are unread messages by looking for the color of the QQ red dot)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">launchApp</span><span class="token punctuation">(</span><span class="token string">&quot;QQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">findColorEquals</span><span class="token punctuation">(</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;#f64d30&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;There are unread messages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;No unread messages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findmulticolors-img-firstcolor-colors-options" tabindex="-1"><a class="header-anchor" href="#images-findmulticolors-img-firstcolor-colors-options" aria-hidden="true">#</a> images.findMultiColors(img, firstColor, colors[, options])</h2><ul><li><code><span class="token property">img</span></code> {Image} Looking for the color picture</li><li><code><span class="token property">firstColor</span></code> {number} | {string} The color of the first point</li><li><code><span class="token property">colors</span></code> {Array} represents an array of the position and color of the remaining points relative to the first point, each element of the array is [x, y, color]</li><li><code><span class="token property">options</span></code> {Object} options, including: <ul><li><code><span class="token property">region</span></code> {Array} Find the color region. Is an array of two or four elements. (region[0], region[1]) represents the upper left corner of the color-finding area; region[2]*region[3] represents the width and height of the color-finding area. If there are only two elements in the region, the color-finding region is (region[0], region[1]) to the lower right corner of the screen. If the region option is not specified, the color-finding area is the entire picture.</li><li><code><span class="token property">threshold</span></code> {number} The threshold of color similarity when searching for colorValue, the range is 0~255 (the smaller the more similar, 0 means the color is equal, 255 means any color can be matched). The default is 4. The conversion of threshold and floating point similarity (0.0~1.0) is similarity = (255-threshold) / 255.</li></ul></li></ul><p>Multi-point color search, similar to the multi-point color search of the button wizard, the process is as follows:</p><ol><li>Find the position of the color firstColor in the picture img (x0, y0)</li><li>For each element [x, y, color] of the array colors, check whether the pixel of the image img at the position (x + x0, y + y0) is the color color, if yes, return (x0, y0), otherwise continue Find the location of firstColor and re-execute step 1</li><li>Return <code><span class="token keyword">null</span></code> when the entire picture cannot be found</li></ol><p>For example, for the code <code>images<span class="token punctuation">.</span><span class="token function">findMultiColors</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#123456&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">&quot;#000000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>, assume that the image is at (100, 200) The color of the position is #123456, then if the color of the position (110, 220) is #fffff and the color of the position (130, 240) is #000000, the function returns the point (100, 200).</p><p>If you want to specify the color finding area, specify it in the options, for example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> p <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">findMultiColors</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#123456&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">&quot;#000000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">,</span> <span class="token number">960</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-detectscolor-image-color-x-y-threshold-16-algorithm-diff" tabindex="-1"><a class="header-anchor" href="#images-detectscolor-image-color-x-y-threshold-16-algorithm-diff" aria-hidden="true">#</a> images.detectsColor(image, color, x, y[, threshold = 16, algorithm = &quot;diff&quot;])</h2>`,74),en=s('<li><code><span class="token property">image</span></code> {Image} image</li><li><code><span class="token property">color</span></code> {number} | {string} The color to be detected</li><li><code><span class="token property">x</span></code> {number} the abscissa of the position to be detected</li><li><code><span class="token property">y</span></code> {number} The ordinate of the position to be detected</li><li><code><span class="token property">threshold</span></code> {number} The threshold of color similarity, the default is 16. The value range is 0~255.</li>',5),tn=n("code",null,[n("span",{class:"token property"},"algorithm")],-1),on=n("li",null,[n("p",null,'"equal": Equal matching, matching only when it is exactly equal to the given color color.')],-1),pn=n("li",null,[n("p",null,'"diff": Difference matching. Matches when the sum of the absolute values \u200B\u200Bof the R, G, and B differences of a given color is less than the threshold.')],-1),cn=n("li",null,[n("p",null,'"rgb": rgb Euler distance similarity. Match when the rgb Euler distance with the given color color is less than or equal to the threshold.')],-1),ln={href:"https://en.wikipedia.org/wiki/Color_difference",target:"_blank",rel:"noopener noreferrer"},rn=n("li",null,[n("p",null,'"hs": hs Euler distance matching. hs is the hue value in HSV space.')],-1),un=s(`<p>Returns whether the image image matches the color color at position (x, y). Used to detect whether a certain position in the picture is a specific color.</p><p>An example of judging whether a Weibo of the Weibo client has been liked:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Find the like control</span>
<span class="token keyword">var</span> like <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;ly_feed_like_icon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Get the coordinates of the midpoint of the control</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> like<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> like<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Screenshot</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Determine whether the color at the coordinate is orange-red</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">detectsColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#fed9a8&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//If yes, I already liked it, and don\u2019t do anything.</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">//Otherwise click the like button</span>
    like<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-detectsmulticolors-img-x-y-firstcolor-colors-options" tabindex="-1"><a class="header-anchor" href="#images-detectsmulticolors-img-x-y-firstcolor-colors-options" aria-hidden="true">#</a> images.detectsMultiColors(img, x, y, firstColor, colors, options)</h2><ul><li><code><span class="token property">img</span></code> {Image} target image</li><li><code><span class="token property">x</span></code> {number} the x coordinate of the first point</li><li><code><span class="token property">y</span></code> {number} the y coordinate of the first point</li><li><code><span class="token property">firstColor</span></code> {number} | {string} The color of the first point</li><li><code><span class="token property">colors</span></code> {Array} represents an array of the position and color of the remaining points relative to the first point, each element of the array is [x, y, color]</li><li><code><span class="token property">options</span></code> {Object} options, including: <ul><li><code><span class="token property">region</span></code> {Array} Find the color region. Is an array of two or four elements. (region[0], region[1]) represents the upper left corner of the color-finding area; region[2]*region[3] represents the width and height of the color-finding area. If there are only two elements in the region, the color-finding region is (region[0], region[1]) to the lower right corner of the screen. If the region option is not specified, the region is the entire picture.</li><li><code><span class="token property">threshold</span></code> {number} The critical value of color similarity in color comparison, ranging from 0 to 255 (the smaller the more similar, 0 means the color is equal, and 255 means any color can be matched). The default is 4. The conversion of threshold and floating point similarity (0.0~1.0) is similarity = (255-threshold) / 255.</li></ul></li><li>Return <code><span class="token property">boolean</span></code></li></ul><p>Multi-point colorimetry, returns whether the colors of multiple points at the starting position (x, y) of the img match.</p><p>See the documentation of <code>images<span class="token punctuation">.</span><span class="token function">findMultiColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> for multi-point color finding.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">detectsMultiColors</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;#000000&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;#123456&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;#ff0000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="images-findimage-img-template-options" tabindex="-1"><a class="header-anchor" href="#images-findimage-img-template-options" aria-hidden="true">#</a> images.findImage(img, template[, options])</h2><p><strong>[v8.5.5 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} big picture</li><li><code><span class="token property">template</span></code> {Image} small image (template)</li><li><code><span class="token property">options</span></code> {Object} Find image options</li></ul><p>Find a picture. Find the position of the small picture template in the big picture img (module matching), return the position coordinates (Point) when found, and return null when not found.</p><p>Options include:</p><ul><li><code><span class="token property">threshold</span></code> {number} Image similarity. A floating point number with a value range of 0~1. The default value is 0.9.</li><li><code><span class="token property">region</span></code> {Array} Find the map area. See the description of the findColor function for regions.</li><li><code><span class="token property">level</span></code> {number} <strong>Generally speaking, it is not necessary to modify this parameter</strong>. When this parameter is not added, the parameter will be automatically adjusted according to the size of the picture. The image finding algorithm uses image pyramids. The level parameter indicates the level of the pyramid. The larger the level, the higher the efficiency of image finding, but it may also cause image finding failure (the image cannot be distinguished due to excessive shrinkage) or return to the wrong position. . Therefore, unless you know the meaning of this parameter and need to perform performance tuning, you do not need to use this parameter.</li></ul><p>This function can also be used as a global function.</p><p>One of the simplest examples of finding pictures is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/\u5927\u56FE.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> templ <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/\u5C0F\u56FE.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">findImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> templ<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Found it:&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An example of finding a picture for a slightly more complicated area is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wx <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/WeChat icon.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Return to the desktop</span>
<span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Take a screenshot and find the picture</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">findImage</span><span class="token punctuation">(</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wx<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">0.8</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Found the WeChat icon on the desktop: &quot;</span><span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;WeChat icon was not found on the desktop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findimageinregion-img-template-x-y-width-height-threshold" tabindex="-1"><a class="header-anchor" href="#images-findimageinregion-img-template-x-y-width-height-threshold" aria-hidden="true">#</a> images.findImageInRegion(img, template, x, y[, width, height, threshold])</h2><p>An easy way to find maps by area. Is equivalent to:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>images<span class="token punctuation">.</span><span class="token function">findImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">threshold</span><span class="token operator">:</span> threshold
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This function can also be used as a global function.</p><h2 id="images-matchtemplate-img-template-options" tabindex="-1"><a class="header-anchor" href="#images-matchtemplate-img-template-options" aria-hidden="true">#</a> images.matchTemplate(img, template, options)</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">img</span></code> {Image} big picture</li><li><code><span class="token property">template</span></code> {Image} small image (template)</li><li><code><span class="token property">options</span></code> {Object} Options for finding images: <ul><li><code><span class="token property">threshold</span></code> {number} Image similarity. A floating point number with a value range of 0~1. The default value is 0.9.</li><li><code><span class="token property">region</span></code> {Array} Find the map area. See the description of the findColor function for regions.</li><li><code><span class="token property">max</span></code> {number} The maximum number of search results, the default is 5</li><li><code><span class="token property">level</span></code> {number} <strong>Generally speaking, it is not necessary to modify this parameter</strong>. When this parameter is not added, the parameter will be automatically adjusted according to the size of the picture. The image finding algorithm uses image pyramids. The level parameter indicates the level of the pyramid. The larger the level, the higher the efficiency of image finding, but it may also cause image finding failure (the image cannot be distinguished due to excessive shrinkage) or return to the wrong position. . Therefore, unless you know the meaning of this parameter and need to perform performance tuning, you do not need to use this parameter.</li></ul></li><li>Return {MatchingResult}</li></ul><p>Search for small pictures in big pictures, and return the search result MatchingResult. This function can be used to find multiple positions when looking for images, and the maximum number of results can be controlled by the max parameter. You can also sort the matching results and find the best value.</p><h1 id="matchingresult" tabindex="-1"><a class="header-anchor" href="#matchingresult" aria-hidden="true">#</a> MatchingResult</h1><p><strong>[v4.1.0 New]</strong></p><h2 id="matches" tabindex="-1"><a class="header-anchor" href="#matches" aria-hidden="true">#</a> matches</h2><ul><li>{Array} The array of matching results.</li></ul><p>The element of the array is a Match object:</p><ul><li><code><span class="token property">point</span></code> {Point} matching position</li><li><code><span class="token property">similarity</span></code> {number} similarity</li></ul><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">matchTemplate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span>matches<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">match</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;point = &quot;</span><span class="token operator">+</span> match<span class="token punctuation">.</span>point <span class="token operator">+</span> <span class="token string">&quot;, similarity =&quot;</span> <span class="token operator">+</span> match<span class="token punctuation">.</span>similarity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="points" tabindex="-1"><a class="header-anchor" href="#points" aria-hidden="true">#</a> points</h2><ul><li>{Array} The array of matching positions.</li></ul><h2 id="first" tabindex="-1"><a class="header-anchor" href="#first" aria-hidden="true">#</a> first()</h2><ul><li>Back to {Match}</li></ul><p>The first match result. If there is no match, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="last" tabindex="-1"><a class="header-anchor" href="#last" aria-hidden="true">#</a> last()</h2><ul><li>Back to {Match}</li></ul><p>The last matching result. If there is no match, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="leftmost" tabindex="-1"><a class="header-anchor" href="#leftmost" aria-hidden="true">#</a> leftmost()</h2><ul><li>Back to {Match}</li></ul><p>The matching result at the far left of the big picture. If there is no match, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="topmost" tabindex="-1"><a class="header-anchor" href="#topmost" aria-hidden="true">#</a> topmost()</h2><ul><li>Back to {Match}</li></ul><p>The matching result at the top of the big picture. If there is no match, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="rightmost" tabindex="-1"><a class="header-anchor" href="#rightmost" aria-hidden="true">#</a> rightmost()</h2><ul><li>Back to {Match}</li></ul><p>The matching result on the far right of the big picture. If there is no match, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="bottommost" tabindex="-1"><a class="header-anchor" href="#bottommost" aria-hidden="true">#</a> bottommost()</h2><ul><li>Back to {Match}</li></ul><p>The matching result at the bottom of the big picture. If there is no match, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="best" tabindex="-1"><a class="header-anchor" href="#best" aria-hidden="true">#</a> best()</h2><ul><li>Back to {Match}</li></ul><p>The matching result with the highest similarity. If there is no match, return <code><span class="token keyword">null</span></code>.</p><h2 id="worst" tabindex="-1"><a class="header-anchor" href="#worst" aria-hidden="true">#</a> worst()</h2><ul><li>Back to {Match}</li></ul><p>The matching result with the lowest similarity. If there is no match, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="sortby-cmp" tabindex="-1"><a class="header-anchor" href="#sortby-cmp" aria-hidden="true">#</a> sortBy(cmp)</h2><ul><li>cmp {Function}|{string} Comparison function, or a string indicating the sorting direction. For example, &quot;left&quot; means to sort the matching results from left to right according to the matching position, &quot;top&quot; means to sort the matching results from top to bottom according to the matching position, and &quot;left-top&quot; means to sort the matching results from left to right according to the matching position, Sort from top to bottom. The directions include <code><span class="token property">left</span></code> (left), <code><span class="token property">top</span></code> (up), <code><span class="token property">right</span></code> (right), and <code><span class="token property">bottom</span></code> (down).</li><li>{MatchingResult}</li></ul><p>Sort the matching results and return the sorted results.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">matchTemplate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token string">&quot;top-right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> Image</h1><p>Represents a picture, which can be a screenshot picture, or a picture read locally, or a picture obtained from the Internet.</p><h2 id="image-getwidth" tabindex="-1"><a class="header-anchor" href="#image-getwidth" aria-hidden="true">#</a> Image.getWidth()</h2><p>Returns the width of the image in pixels.</p><h2 id="image-getheight" tabindex="-1"><a class="header-anchor" href="#image-getheight" aria-hidden="true">#</a> Image.getHeight()</h2><p>Returns the height of the image in pixels.</p><h2 id="image-saveto-path" tabindex="-1"><a class="header-anchor" href="#image-saveto-path" aria-hidden="true">#</a> Image.saveTo(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li></ul><p>Save the picture to the path path. (Overwrite if the file exists)</p><h2 id="image-pixel-x-y" tabindex="-1"><a class="header-anchor" href="#image-pixel-x-y" aria-hidden="true">#</a> Image.pixel(x, y)</h2><ul><li><code><span class="token property">x</span></code> {number} abscissa</li><li><code><span class="token property">y</span></code> {number} ordinate</li></ul><p>Returns the ARGB value of the pixel of the image image at point (x, y).</p><p>The format of the value is 0xAARRGGBB, which is a &quot;32-bit integer&quot; (although JavaScript does not distinguish between integer types and other numeric types).</p><p>The origin of the coordinate system is the upper left corner of the picture. Take the left side of the picture as the y-axis, and the upper side as the x-axis.</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h1 id="point" tabindex="-1"><a class="header-anchor" href="#point" aria-hidden="true">#</a> Point</h1><p>findColor, the object returned by findImage. Represents a point (coordinate).</p><h2 id="point-x" tabindex="-1"><a class="header-anchor" href="#point-x" aria-hidden="true">#</a> Point.x</h2><p>Abscissa.</p><h2 id="point-y" tabindex="-1"><a class="header-anchor" href="#point-y" aria-hidden="true">#</a> Point.y</h2><p>Y-axis.</p>`,86);function dn(hn,mn){const e=c("ExternalLinkIcon");return i(),p("div",null,[r,n("ul",null,[u,d,n("li",null,[h,n("ul",null,[m,n("li",null,[g,a(" Lanczos interpolation See "),n("a",k,[a("InterpolationFlags"),t(e)])])])]),f]),b,n("p",null,[a("See "),n("a",v,[a("Imgproc.resize"),t(e)]),a(".")]),y,w,n("ul",null,[x,_,q,n("li",null,[I,n("ul",null,[T,n("li",null,[j,a(" Lanczos interpolation See "),n("a",C,[a("InterpolationFlags"),t(e)])])])]),R]),B,n("p",null,[a("See "),n("a",A,[a("Imgproc.resize"),t(e)]),a(".")]),S,n("ul",null,[E,N,z,n("li",null,[n("p",null,[F,a(' {string} Thresholding type, the default is "BINARY", see '),n("a",O,[a("ThresholdTypes"),t(e)]),a(", optional value:")]),G]),M]),L,n("p",null,[a("You can refer to related blogs (such as "),n("a",P,[a("Use of Threshold Function"),t(e)]),a(") or OpenCV document [threshold](https://docs.opencv.org/3.4 .4/d7/d1b/group__imgproc__misc.html#gae8a4a146d1ca78c626a53577199e9c57).")]),V,n("p",null,[a("You can refer to related blogs (such as "),n("a",Y,[a("threshold and adaptiveThreshold"),t(e)]),a(") or the OpenCV document [adaptiveThreshold](https://docs.opencv.org/3.4. 4/d7/d1b/group__imgproc__misc.html#ga72b913f352e4a1b1b397736707afcde3 ).")]),D,U,n("ul",null,[W,n("li",null,[H,a(" {string} The type of color space conversion, there are a total of 205 optional values \u200B\u200B(see "),n("a",Z,[a("ColorConversionCodes"),t(e)]),a("), here are only a few: "),Q]),J,X]),K,n("p",null,[a("You can refer to related blogs (such as "),n("a",$,[a("Color Space Conversion"),t(e)]),a(") or OpenCV document [cvtColor](https://docs. opencv.org/3.4.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab).")]),nn,n("p",null,[a("You can refer to related blogs (such as"),n("a",an,[a("Realize image smoothing"),t(e)]),a(") or OpenCV document [blur](https://docs.opencv.org/3.4.4/d4/d86 /group__imgproc__filter.html#ga8c45db9afe636703801b0b2e440fce37).")]),sn,n("ul",null,[en,n("li",null,[tn,a(" {string} Color matching algorithm, including: "),n("ul",null,[on,pn,cn,n("li",null,[n("p",null,[a('"rgb+": Weighted rgb Euler distance matching ('),n("a",ln,[a("LAB Delta E"),t(e)]),a(").")])]),rn])])]),un])}const fn=o(l,[["render",dn],["__file","images.html.vue"]]);export{fn as default};
