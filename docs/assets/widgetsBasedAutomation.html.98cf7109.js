import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c,a as e,b as n,d as s,e as a,r as p}from"./app.6aa2b576.js";const l={},r=a(`<h1 id="automator" tabindex="-1"><a class="header-anchor" href="#automator" aria-hidden="true">#</a> Automator</h1><p>Widget-based operations refer to selecting a widget on the screen, obtaining its information or operating it. For general software, widget-based operations have good compatibility with different models; but for games, because the game interface is not composed of widgets, the methods in this chapter cannot be used, and the functions in this chapter cannot be used. . For the writing of game scripts, please refer to &quot;Coordinate-Based Operations&quot;.</p><p>Widget-based operations depend on accessibility services, so it is best to use the <code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function at the beginning of the script to ensure that accessibility services are enabled. If the accessibility service is not started when a statement that requires permission is run, an exception will be thrown and the accessibility service interface will be jumped to. This kind of user experience is not good, because the script needs to be rerun, and a function to wait for the accessibility service to start and let the script continue to run will be added later.</p><p>You can also use <code><span class="token string">&quot;auto&quot;</span><span class="token punctuation">;</span></code> at the beginning of the script to indicate that the script requires accessibility services, but this is not recommended because this tag must be at the beginning of the script (no comments or other statements, spaces, etc.), We recommend using the <code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function to ensure that accessibility services are enabled.</p><h2 id="auto-mode" tabindex="-1"><a class="header-anchor" href="#auto-mode" aria-hidden="true">#</a> auto([mode])</h2><ul><li><code><span class="token property">mode</span></code> {string} mode</li></ul><p>Check whether the accessibility service has been enabled, if it is not enabled, throw an exception and jump to the accessibility service enable interface; at the same time set the accessibility mode to mode. The optional values \u200B\u200Bof mode are:</p><ul><li><code><span class="token property">fast</span></code> fast mode. In this mode, the widget cache is enabled, so that the selector can get the on-screen widgets faster. This mode can be used for scripts that require fast widget operations, but it is not necessary for general scripts to use this function.</li><li><code><span class="token property">normal</span></code> Normal mode, default.</li></ul><p>If the mode parameter is not added, it is the normal mode.</p><p>It is recommended to use <code>auto<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> and <code>auto<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> instead of this function, because the <code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function will stop the script if the accessibility service is not started; while <code>auto<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> will The accessibility service continues to run after it is started.</p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token string">&quot;fast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example 2:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="auto-waitfor" tabindex="-1"><a class="header-anchor" href="#auto-waitfor" aria-hidden="true">#</a> auto.waitFor()</h2><p>Check whether the accessibility service is enabled. If it is not enabled, jump to the accessibility service enable interface and wait for the accessibility service to start; the script will continue to run when the accessibility service is started.</p><p>Because this function is blocking, it cannot be run in ui mode unless it has coroutine features. It is recommended to use the <code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function in ui mode.</p><h2 id="auto-setmode-mode" tabindex="-1"><a class="header-anchor" href="#auto-setmode-mode" aria-hidden="true">#</a> auto.setMode(mode)</h2><ul><li><code><span class="token property">mode</span></code> {string} mode</li></ul><p>Set the accessibility mode to mode. The optional values \u200B\u200Bof mode are:</p><ul><li><code><span class="token property">fast</span></code> fast mode. In this mode, the widget cache is enabled, so that the selector can get the on-screen widgets faster. This mode can be used for scripts that require fast widget viewing and operation, but general scripts do not need to use this function.</li><li><code><span class="token property">normal</span></code> Normal mode, default.</li></ul><h2 id="auto-setflags-flags" tabindex="-1"><a class="header-anchor" href="#auto-setflags-flags" aria-hidden="true">#</a> auto.setFlags(flags)</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">flags</span></code> {string} | {Array} Some flags to enable and disable certain features, including: <ul><li><code><span class="token property">findOnUiThread</span></code> After using this feature, the selector search will be performed in the main process. This feature is used to solve secondary problems caused by thread safety issues, but it seems that the known problems are not thread safety issues.</li><li>After using this feature, <code><span class="token property">useUsageStats</span></code> will use the result of the &quot;Usage Statistics&quot; service to detect the currently running application package name (you need to grant the &quot;View Usage Statistics&quot; permission). If you feel that the result returned by currentPackage() is not accurate, you can try this feature.</li><li><code><span class="token property">useShell</span></code> After using this feature, the shell command will be used to obtain the package name and activity name of the currently running application, but root privileges are required.</li></ul></li></ul><p>Enable some features of automator. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>auto<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;findOnUiThread&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;useShell&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="auto-service" tabindex="-1"><a class="header-anchor" href="#auto-service" aria-hidden="true">#</a> auto.service</h2><p><strong>[v4.1.0 New]</strong></p>`,28),u={href:"https://developer.android.com/reference/android/accessibilityservice/AccessibilityService",target:"_blank",rel:"noopener noreferrer"},d=e("p",null,[n("Get accessibility services. If the accessibility service is not started, "),e("code",null,[e("span",{class:"token keyword"},"null")]),n(" is returned.")],-1),h={href:"https://developer.android.com/reference/android/accessibilityservice/AccessibilityService",target:"_blank",rel:"noopener noreferrer"},k=e("h2",{id:"auto-windows",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#auto-windows","aria-hidden":"true"},"#"),n(" auto.windows")],-1),f=e("p",null,[e("strong",null,"[v4.1.0 New]")],-1),g=e("ul",null,[e("li",null,"{Array}")],-1),b={href:"https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo",target:"_blank",rel:"noopener noreferrer"},m=a('<p>This function requires Android 5.0 or higher to run.</p><h2 id="auto-root" tabindex="-1"><a class="header-anchor" href="#auto-root" aria-hidden="true">#</a> auto.root</h2><p><strong>[v4.1.0 New]</strong></p><ul><li>{UiObject}</li></ul><p>The layout root element of the current window. If the accessibility service is not started or WindowFilter returns false, it will return <code><span class="token keyword">null</span></code>.</p><p>If windowFilter is not set, the current window is the active window (the window that is focused and is being touched); if windowFilter is set, the first window in the filtered window is obtained.</p><p>If the system is below Android 5.0, the layout root element of the currently active window is always returned.</p><h2 id="auto-rootinactivewindow" tabindex="-1"><a class="header-anchor" href="#auto-rootinactivewindow" aria-hidden="true">#</a> auto.rootInActiveWindow</h2><p><strong>[v4.1.0 New]</strong></p><ul><li>{UiObject}</li></ul><p>The layout root element of the currently active window (the window that has the focus and is touching). If the accessibility service is not started, it will be <code><span class="token keyword">null</span></code>.</p><h2 id="auto-setwindowfilter-filter" tabindex="-1"><a class="header-anchor" href="#auto-setwindowfilter-filter" aria-hidden="true">#</a> auto.setWindowFilter(filter)</h2><p><strong>[v4.1.0 New]</strong></p>',13),w=e("code",null,[e("span",{class:"token property"},"filter")],-1),v={href:"https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo",target:"_blank",rel:"noopener noreferrer"},x=a(`<p>Set the window filter. This filter can determine which windows are the target windows and affect the search of the selector. For example, if you want the selector to search in all windows (including status bars, input methods, etc.), you only need to use the following code:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>auto<span class="token punctuation">.</span><span class="token function">setWindowFilter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//No matter what the window is, it returns true, which means searching in this window</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For another example, currently using the split screen function, there are two applications Auto.js and QQ on the screen, but we only want the selector to search the QQ interface, then:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>auto<span class="token punctuation">.</span><span class="token function">setWindowFilter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// For the application window, its title attribute is the name of the application, so an application can be judged by the title attribute</span>
    <span class="token keyword">return</span> window<span class="token punctuation">.</span>title <span class="token operator">==</span> <span class="token string">&quot;QQ&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, the selector searches in the currently active window, and does not search for floating windows, status bars, and the like. Use WindowFilter to widget the searched windows.</p><p>It should be noted that if the results returned by WindowFilter are all false, the search results of the selector will be empty.</p><p>In addition, the setWindowFilter function will also affect the result of <code>auto<span class="token punctuation">.</span>windowRoots</code>.</p><p>This function requires Android 5.0 or higher to be effective.</p><h2 id="auto-windowroots" tabindex="-1"><a class="header-anchor" href="#auto-windowroots" aria-hidden="true">#</a> auto.windowRoots</h2><p><strong>[v4.1.0 New]</strong></p><ul><li>{Array}</li></ul><p>Returns an array of the layout root elements of the window currently filtered by WindowFilter.</p><p>If the system is below Android 5.0, it will always return an array of the layout root elements of the currently active window.</p><h1 id="simpleactionautomator" tabindex="-1"><a class="header-anchor" href="#simpleactionautomator" aria-hidden="true">#</a> SimpleActionAutomator</h1><blockquote><p>Stability: 2-Stable</p></blockquote><p>SimpleActionAutomator provides some functions for simulating simple operations, such as clicking text, simulating buttons, etc. These functions can be used directly as global functions.</p><h2 id="click-text-i" tabindex="-1"><a class="header-anchor" href="#click-text-i" aria-hidden="true">#</a> click(text[, i])</h2><ul><li><code><span class="token property">text</span></code> {string} The text to be clicked</li><li><code><span class="token property">i</span></code> {number} If the same text appears multiple times on the screen, i means the number of text to be clicked, and i is counted from 0</li></ul><p>Returns whether the click is successful. When the screen does not contain the text, or the area where the text is located cannot be clicked, it returns false, otherwise it returns true.</p><p>This function can click most buttons that contain text. For example, the &quot;WeChat&quot;, &quot;Contacts&quot;, &quot;Discover&quot;, and &quot;Me&quot; buttons at the bottom of the WeChat main interface. Usually used together with while in order to click the button until it succeeds. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&quot;Scan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>When the parameter i is not specified, it will try to click on all the text that appears on the screen and return whether all the clicks are successful.</p><p>i is calculated from 0, that is, <code><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&quot;\u5566\u5566\u5566&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code> means clicking the first &quot;Lalala&quot; on the screen, <code><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&quot;\u5566\u5566\u5566&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code> means clicking The second &quot;La La La&quot; on the screen.</p><blockquote><p>The area where the text is located refers to searching from the text to its parent view until a clickable part is found.</p></blockquote><h2 id="click-left-top-bottom-right" tabindex="-1"><a class="header-anchor" href="#click-left-top-bottom-right" aria-hidden="true">#</a> click(left, top, bottom, right)</h2><ul><li><code><span class="token property">left</span></code> {number} The pixel distance between the left side of the rectangular area to be clicked and the left side of the screen</li><li><code><span class="token property">top</span></code> {number} The pixel distance between the top edge of the rectangular area to be clicked and the top edge of the screen</li><li><code><span class="token property">bottom</span></code> {number} The pixel distance between the bottom of the rectangular area to be clicked and the bottom of the screen</li><li><code><span class="token property">right</span></code> {number} The pixel distance between the right side of the rectangular area to be clicked and the right side of the screen</li></ul><p>**Note that this function is generally only used in recorded scripts, and generally do not use this function when you use this function in your own code. **</p><p>Click on the widget in the designated area. When the screen does not contain an area that strictly matches the area, or the area cannot be clicked, it returns false, otherwise it returns true.</p><p>Some buttons or parts are icons instead of text (for example, the camera icon of Sending Moments and the messages, contacts, and dynamic icons under QQ). At this time, you can&#39;t click through <code><span class="token function">click</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> i<span class="token punctuation">)</span></code>, you can describe where the icon is Area to click. Left, bottom, top, right describe the clicked area.</p><p>As for the area to be clicked, you can use the layout analysis tool to view the bounds property of the widget in the floating window.</p><p>This statement is generated by recording a script through an accessibility service.</p><h2 id="longclick-text-i" tabindex="-1"><a class="header-anchor" href="#longclick-text-i" aria-hidden="true">#</a> longClick(text[, i]))</h2><ul><li><code><span class="token property">text</span></code> {string} The text to be long pressed</li><li><code><span class="token property">i</span></code> {number} If the same text appears multiple times on the screen, i means the number of text to be long-pressed, and i starts counting from 0</li></ul><p>Returns whether the click is successful. When the screen does not contain the text, or the area where the text is located cannot be clicked, it returns false, otherwise it returns true.</p><p>When the parameter i is not specified, it will try to click on all the text appearing on the screen and return whether all the long presses are successful.</p><h2 id="scrollup-i" tabindex="-1"><a class="header-anchor" href="#scrollup-i" aria-hidden="true">#</a> scrollUp([i])</h2><ul><li><code><span class="token property">i</span></code> {number} The number of the widget to slide</li></ul><p>Find the i+1th sliding widget to slide up or <strong>slide left</strong>. Returns whether the operation is successful. Returns false when there are no sliding widgets on the screen.</p><p>In addition, when no parameter is added, <code><span class="token function">scrollUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> will search for the sliding widget with the largest area to slide up or to the left, such as the WeChat message list.</p><p>When the parameter is an integer i, the i+1th sliding widget will be found to slide. For example, <code><span class="token function">scrollUp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code> is the first sliding widget to slide.</p><h2 id="scrolldown-i" tabindex="-1"><a class="header-anchor" href="#scrolldown-i" aria-hidden="true">#</a> scrollDown([i])</h2><ul><li><code><span class="token property">i</span></code> {number} The number of the widget to slide</li></ul><p>Find the i+1th sliding widget to slide down or <strong>slide right</strong>. Returns whether the operation is successful. Returns false when there are no sliding widgets on the screen.</p><p>In addition, when no parameter is added, <code><span class="token function">scrollUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> will search for the sliding widget with the largest area to slide down or slide right.</p><p>When the parameter is an integer i, the i+1th sliding widget will be found to slide. For example, <code><span class="token function">scrollUp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code> is the first sliding widget to slide.</p><h2 id="settext-i-text" tabindex="-1"><a class="header-anchor" href="#settext-i-text" aria-hidden="true">#</a> setText([i, ]text)</h2><ul><li>i {number} means that the input is the i + 1 input box *text {string} the text to be entered</li></ul><p>Returns whether the input is successful. It returns false when the corresponding text box is not found.</p><p>Without parameter i, the text of all input boxes will be set to text. For example, <code><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span></code>.</p><p>The input text here means that the text in the input box is set to text instead of appending to the original text.</p><h2 id="input-i-text" tabindex="-1"><a class="header-anchor" href="#input-i-text" aria-hidden="true">#</a> input([i, ]text)</h2><ul><li>i {number} means that the input is the i + 1 input box</li><li>text {string} the text to be entered</li></ul><p>Returns whether the input is successful. It returns false when the corresponding text box is not found.</p><p>Without parameter i, the text in all input boxes will be appended with text. For example, <code><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span></code>.</p><h2 id="automator-takescreenshot" tabindex="-1"><a class="header-anchor" href="#automator-takescreenshot" aria-hidden="true">#</a> automator.takeScreenshot()</h2>`,55),y={href:"https://pro.autojs.org",target:"_blank",rel:"noopener noreferrer"},q=a(`<ul><li>Return {image}</li></ul><p>Take screenshot with Accessibility Service.</p><p>This function does not require additional permissions compared to the images module, which does not require additional privileges, but there are some limits:</p><ul><li>Screenshot frequency limit. The system limits the screenshot for up to one second, otherwise it will throw an exception.</li><li>Need Android 11 and above</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$auto<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> capture <span class="token operator">=</span> $automator<span class="token punctuation">.</span><span class="token function">takeScreenshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$images<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>capture<span class="token punctuation">,</span> <span class="token string">&quot;./capture.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="automator-switchtoinputmethod-packagename" tabindex="-1"><a class="header-anchor" href="#automator-switchtoinputmethod-packagename" aria-hidden="true">#</a> automator.switchToInputMethod(packageName)</h2>`,6),j={href:"https://pro.autojs.org",target:"_blank",rel:"noopener noreferrer"},_=a(`<ul><li><code><span class="token property">packageName</span></code> {string} input method package name</li><li>Return {boolean}</li></ul><p>Switch to the specified input method, return to whether it is successful. There is a possibility of failure:</p><ul><li>Specify the input method of the package name does not exist or not enabled</li><li>System returns to switch input method failed</li></ul><p>This function requires Android 11 or more.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Switch to Sogou input method</span>
$automator<span class="token punctuation">.</span><span class="token function">switchToInputMethod</span><span class="token punctuation">(</span><span class="token string">&#39;com.sohu.inputmethod.sogou&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="automator-headsethook" tabindex="-1"><a class="header-anchor" href="#automator-headsethook" aria-hidden="true">#</a> automator.headsetHook()</h2>`,6),T={href:"https://pro.autojs.org",target:"_blank",rel:"noopener noreferrer"},S=a(`<ul><li>Return {boolean}</li></ul><p>Send the KEYCODE_HEADSETHOOK KeyEvent, which is used to answer/hang up calls and play/stop media, returns whether it is successful.</p><h1 id="uiselector" tabindex="-1"><a class="header-anchor" href="#uiselector" aria-hidden="true">#</a> UiSelector</h1><p>UiSelector is the selector, which is used to select the widgets on the screen according to various conditions, and then click, long press and other actions on these widgets. Here we need to briefly introduce the relevant knowledge of widgets and interfaces.</p><p>The interface of general software is composed of individual widgets. For example, the picture part is a picture widget (ImageView) and the text part is a text widget (TextView); at the same time, the position of each widget is determined by various layouts, for example, linear layout The widgets in (LinearLayout) are stacked horizontally or vertically at a time, and the list layout (AbsListView) displays the widgets in the form of a list.</p><p>Widgets have various attributes, including text (text), description (desc), class name (className), id and so on. We usually use the properties of a widget to find this widget. For example, if we want to click the &quot;Send&quot; button in the QQ chat window, we can find this widget and click on it through its text property as &quot;Send&quot;. The specific code is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> sendButton <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;send&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sendButton<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, <code><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;send&quot;</span><span class="token punctuation">)</span></code> indicates a condition (the text attribute is &quot;send&quot;), <code><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> indicates that a widget that meets the condition is found based on this condition, so that we can get the send button sendButton, and then Execute <code>sendButton<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to click the &quot;send&quot; button.</p><p>Using text attributes to locate button widgets and text widgets is usually very effective. However, if a widget is a picture widget, such as the search icon in the upper right corner of the Auto.js main interface, it does not have a text attribute, and other attributes are needed to locate it. How do we check his attributes? First open the floating window and accessibility service, click the blue icon (layout analysis), you can see the following interface:</p><p>After we click on the search icon, we can see that it has the following attributes:</p><p>We noticed that the desc (description) attribute of this icon is &quot;search&quot;, then we can locate this widget through the desc attribute, and the code for clicking the search icon is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;Search&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may have noticed that this widget has many other attributes, such as checked, className, clickable, etc. Why not use these attributes to locate the search icon? The answer is that other widgets also have attributes with the same values. Try it and you will find that many other widgets\u2019 checked attributes are the same as search widgets. They are all <code><span class="token boolean">false</span></code>. If we use <code><span class="token function">checked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></code> as the condition, we will find many Widget, and cannot determine which one is the search icon. Therefore, to find the widget we want, the condition of the <strong>selector usually needs to be able to uniquely determine the widget</strong>. We usually use a unique attribute to locate a widget. For example, in this example, there is no other widget whose desc (description) attribute is &quot;search&quot;.</p><p>In addition, for this search icon, the id attribute is also unique, and we can also use <code><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;action_search&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to click on this widget. If a widget has an id attribute, then this attribute is likely to be unique, except for the following situations:</p><ul><li>Many of the id attributes of QQ widgets are &quot;name&quot;, that is, it is difficult to locate a widget by id in the QQ interface</li><li>Widgets in the list, such as QQ contact list, WeChat contact list, etc.</li></ul><p>Although the id attribute is very convenient, it is not always the most convenient. For example, for WeChat and NetEase Cloud Music, the widget id will change every time it is updated, resulting in the same code being incompatible with different versions of WeChat and NetEase Cloud Music.</p><p>In addition to these attributes, there are mainly the following attributes:</p><ul><li><code><span class="token property">className</span></code> Class name. The class name indicates the type of a widget, for example, the text widget is &quot;android.widget.TextView&quot;, the image widget is &quot;android.widget.ImageView&quot;, etc.</li><li><code><span class="token property">packageName</span></code> package name. The package name indicates the name of the application package where the widget is located. For example, the package name of the widget on the QQ interface is &quot;com.tencent.mobileqq&quot;.</li><li><code><span class="token property">bounds</span></code> The range of the widget on the screen.</li><li><code><span class="token property">drawingOrder</span></code> The drawing order of the widget in the parent widget.</li><li>The position of the <code><span class="token property">indexInParent</span></code> widget in the parent widget.</li><li><code><span class="token property">clickable</span></code> Whether the widget is clickable.</li><li>Whether the <code><span class="token property">longClickable</span></code> widget can be long-clicked.</li><li>Whether the <code><span class="token property">checkable</span></code> widget can be checked.</li><li>Whether the <code><span class="token property">checked</span></code> widget can be checked.</li><li>Whether the <code><span class="token property">scrollable</span></code> widget can be slid.</li><li><code><span class="token property">selected</span></code> Whether the widget is selected.</li><li>Whether the <code><span class="token property">editable</span></code> widget is editable.</li><li>Whether the <code><span class="token property">visibleToUser</span></code> widget is visible.</li><li><code><span class="token property">enabled</span></code> Whether the widget is enabled.</li><li><code><span class="token property">depth</span></code> The layout depth of the widget.</li></ul><p>Sometimes only one attribute cannot uniquely determine a widget. At this time, a combination of attributes is needed to complete the positioning, such as <code><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;ImageView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">depth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, through the chain Call to combine conditions.</p><p>Usually you can use these techniques to solve most of the problems. Even if you can&#39;t solve the problem, you can try to generate some selector code through the &quot;Generate Code&quot; function of the layout analysis. The next question is to operate the selected widgets, including:</p><ul><li><code><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> Click. Click on a widget, provided that the clickable attribute of this widget is true</li><li><code><span class="token function">longClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> Long press. Long press a widget, provided that the longClickable property of this widget is true</li><li><code><span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> Set the text, used to set the text of the edit box widget.</li><li><code><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">scrollBackward</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to slide. Slide a widget (list, etc.), provided that the scrollable property of this widget is true</li><li><code><span class="token function">exits</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> determines whether the widget exists</li><li><code><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> wait for the widget to appear</li></ul><p>These operations include most of the widget operations. Based on these, we can easily write a &quot;swipe screen&quot; script (the code is only an example, please do not test in other people&#39;s groups, otherwise it is easy to be kicked):</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Swipe screen...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;send&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clicK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above code can also be written as:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Swipe screen...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;send&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clicK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you operate directly without adding <code><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, the selector will find all <strong>all</strong> eligible widgets and operate them.</p><p>Another more commonly used operation is sliding. The first step of the sliding operation is to find the widget that needs to be swiped. For example, if you want to slide the QQ message list, find the <code><span class="token property">AbsListView</span></code> in the floating window layout hierarchy analysis. This widget is the message list widget, as shown below:</p><p>Long press to view the widget information, notice that its scrollable property is true, and find out its id is &quot;recent_chat_list&quot;, so the code for sliding down the QQ message list is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;recent_chat_list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> is forward sliding, including sliding down and sliding right.</p><p>The introductory tutorial for selectors is here for the time being. For more information, you can view the following documentation and selector advanced.</p><h2 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> selector()</h2><ul><li>Return {UiSelector}</li></ul><p>Create a new selector. But in general, you don&#39;t need to use this function, because you can directly create a selector with the corresponding conditional statement.</p><p>Due to historical reasons, it should not be designed like this (you should not use <code><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> etc. as global functions, but should use <code>By<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code>By<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>) , But this design can only be retained for backward compatibility.</p><p>Such an API design will pollute global variables, and the option of &quot;remove these global functions and use By.***&quot; may be supported in the future.</p><h2 id="uiselector-algorithm-algorithm" tabindex="-1"><a class="header-anchor" href="#uiselector-algorithm-algorithm" aria-hidden="true">#</a> UiSelector.algorithm(algorithm)</h2><p><strong>[v4.1.0 New]</strong></p><ul><li><code><span class="token property">algorithm</span></code> {string} Search algorithm, optional values \u200B\u200Bare: <ul><li><code><span class="token constant">DFS</span></code> depth-first algorithm, the default algorithm of the selector</li><li><code><span class="token constant">BFS</span></code> Breadth First Algorithm</li></ul></li></ul><p>Specify the search algorithm for the selector. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">algorithm</span><span class="token punctuation">(</span><span class="token string">&quot;BFS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Breadth first usually finds the widget faster when the widget is located at a lower level, or when the layout level is not many.</p><h2 id="uiselector-text-str" tabindex="-1"><a class="header-anchor" href="#uiselector-text-str" aria-hidden="true">#</a> UiSelector.text(str)</h2><ul><li><code><span class="token property">str</span></code> {string} widget text</li><li>Return {UiSelector} to return to the selector itself for chain calling</li></ul><p>Attach the filter condition of the widget &quot;text is equal to the string str&quot; to the current selector.</p><p>The text attribute of the widget is the text displayed on the text widget, such as the &quot;WeChat&quot; text in the upper left corner of WeChat.</p><h2 id="uiselector-textcontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-textcontains-str" aria-hidden="true">#</a> UiSelector.textContains(str)</h2><ul><li><code><span class="token property">str</span></code> {string} The string to be included</li></ul><p>Attach the filter condition of the widget &quot;text needs to contain the string str&quot; for the current selector.</p><p>This is a more useful condition. For example, the widget &quot;Everyone is searching...&quot; at the top of the QQ dynamic page and Weibo discovery page can be obtained with <code><span class="token function">textContains</span><span class="token punctuation">(</span><span class="token string">&quot;Everyone is searching&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> .</p><h2 id="uiselector-textstartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-textstartswith-prefix" aria-hidden="true">#</a> UiSelector.textStartsWith(prefix)</h2><ul><li><code><span class="token property">prefix</span></code> {string} prefix</li></ul><p>The filter condition of &quot;text needs to start with prefix&quot; is attached to the current selector.</p><p>This is also a useful condition. For example, to find out the script whose name starts with &quot;QQ&quot; in the Auto.js script list, the code is <code><span class="token function">textStartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;QQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><h2 id="uiselector-textendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-textendswith-suffix" aria-hidden="true">#</a> UiSelector.textEndsWith(suffix)</h2><ul><li>suffix {string} suffix</li></ul><p>Attach the filter condition of the widget &quot;text needs to end with suffix&quot; for the current selector.</p><h2 id="uiselector-textmatches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-textmatches-reg" aria-hidden="true">#</a> UiSelector.textMatches(reg)</h2><ul><li><code><span class="token property">reg</span></code> {string} | {Regex} The regular expression to be satisfied.</li></ul><p>Attach the widget &quot;text needs to meet the condition of regular expression reg&quot; for the current selector.</p>`,60),U={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},A=a('<p>It should be noted that if the regular expression is a string, you need to use <code>\\\\</code> to express <code>\\</code> (that is, the form of Java regular expression), for example, <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span></code> matches multiple digits Number; but it is not needed if you use JavaScript syntax regular expressions, such as <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span></code>. But if the regular expression of a string is used, the string cannot end with &quot;/&quot; and end with &quot;/&quot;, that is, expressions such as <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token string">&quot;/\\\\d+/&quot;</span><span class="token punctuation">)</span></code> cannot be written, otherwise it will be started The &quot;/&quot; and the ending &quot;/&quot; will be ignored.</p><h2 id="uiselector-desc-str" tabindex="-1"><a class="header-anchor" href="#uiselector-desc-str" aria-hidden="true">#</a> UiSelector.desc(str)</h2><ul><li><code><span class="token property">str</span></code> {string} widget text</li><li>Return {UiSelector} to return to the selector itself for chain calling</li></ul><p>Attach the filter condition of the widget &quot;desc equal to the string str&quot; for the current selector.</p><p>The desc (description, full name Content-Description) property of a widget is a description of a widget. For example, the description of the magnifying glass icon in the upper right corner of NetEase Cloud Music is search. To view the description of a widget, you can also use the floating window to view it.</p><p>The desc attribute is also a powerful tool for positioning widgets.</p><h2 id="uiselector-desccontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-desccontains-str" aria-hidden="true">#</a> UiSelector.descContains(str)</h2><ul><li><code><span class="token property">str</span></code> {string} the string to be included</li></ul><p>Attach the filter condition of the widget &quot;desc needs to contain the string str&quot; for the current selector.</p><h2 id="uiselector-descstartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-descstartswith-prefix" aria-hidden="true">#</a> UiSelector.descStartsWith(prefix)</h2><ul><li><code><span class="token property">prefix</span></code> {string} prefix</li></ul><p>Attach the filter condition of the widget &quot;desc needs to start with prefix&quot; for the current selector.</p><h2 id="uiselector-descendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-descendswith-suffix" aria-hidden="true">#</a> UiSelector.descEndsWith(suffix)</h2><ul><li><code><span class="token property">suffix</span></code> {string} suffix</li></ul><p>Attach the filter condition of the widget &quot;desc needs to end with suffix&quot; for the current selector.</p><h2 id="uiselector-descmatches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-descmatches-reg" aria-hidden="true">#</a> UiSelector.descMatches(reg)</h2><ul><li><code><span class="token property">reg</span></code> {string} | {Regex} The regular expression to be satisfied.</li></ul><p>The additional widget &quot;desc needs to meet the condition of regular expression reg&quot; for the current selector.</p>',18),R={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},F=a(`<p>It should be noted that if the regular expression is a string, you need to use <code>\\\\</code> to express <code>\\</code> (that is, the form of Java regular expression), for example, <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span></code> matches multiple digits Number; but it is not needed if you use JavaScript syntax regular expressions, such as <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span></code>. But if the regular expression of a string is used, the string cannot end with &quot;/&quot; and end with &quot;/&quot;, that is, expressions such as <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token string">&quot;/\\\\d+/&quot;</span><span class="token punctuation">)</span></code> cannot be written, otherwise it will be started The &quot;/&quot; and the ending &quot;/&quot; will be ignored.</p><h2 id="uiselector-id-resid" tabindex="-1"><a class="header-anchor" href="#uiselector-id-resid" aria-hidden="true">#</a> UiSelector.id(resId)</h2><ul><li><code><span class="token property">resId</span></code> {string} The id of the widget, starting with &quot;package name: id/&quot;, for example &quot;com.tencent.mm:id/send_btn&quot;. <strong>You can also not specify the package name</strong>. In this case, the package name of the currently running application will be used to complete the id. For example, id(&quot;send_btn&quot;), in the QQ interface, you want to be used as id(&quot;com.tencent.mobileqq:id/send_btn&quot;)</li></ul><p>Attach the filter condition of &quot;id equal to resId&quot; to the current selector.</p><p>The id attribute of a widget is usually used to determine the unique identifier of the widget. If a widget has an id, then using the id to find it is the best way. To view the id of the widget on the screen, you can open the floating window and use the interface tool, and click on the corresponding widget to view it. If the id of the viewed widget is null, it means that the widget does not have an id. In addition, the id of multiple widgets will appear in the list. For example, in the WeChat contact list, the id of each avatar is the same. At this time, the id cannot be used to uniquely determine the widget.</p><p>There are often multiple widgets with id &quot;name&quot; on the QQ interface, and the id of each version on WeChat will change. For these software, it is more difficult to locate the widget with id.</p><h2 id="uiselector-idcontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-idcontains-str" aria-hidden="true">#</a> UiSelector.idContains(str)</h2><ul><li><code><span class="token property">str</span></code> {string} id string to be included</li></ul><p>Attach the filter condition of the widget &quot;id contains the string str&quot; to the current selector. Less used.</p><h2 id="uiselector-idstartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-idstartswith-prefix" aria-hidden="true">#</a> UiSelector.idStartsWith(prefix)</h2><ul><li><code><span class="token property">prefix</span></code> {string} id prefix</li></ul><p>Attach the filter condition that &quot;id needs to start with prefix&quot; for the current selector. Less used.</p><h2 id="uiselector-idendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-idendswith-suffix" aria-hidden="true">#</a> UiSelector.idEndsWith(suffix)</h2><ul><li><code><span class="token property">suffix</span></code> {string} id suffix</li></ul><p>Attach a filter condition that &quot;id needs to end with suffix&quot; for the current selector. Less used.</p><h2 id="uiselector-idmatches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-idmatches-reg" aria-hidden="true">#</a> UiSelector.idMatches(reg)</h2><ul><li>reg {Regex} | {string} id the regular expression to be satisfied</li></ul><p>The additional id needs to satisfy the regular expression.</p><p>It should be noted that if the regular expression is a string, you need to use <code>\\\\</code> to express <code>\\</code> (that is, the form of Java regular expression), for example, <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span></code> matches multiple digits Number; but it is not needed if you use JavaScript syntax regular expressions, such as <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span></code>. But if the regular expression of a string is used, the string cannot end with &quot;/&quot; and end with &quot;/&quot;, that is, expressions such as <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token string">&quot;/\\\\d+/&quot;</span><span class="token punctuation">)</span></code> cannot be written, otherwise it will be started The &quot;/&quot; and the ending &quot;/&quot; will be ignored.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">idMatches</span><span class="token punctuation">(</span><span class="token string">&quot;[a-zA-Z]+&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="uiselector-classname-str" tabindex="-1"><a class="header-anchor" href="#uiselector-classname-str" aria-hidden="true">#</a> UiSelector.className(str)</h2><ul><li><code><span class="token property">str</span></code> {string} widget text</li><li>Return {UiSelector} to return to the selector itself for chain calling</li></ul><p>The filter condition of &quot;className equal to string str&quot; is attached to the current selector.</p><p>The className of a widget represents the category of a widget. For example, the class name of a text widget is android.widget.TextView.</p><p>If the class name of a widget starts with &quot;android.widget.&quot;, this part can be omitted. For example, the text widget can directly use the selector of <code><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span></code>.</p><p>The class names of common widgets are as follows:</p><ul><li><code>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView</code> text widget</li><li><code>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ImageView</code> picture widget</li><li><code>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button</code> button widget</li><li><code>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>EditText</code> input box widget</li><li><code>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>AbsListView</code> list widget</li><li><code>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>LinearLayout</code> linear layout</li><li><code>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>FrameLayout</code> frame layout</li><li><code>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RelativeLayout</code> relative layout</li><li><code>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RelativeLayout</code> relative layout</li><li><code>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView</code> is usually also a list widget</li></ul><h2 id="uiselector-classnamecontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-classnamecontains-str" aria-hidden="true">#</a> UiSelector.classNameContains(str)</h2><ul><li><code><span class="token property">str</span></code> {string} The string to be included</li></ul><p>Attach the filter condition that the widget &quot;className needs to contain the string str&quot; for the current selector.</p><h2 id="uiselector-classnamestartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-classnamestartswith-prefix" aria-hidden="true">#</a> UiSelector.classNameStartsWith(prefix)</h2><ul><li><code><span class="token property">prefix</span></code> {string} prefix</li></ul><p>The filter condition of &quot;className needs to start with prefix&quot; is attached to the current selector.</p><h2 id="uiselector-classnameendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-classnameendswith-suffix" aria-hidden="true">#</a> UiSelector.classNameEndsWith(suffix)</h2><ul><li><code><span class="token property">suffix</span></code> {string} suffix</li></ul><p>The filter condition of &quot;className needs to end with suffix&quot; is attached to the current selector.</p><h2 id="uiselector-classnamematches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-classnamematches-reg" aria-hidden="true">#</a> UiSelector.classNameMatches(reg)</h2><ul><li><code><span class="token property">reg</span></code> {string} | {Regex} The regular expression to be satisfied.</li></ul><p>Add the widget &quot;className needs to meet the condition of regular expression reg&quot; for the current selector.</p>`,39),O={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},N=a('<p>It should be noted that if the regular expression is a string, you need to use <code>\\\\</code> to express <code>\\</code> (that is, the form of Java regular expression), for example, <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span></code> matches multiple digits Number; but it is not needed if you use JavaScript syntax regular expressions, such as <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span></code>. But if the regular expression of a string is used, the string cannot end with &quot;/&quot; and end with &quot;/&quot;, that is, expressions such as <code><span class="token function">textMatches</span><span class="token punctuation">(</span><span class="token string">&quot;/\\\\d+/&quot;</span><span class="token punctuation">)</span></code> cannot be written, otherwise it will be started The &quot;/&quot; and the ending &quot;/&quot; will be ignored.</p><h2 id="uiselector-packagename-str" tabindex="-1"><a class="header-anchor" href="#uiselector-packagename-str" aria-hidden="true">#</a> UiSelector.packageName(str)</h2><ul><li><code><span class="token property">str</span></code> {string} widget text</li><li>Return {UiSelector} to return to the selector itself for chain calling</li></ul><p>Attach the filter condition of the widget &quot;packageName is equal to the string str&quot; to the current selector.</p><p>The packageName of the widget represents the application package name of the interface to which the widget belongs. For example, the package name of WeChat is &quot;com.tencent.mm&quot;, then the packageName of the widgets on the WeChat interface is &quot;com.tencent.mm&quot;.</p><p>To view the package name of an application, you can use the function <code>app<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to get, for example, <code><span class="token function">toast</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token string">&quot;WeChat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>.</p><h2 id="uiselector-packagenamecontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenamecontains-str" aria-hidden="true">#</a> UiSelector.packageNameContains(str)</h2><ul><li><code><span class="token property">str</span></code> {string} The string to be included</li></ul><p>Attach the filter condition of the widget &quot;packageName needs to contain the string str&quot; for the current selector.</p><h2 id="uiselector-packagenamestartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenamestartswith-prefix" aria-hidden="true">#</a> UiSelector.packageNameStartsWith(prefix)</h2><ul><li><code><span class="token property">prefix</span></code> {string} prefix</li></ul><p>The filter condition of &quot;packageName needs to start with prefix&quot; is attached to the current selector.</p><h2 id="uiselector-packagenameendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenameendswith-suffix" aria-hidden="true">#</a> UiSelector.packageNameEndsWith(suffix)</h2><ul><li><code><span class="token property">suffix</span></code> {string} suffix</li></ul><p>Attach the filter condition of the widget &quot;packageName needs to end with suffix&quot; for the current selector.</p><h2 id="uiselector-packagenamematches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenamematches-reg" aria-hidden="true">#</a> UiSelector.packageNameMatches(reg)</h2><ul><li><code><span class="token property">reg</span></code> {string} | {Regex} The regular expression to be satisfied.</li></ul><p>Attach the widget &quot;packageName needs to meet the condition of regular expression reg&quot; for the current selector.</p>',18),I={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},C=a(`<h2 id="uiselector-bounds-left-top-right-bottom" tabindex="-1"><a class="header-anchor" href="#uiselector-bounds-left-top-right-bottom" aria-hidden="true">#</a> UiSelector.bounds(left, top, right, bottom)</h2><ul><li><code><span class="token property">left</span></code> {number} The distance between the left edge of the widget and the left side of the screen</li><li><code><span class="token property">top</span></code> {number} The distance between the top edge of the widget and the top edge of the screen</li><li><code><span class="token property">right</span></code> {number} The distance between the right edge of the widget and the left side of the screen</li><li><code><span class="token property">bottom</span></code> {number} The distance between the bottom edge of the widget and the top edge of the screen</li></ul><p>The bounds property of a widget is the display range of the widget on the screen. We can use this range to position this widget. Although using this method to locate the widget is very accurate for static pages, it is not compatible with devices of different resolutions; at the same time, it cannot achieve the effect for dynamic pages such as list pages, so the use of this selector is not recommended.</p><p>Note that the four numbers of the parameters cannot be filled in at will, and the four borders of the widget must be accurately filled in to find the widget. For example, to click the plus sign in the upper right corner of the QQ main interface, we use layout analysis to view the properties of the widget, as shown below:</p><p>You can see that the bounds property is (951, 67, 1080, 196). At this time, use the code <code><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token number">951</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">,</span> <span class="token number">196</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to click the widget.</p><h2 id="uiselector-boundsinside-left-top-right-bottom" tabindex="-1"><a class="header-anchor" href="#uiselector-boundsinside-left-top-right-bottom" aria-hidden="true">#</a> UiSelector.boundsInside(left, top, right, bottom)</h2><ul><li><code><span class="token property">left</span></code> {number} The distance between the left edge of the range and the left side of the screen</li><li><code><span class="token property">top</span></code> {number} The distance between the top edge of the range and the top edge of the screen</li><li><code><span class="token property">right</span></code> {number} The distance between the right edge of the range and the left side of the screen</li><li><code><span class="token property">bottom</span></code> {number} The distance between the bottom edge of the range and the top edge of the screen</li></ul><p>Attach the condition that the widget &quot;bounds needs to be in the range formed by left, top, right, and bottom&quot; for the current selector.</p><p>This condition is used to restrict the selector to select widgets in a certain area. For example, to find the text widget TextView in the upper half of the screen, the code is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boundsInside</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>width<span class="token punctuation">,</span> device<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Among them, we use <code>device<span class="token punctuation">.</span>width</code> to get the screen width, and <code>device<span class="token punctuation">.</span>height</code> to get the screen height.</p><h2 id="uiselector-boundscontains-left-top-right-bottom" tabindex="-1"><a class="header-anchor" href="#uiselector-boundscontains-left-top-right-bottom" aria-hidden="true">#</a> UiSelector.boundsContains(left, top, right, bottom)</h2><ul><li><code><span class="token property">left</span></code> {number} The distance between the left edge of the range and the left side of the screen</li><li><code><span class="token property">top</span></code> {number} The distance between the top edge of the range and the top edge of the screen *<code><span class="token property">right</span></code> {number} The distance between the right edge of the range and the left side of the screen</li><li><code><span class="token property">bottom</span></code> {number} The distance between the bottom edge of the range and the top edge of the screen</li></ul><p>Attach the condition that the widget &quot;bounds needs to include the range formed by left, top, right, and bottom&quot; for the current selector.</p><p>This condition is used to limit the scope of the widget must include the given scope. For example, given a point (500, 300), the code to find the clickable widget at this point is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">boundsContains</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-drawingorder-order" tabindex="-1"><a class="header-anchor" href="#uiselector-drawingorder-order" aria-hidden="true">#</a> UiSelector.drawingOrder(order)</h2><ul><li>order {number} the drawing order of the widget in the parent view</li></ul><p>Attach the widget &quot;drawingOrder equals order&quot; condition to the current selector.</p><p>drawingOrder is the drawing order of a widget in the parent widget, which can usually be used to distinguish widgets of the same level.</p><p>But this attribute can only be used above Android 7.0.</p><h2 id="uiselector-clickable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-clickable-b-true" aria-hidden="true">#</a> UiSelector.clickable([b = true])</h2><ul><li><code><span class="token property">b</span></code> {Boolean} indicates whether the widget is clickable</li></ul><p>Attach the condition of whether the widget is clickable for the current selector. But not all widgets whose clickable is false can&#39;t really be clicked, it depends on the implementation of the widget. For custom widgets (such as widgets whose display class is named android.view.View), many of the clickable attributes are false, but they can be clicked.</p><p>It should be noted that the parameter <code><span class="token property">b</span></code> can be omitted and it means to select those widgets that can be clicked. For example, <code><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;ImageView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> indicates the condition of the image widget that can be clicked, <code><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;ImageView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">clickable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></code> indicates the condition of the unclickable image widget.</p><h2 id="uiselector-longclickable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-longclickable-b-true" aria-hidden="true">#</a> UiSelector.longClickable([b = true])</h2><ul><li><code><span class="token property">b</span></code> {Boolean} indicates whether the widget can be long pressed</li></ul><p>Attach the condition of whether the widget can be long-pressed for the current selector.</p><h2 id="uiselector-checkable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-checkable-b-true" aria-hidden="true">#</a> UiSelector.checkable([b = true])</h2><ul><li><code><span class="token property">b</span></code> {Boolean} indicates whether the widget can be checked</li></ul><p>Attach the condition of whether the widget can be checked or not for the current selector. Checking is usually for check boxes. For example, there is usually a check box in the upper left corner when multiple images are selected.</p><h2 id="uiselector-selected-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-selected-b-true" aria-hidden="true">#</a> UiSelector.selected([b = true])</h2><ul><li><code><span class="token property">b</span></code> {Boolean} indicates whether the widget is selected</li></ul><p>Attach the condition of whether the widget is selected for the current selector. Selected refers to, for example, when you click the &quot;emoji button&quot; at the bottom of the QQ chat interface, your favorite emoticons will appear. At this time, the &quot;emoji button&quot; is in the selected state, and its selected attribute is true.</p><h2 id="uiselector-enabled-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-enabled-b-true" aria-hidden="true">#</a> UiSelector.enabled([b = true])</h2><ul><li><code><span class="token property">b</span></code> {Boolean} indicates whether the widget is enabled</li></ul><p>Attach the condition of whether the widget is enabled for the current selector. Most widgets are enabled (enabled is true), in the &quot;disabled&quot; state is usually gray and not clickable.</p><h2 id="uiselector-scrollable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-scrollable-b-true" aria-hidden="true">#</a> UiSelector.scrollable([b = true])</h2><ul><li><code><span class="token property">b</span></code> {Boolean} indicates whether the widget can slide</li></ul><p>Attach the condition of whether the widget can slide for the current selector. Sliding includes sliding up and down and sliding left and right.</p><p>You can use this condition to find sliding widgets to slide the interface. For example, the code for sliding the script list of Auto.js is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;android.support.v7.widget.RecyclerView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Or classNameEndsWith(&quot;RecyclerView&quot;).scrollable().findOne().scrollForward();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-editable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-editable-b-true" aria-hidden="true">#</a> UiSelector.editable([b = true])</h2><ul><li><code><span class="token property">b</span></code> {Boolean} indicates whether the widget can be edited</li></ul><p>Attach the condition of whether the widget can be edited for the current selector. Generally, the editable widget is an input box (EditText), but not all input boxes (EditText) can be edited.</p><h2 id="uiselector-multiline-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-multiline-b-true" aria-hidden="true">#</a> UiSelector.multiLine([b = true])</h2><ul><li>b {Boolean} indicates whether the text or input box widget is displayed in multiple lines</li></ul><p>For the current selector, whether the additional widget is text or whether the input box widget is a condition for multi-line display.</p><h2 id="uiselector-findone" tabindex="-1"><a class="header-anchor" href="#uiselector-findone" aria-hidden="true">#</a> UiSelector.findOne()</h2><ul><li>Return <a href="#widgets_based_automation_uiobject">UiObject</a></li></ul><p>According to the filter conditions determined by the current selector, search for the widgets on the screen until a widget that satisfies the conditions appears on the screen, and returns to the widget. If the widget cannot be found, it will search again when the screen content changes until it is found.</p><p>It should be noted that if the described widget does not appear on the screen, the function will block until the described widget appears. Therefore this function will not return <code><span class="token keyword">null</span></code>.</p><p>This function should have been named <code><span class="token function">untilFindOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, but it cannot be modified due to historical reasons. If you want to search the screen only once instead of all the time, use <code><span class="token function">findOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><p>In addition, if there are multiple widgets on the screen that meet the conditions, <code><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> uses depth-first search (DFS) and returns the first widget found by the search algorithm. Note that the order in which the widgets are found can sometimes play a role.</p><h2 id="uiselector-findone-timeout" tabindex="-1"><a class="header-anchor" href="#uiselector-findone-timeout" aria-hidden="true">#</a> UiSelector.findOne(timeout)</h2><ul><li><code><span class="token property">timeout</span></code> {number} search timeout, in milliseconds</li><li>Return <a href="#widgets_based_automation_uiobject">UiObject</a></li></ul><p>According to the filter conditions determined by the current selector, search for the widgets on the screen until a widget that meets the conditions appears on the screen, and return the widget; if no widget is found that meets the conditions within timeout milliseconds, then Terminate the search and return <code><span class="token keyword">null</span></code>.</p><p>This function is similar to <code><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> without parameters, but with a time limit.</p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Start Auto.js</span>
<span class="token function">launchApp</span><span class="token punctuation">(</span><span class="token string">&quot;Auto.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Find out the widget of the log icon within 6 seconds</span>
<span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;action_log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Click if you find the widget</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    w<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">//Otherwise the prompt is not found</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Log icon not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-findonce" tabindex="-1"><a class="header-anchor" href="#uiselector-findonce" aria-hidden="true">#</a> UiSelector.findOnce()</h2><ul><li>Return <a href="#widgets_based_automation_uiobject">UiObject</a></li></ul><p>According to the filter conditions determined by the current selector, search for the widgets on the screen, and return the widget if it finds the widget that meets the conditions; otherwise, it returns <code><span class="token keyword">null</span></code>.</p><h2 id="uiselector-findonce-i" tabindex="-1"><a class="header-anchor" href="#uiselector-findonce-i" aria-hidden="true">#</a> UiSelector.findOnce(i)</h2><ul><li><code><span class="token property">i</span></code> {number} index</li></ul><p>According to the filter conditions determined by the current selector, search for the widgets on the screen and return the i + 1 widget that meets the condition; if no widget is found that meets the condition, or the number of widgets that meet the condition &lt;i, then Return <code><span class="token keyword">null</span></code>.</p><p>Note that the order of widgets here is determined by the search algorithm Depth First Search (DSF).</p><h2 id="uiselector-find" tabindex="-1"><a class="header-anchor" href="#uiselector-find" aria-hidden="true">#</a> UiSelector.find()</h2><ul><li>Return <a href="#widgets_based_automation_uicollection">UiCollection</a></li></ul><p>According to the filtering conditions determined by the current selector, search for the widgets on the screen, find all the widget sets that meet the conditions and return. This search is only performed once, and there is no guarantee that it will be found. Therefore, the returned widget set will be empty.</p><p>Unlike <code><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> or <code><span class="token function">findOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> which only finds one widget and returns one widget, the <code><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function will find all the widgets that meet the conditions and return a set of widgets. You can then operate on the widget collection.</p><p>The empty() function can be used to determine whether the found is empty. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Found it&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Not found\u256D(\u256F^\u2570)\u256E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-untilfind" tabindex="-1"><a class="header-anchor" href="#uiselector-untilfind" aria-hidden="true">#</a> UiSelector.untilFind()</h2><ul><li>Return <a href="#widgets_based_automation_uicollection">UiCollection</a></li></ul><p>According to the filtering conditions determined by the current selector, the widgets on the screen are searched until at least one widget that meets the condition is found, and a collection of all widgets that meet the condition is returned.</p><p>The difference between this function and the <code><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function is that this function will never return an empty set; however, if there are no widgets that meet the conditions on the screen, the function will remain blocked.</p><h2 id="uiselector-exists" tabindex="-1"><a class="header-anchor" href="#uiselector-exists" aria-hidden="true">#</a> UiSelector.exists()</h2><ul><li>Return {Boolean}</li></ul><p>Determine whether there are widgets on the screen that meet the conditions determined by the selector. For example, to perform a certain action when judging the occurrence of a certain text, you can use:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;some text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Actions to be supported</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-waitfor" tabindex="-1"><a class="header-anchor" href="#uiselector-waitfor" aria-hidden="true">#</a> UiSelector.waitFor()</h2><p>Wait for the eligible widgets to appear on the screen; the function will remain blocked until the widgets that meet the conditions appear.</p><p>For example, the code to wait for the text widget containing &quot;hahaha&quot; to appear is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">textContains</span><span class="token punctuation">(</span><span class="token string">&quot;hahaha&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="uiselector-filter-f" tabindex="-1"><a class="header-anchor" href="#uiselector-filter-f" aria-hidden="true">#</a> UiSelector.filter(f)</h2><ul><li><code><span class="token property">f</span></code> {Function} Filter function, the parameter is UiObject, the return value is boolean</li></ul><p>Attach custom filter conditions to the current selector.</p><p>For example, to find out all text widgets on the screen with a text length of 10, the code is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> uc <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> w<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="uiobject" tabindex="-1"><a class="header-anchor" href="#uiobject" aria-hidden="true">#</a> UiObject</h1><p>UiObject represents a widget, through which the properties of the widget can be obtained, and operations such as clicking and long-pressing the widget can also be performed.</p><p>Obtaining a UiObject is usually obtained through functions such as <code><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">findOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> of the selector, or through UiCollection, or through functions such as <code>UiObject<span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code>UiObject<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> A child widget or parent widget of a widget.</p><h2 id="uiobject-click" tabindex="-1"><a class="header-anchor" href="#uiobject-click" aria-hidden="true">#</a> UiObject.click()</h2><ul><li>Return {Boolean}</li></ul><p>Click the widget, and return whether the click was successful.</p><p>If the function returns false, it may be that the widget is not clickable (clickable is false), and the current interface cannot respond to the click, etc.</p><h2 id="uiobject-longclick" tabindex="-1"><a class="header-anchor" href="#uiobject-longclick" aria-hidden="true">#</a> UiObject.longClick()</h2><ul><li>Return {Boolean}</li></ul><p>Long press the widget, and return whether the click was successful.</p><p>If the function returns false, it may be that the widget is not clickable (longClickable is false), and the current interface cannot respond to the click, etc.</p><h2 id="uiobject-settext-text" tabindex="-1"><a class="header-anchor" href="#uiobject-settext-text" aria-hidden="true">#</a> UiObject.setText(text)</h2><ul><li><code><span class="token property">text</span></code> {string} text</li><li>Return {Boolean}</li></ul><p>Set the text content of the input box widget, and return whether the setting is successful.</p><p>This function is only valid for editable input boxes (editable is true).</p><h2 id="uiobject-copy" tabindex="-1"><a class="header-anchor" href="#uiobject-copy" aria-hidden="true">#</a> UiObject.copy()</h2><ul><li>Return {Boolean}</li></ul><p>Copy the selected content of the text in the input box and return whether the operation is successful.</p><p>This function can only be used in the input box widget, and the current input box widget has selected text. You can use the <code><span class="token function">setSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function to set the selected content of the input box.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> et <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Select the first two words</span>
et<span class="token punctuation">.</span><span class="token function">setSelection</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Copy the selected content</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Copy successful&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Copy failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiobject-cut" tabindex="-1"><a class="header-anchor" href="#uiobject-cut" aria-hidden="true">#</a> UiObject.cut()</h2><p>Cut the selected content of the text in the input box and return whether the operation is successful.</p><p>This function can only be used in the input box widget, and the current input box widget has selected text. The output can be set by the <code><span class="token function">setSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> functionEnter the selected content in the box.</p><h2 id="uiobject-paste" tabindex="-1"><a class="header-anchor" href="#uiobject-paste" aria-hidden="true">#</a> UiObject.paste()</h2><ul><li>Return {Boolean}</li></ul><p>Paste the input box widget, paste the clipboard content into the input box, and return whether the operation is successful.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Set the clipboard content to &quot;Hello&quot;</span>
<span class="token function">setClip</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> et <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
et<span class="token punctuation">.</span><span class="token function">paste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiobject-setselection-start-end" tabindex="-1"><a class="header-anchor" href="#uiobject-setselection-start-end" aria-hidden="true">#</a> UiObject.setSelection(start, end)</h2><ul><li><code><span class="token property">start</span></code> {number} the starting position of the selected content</li><li><code><span class="token property">end</span></code> {number} the end position of the selected content (not included)</li><li>Return {Boolean}</li></ul><p>Set the selected text content for the input box widget, and return whether the operation is successful.</p><p>The index is calculated from 0; and the selected content does not contain the character at the end position. For example, if the content of an input box is &quot;123456789&quot;, the code to select the text &quot;4567&quot; is <code>et<span class="token punctuation">.</span><span class="token function">setSelection</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span></code>.</p><p>This function can also be used to set the cursor position. As long as the end of the parameter is equal to start, the cursor in the input box can be set at the start position. For example, <code>et<span class="token punctuation">.</span><span class="token function">setSelection</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code> will set the cursor after the first character.</p><h2 id="uiobject-scrollforward" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollforward" aria-hidden="true">#</a> UiObject.scrollForward()</h2><ul><li>Return {Boolean}</li></ul><p>Perform the operation of sliding forward on the widget and return whether the operation is successful.</p><p>Swiping forward includes swiping right and down. If a widget can both slide to the right and slide down, then the behavior of executing <code><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> is unknown (this is because the Android documentation does not indicate this, and there is no adequate test for reference).</p><h2 id="uiobject-scrollbackward" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollbackward" aria-hidden="true">#</a> UiObject.scrollBackward()</h2><ul><li>Return {Boolean}</li></ul><p>Perform a backward sliding operation on the widget and return whether the operation is successful.</p><p>Swiping backward includes swiping right and down. If a widget can both slide to the right and slide down, then the behavior of executing <code><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> is unknown (this is because the Android documentation does not indicate this, and there is no adequate test for reference).</p><h2 id="uiobject-select" tabindex="-1"><a class="header-anchor" href="#uiobject-select" aria-hidden="true">#</a> UiObject.select()</h2><ul><li>Return {Boolean}</li></ul><p>Perform a &quot;select&quot; operation on the widget and return whether the operation is successful. &quot;Selected&quot; is related to the property of <code><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, but this operation is rarely used.</p><h2 id="uiobject-collapse" tabindex="-1"><a class="header-anchor" href="#uiobject-collapse" aria-hidden="true">#</a> UiObject.collapse()</h2><ul><li>Return {Boolean}</li></ul><p>Perform a folding operation on the widget and return whether the operation is successful.</p><h2 id="uiobject-expand" tabindex="-1"><a class="header-anchor" href="#uiobject-expand" aria-hidden="true">#</a> UiObject.expand()</h2><ul><li>Return {Boolean}</li></ul><p>Perform operations on the widget and return whether the operation was successful.</p><h2 id="uiobject-show" tabindex="-1"><a class="header-anchor" href="#uiobject-show" aria-hidden="true">#</a> UiObject.show()</h2><p>Perform display operations on all widgets in the collection and return whether all operations are successful.</p><h2 id="uiobject-scrollup" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollup" aria-hidden="true">#</a> UiObject.scrollUp()</h2><p>Perform an upward sliding operation on all widgets in the collection, and return whether all the operations are successful.</p><h2 id="uiobject-scrolldown" tabindex="-1"><a class="header-anchor" href="#uiobject-scrolldown" aria-hidden="true">#</a> UiObject.scrollDown()</h2><p>Perform a downward slide operation on all widgets in the collection, and return whether all the operations are successful.</p><h2 id="uiobject-scrollleft" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollleft" aria-hidden="true">#</a> UiObject.scrollLeft()</h2><p>Perform a left-slide operation on all widgets in the collection, and return whether all the operations are successful.</p><h2 id="uiobject-scrollright" tabindex="-1"><a class="header-anchor" href="#uiobject-scrollright" aria-hidden="true">#</a> UiObject.scrollRight()</h2><h2 id="children" tabindex="-1"><a class="header-anchor" href="#children" aria-hidden="true">#</a> children()</h2><ul><li>Return <a href="#widgets_based_automation_uicollection">UiCollection</a></li></ul><p>Returns the widget collection composed of all the child widgets of this widget. Can be used to traverse the child widgets of a widget, for example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="childcount" tabindex="-1"><a class="header-anchor" href="#childcount" aria-hidden="true">#</a> childCount()</h2><ul><li>Return {number}</li></ul><p>Returns the number of child widgets.</p><h2 id="child-i" tabindex="-1"><a class="header-anchor" href="#child-i" aria-hidden="true">#</a> child(i)</h2><ul><li>i {number} child widget index</li><li>Return {UiObject}</li></ul><p>Returns the i+1th child widget. If i&gt;= the number of widgets or less than 0, an exception is thrown.</p><p>It should be noted that due to the layout capture problem, this function may return <code><span class="token keyword">null</span></code>, that is, a child widget may not be obtained.</p><p>Examples of traversing child widgets:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> child <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parent" tabindex="-1"><a class="header-anchor" href="#parent" aria-hidden="true">#</a> parent()</h2><ul><li>Return {UiObject}</li></ul><p>Returns the parent widget of this widget. If the widget has no parent widget, <code><span class="token keyword">null</span></code> is returned.</p><h2 id="bounds" tabindex="-1"><a class="header-anchor" href="#bounds" aria-hidden="true">#</a> bounds()</h2>`,165),W={href:"https://hyb1996.github.io/AutoJs-Docs/widgets-based-automation.html#widgets_based_automation_rect",target:"_blank",rel:"noopener noreferrer"},B={href:"https://hyb1996.github.io/AutoJs-Docs/widgets-based-automation.html#widgets_based_automation_rect",target:"_blank",rel:"noopener noreferrer"},E=a(`<p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;Auto.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;The range of the widget on the screen is&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If a widget itself cannot be clicked by <code><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, then we can use the <code><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function to get its coordinates, and then use the coordinates to click. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;Open the side menu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">click</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">centerX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">centerY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//If you use root privileges, use Tap(b.centerX(), b.centerY());</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="boundsinparent" tabindex="-1"><a class="header-anchor" href="#boundsinparent" aria-hidden="true">#</a> boundsInParent()</h2>`,5),Q={href:"https://hyb1996.github.io/AutoJs-Docs/widgets-based-automation.html#widgets_based_automation_rect",target:"_blank",rel:"noopener noreferrer"},V={href:"https://hyb1996.github.io/AutoJs-Docs/widgets-based-automation.html#widgets_based_automation_rect",target:"_blank",rel:"noopener noreferrer"},L=a(`<h2 id="drawingorder" tabindex="-1"><a class="header-anchor" href="#drawingorder" aria-hidden="true">#</a> drawingOrder()</h2><ul><li>Return {number}</li></ul><p>Returns the drawing order of the widget in the parent widget. This function is only valid on Android 7.0 and above, and it will return 0 when called in versions below 7.0.</p><h2 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> id()</h2><ul><li>Return {string}</li></ul><p>Get the id of the widget. If a widget does not have an id, it returns <code><span class="token keyword">null</span></code>.</p><h2 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> text()</h2><ul><li>Return {string}</li></ul><p>Get the text of the widget, if the widget has no text, return <code><span class="token string">&quot;&quot;</span></code>.</p><h2 id="findbytext-str" tabindex="-1"><a class="header-anchor" href="#findbytext-str" aria-hidden="true">#</a> findByText(str)</h2><ul><li><code><span class="token property">str</span></code> {string} text</li><li>Return <a href="#widgets_based_automation_uicollection">UiCollection</a></li></ul><p>Recursively find and return text or description (desc)** containing** this text str in the child widgets according to the text text, and return the collection of them.</p><p>This function will search for the widget whose text or desc contains str in the child widget, grandchild widget, great-grandchild widget... of the current widget, and return a collection of their combination.</p><h2 id="findone-selector" tabindex="-1"><a class="header-anchor" href="#findone-selector" aria-hidden="true">#</a> findOne(selector)</h2><ul><li><code><span class="token property">selector</span></code> <a href="#widgets_based_automation_uiselector">UiSelector</a></li><li>Return <a href="#widgets_based_automation_uiobject">UiObject</a></li></ul><p>According to the selector selector, search for the widget that meets the conditions of the selector in the child widgets, grandchildren... of the widget, and return the first widget found; if no widget is found, it returns <code><span class="token keyword">null</span></code>.</p><p>For example, for the Kuan dynamic list, we can traverse its sub-widgets (each dynamic list item), and find the number of likes and icons in each sub-widget in turn. For the likes whose number of likes is less than 10:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Find the dynamic list</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;recycler_view&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Traverse the dynamic</span>
list<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Find the like icon</span>
    <span class="token keyword">var</span> like <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;feed_action_view_like&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Find out the number of likes</span>
    <span class="token keyword">var</span> likeCount <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;text_view&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//If these two widgets are not found, do not continue</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>like <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> likeCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//Determine whether the number of likes is less than 10</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>likeCount<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//like</span>
        like<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-selector" tabindex="-1"><a class="header-anchor" href="#find-selector" aria-hidden="true">#</a> find(selector)</h2><ul><li><code><span class="token property">selector</span></code> <a href="#widgets_based_automation_uiselector">UiSelector</a></li><li>Return <a href="#widgets_based_automation_uicollection">UiCollection</a></li></ul><p>According to the selector selector, search for the widget that meets the conditions of the selector in the child widgets, grandchildren... of the widget, and return a collection of their combinations.</p><h1 id="uicollection" tabindex="-1"><a class="header-anchor" href="#uicollection" aria-hidden="true">#</a> UiCollection</h1><p>UiCollection, a collection of widgets, objects returned by the <code><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">untilFind</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> methods of the selector.</p><p>UiCollection &quot;inherited&quot; from the array, it is actually an array of UiObject, so you can use the functions and properties of the array, for example, use the length property to get the size of the UiCollection, and use the forEach function to traverse the UiCollection.</p><p>For example, the code that uses forEach to traverse all text widgets on the screen and print out the text content is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tv</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tv<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span>tv<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use the traditional array traversal method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> uc <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>uc<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> tv <span class="token operator">=</span> uc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tv<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span>tv<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each element of UiCollection is UiObject, we can take out his element to operate, for example, take out the first UiObject and click the code is <code>ui<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>. If you want to operate on all the elements of the collection, you can directly call the corresponding function on the collection, such as <code>uc<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, this code will perform a click operation on all UiObjects in the collection and return whether all the UiObjects are clicked successfully.</p><p>Therefore, UiCollection has all UiObject functions for widgetling widgets, including <code><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">longClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, etc., so I won\u2019t repeat them.</p><h2 id="uicollection-size" tabindex="-1"><a class="header-anchor" href="#uicollection-size" aria-hidden="true">#</a> UiCollection.size()</h2><ul><li>Return {number}</li></ul><p>Returns the number of widgets in the collection.</p><p>Function left over from history, equivalent to the property length.</p><h2 id="uicollection-get-i" tabindex="-1"><a class="header-anchor" href="#uicollection-get-i" aria-hidden="true">#</a> UiCollection.get(i)</h2><ul><li><code><span class="token property">i</span></code> {number} index</li><li>Back <a href="#widgets_based_automation_uiobject">UiObject</a></li></ul><p>Returns the i+1th widget (UiObject) in the collection.</p><p>For functions left over from history, it is recommended to directly use array subscripts to access elements.</p><h2 id="uicollection-each-func" tabindex="-1"><a class="header-anchor" href="#uicollection-each-func" aria-hidden="true">#</a> UiCollection.each(func)</h2><ul><li><code><span class="token property">func</span></code> {Function} Traverse function, the parameter is UiObject.</li></ul><p>Traverse the collection.</p>`,41),M=e("code",null,[e("span",{class:"token property"},"forEach")],-1),P={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",target:"_blank",rel:"noopener noreferrer"},D=a(`<h2 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> empty()</h2><ul><li>Return {Boolean}</li></ul><p>Returns whether the widget collection is empty.</p><h2 id="nonempty" tabindex="-1"><a class="header-anchor" href="#nonempty" aria-hidden="true">#</a> nonEmpty()</h2><ul><li>Return {Boolean}</li></ul><p>Returns whether the widget collection is non-empty.</p><h2 id="uicollection-find-selector" tabindex="-1"><a class="header-anchor" href="#uicollection-find-selector" aria-hidden="true">#</a> UiCollection.find(selector)</h2><ul><li><code><span class="token property">selector</span></code> <a href="#widgets_based_automation_uiselector">UiSelector</a></li><li>Return <a href="#widgets_based_automation_uicollection">UiCollection</a></li></ul><p>According to the conditions determined by the selector, find all the widgets that meet the conditions in the widgets, child widgets, grandchildren... of the widget set and return the found widget set.</p><p>Note that this will recursively traverse all the widgets and their child widgets in the widget collection. It is different from the <code><span class="token property">filter</span></code> function of arrays.</p><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//In the collection</span>
<span class="token keyword">var</span> clickableNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">clickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uicollection-findone-selector" tabindex="-1"><a class="header-anchor" href="#uicollection-findone-selector" aria-hidden="true">#</a> UiCollection.findOne(selector)</h2><ul><li><code><span class="token property">selector</span></code> <a href="#widgets_based_automation_uiselector">UiSelector</a></li><li>Return <a href="#widgets_based_automation_uiobject">UiObject</a></li></ul><p>According to the selector selector, search for the widget that meets the conditions of the selector in the child widgets, grandchildren... of the widgets in the widget set, and return the first widget found; if no widget is found that meets the conditions, return <code><span class="token keyword">null</span></code> .</p><h1 id="rect" tabindex="-1"><a class="header-anchor" href="#rect" aria-hidden="true">#</a> Rect</h1><p><code>UiObject<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, the object returned by <code>UiObject<span class="token punctuation">.</span><span class="token function">boundsInParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>. Represents a rectangle (range).</p><h2 id="rect-left" tabindex="-1"><a class="header-anchor" href="#rect-left" aria-hidden="true">#</a> Rect.left</h2><ul><li>{number}</li></ul><p>The x coordinate of the left boundary of the rectangle,</p><h2 id="rect-right" tabindex="-1"><a class="header-anchor" href="#rect-right" aria-hidden="true">#</a> Rect.right</h2><ul><li>{number}</li></ul><p>The x coordinate of the right boundary of the rectangle,</p><h2 id="rect-top" tabindex="-1"><a class="header-anchor" href="#rect-top" aria-hidden="true">#</a> Rect.top</h2><ul><li>{number}</li></ul><p>The y coordinate of the upper boundary of the rectangle,</p><h2 id="rect-bottom" tabindex="-1"><a class="header-anchor" href="#rect-bottom" aria-hidden="true">#</a> Rect.bottom</h2><ul><li>{number}</li></ul><p>The y coordinate of the lower boundary of the rectangle,</p><h2 id="rect-centerx" tabindex="-1"><a class="header-anchor" href="#rect-centerx" aria-hidden="true">#</a> Rect.centerX()</h2><ul><li>Return {number}</li></ul><p>The x coordinate of the midpoint of the rectangle.</p><h2 id="rect-centery" tabindex="-1"><a class="header-anchor" href="#rect-centery" aria-hidden="true">#</a> Rect.centerY()</h2><ul><li>Return {number}</li></ul><p>The y coordinate of the midpoint of the rectangle.</p><h2 id="rect-width" tabindex="-1"><a class="header-anchor" href="#rect-width" aria-hidden="true">#</a> Rect.width()</h2><ul><li>Return {number}</li></ul><p>The width of the rectangle. Usually can be used as the width of the widget.</p><h2 id="rect-height" tabindex="-1"><a class="header-anchor" href="#rect-height" aria-hidden="true">#</a> Rect.height()</h2><ul><li>Return {number}</li></ul><p>The height of the rectangle. Usually can be used as the height of the widget.</p><h2 id="rect-contains-r" tabindex="-1"><a class="header-anchor" href="#rect-contains-r" aria-hidden="true">#</a> Rect.contains(r)</h2><ul><li>r <a href="#widgets_based_automation_rect">Rect</a></li></ul><p>Returns whether it contains another rectangle r. Containing means that the rectangle r is inside the rectangle (including the case where the boundary overlaps).</p><h2 id="rect-intersect-r" tabindex="-1"><a class="header-anchor" href="#rect-intersect-r" aria-hidden="true">#</a> Rect.intersect(r)</h2><ul><li>r <a href="#widgets_based_automation_rect">Rect</a></li></ul><p>Returns whether it intersects with another rectangle.</p><h1 id="uiselectoradvanced" tabindex="-1"><a class="header-anchor" href="#uiselectoradvanced" aria-hidden="true">#</a> UiSelectorAdvanced</h1><p>To be continued.</p>`,49);function J(Y,z){const t=p("ExternalLinkIcon");return i(),c("div",null,[r,e("ul",null,[e("li",null,[e("a",u,[n("AccessibilityService"),s(t)])])]),d,e("p",null,[n("See "),e("a",h,[n("AccessibilityService"),s(t)]),n(".")]),k,f,g,e("p",null,[n("An array of all current windows ("),e("a",b,[n("AccessibilityWindowInfo"),s(t)]),n("), which may include status bar, input method, current application window, pop-up window, floating window, Split-screen application windows, etc. The layout information of each window can be obtained separately.")]),m,e("ul",null,[e("li",null,[w,n(" {Function} The parameter is the window ("),e("a",v,[n("AccessibilityWindowInfo"),s(t)]),n("), the return value is a Boolean function.")])]),x,e("p",null,[e("strong",null,[n("[Added in "),e("a",y,[n("Pro 8.8.0"),s(t)]),n("]")])]),q,e("p",null,[e("strong",null,[n("[Added in "),e("a",j,[n("Pro 8.8.0"),s(t)]),n("]")])]),_,e("p",null,[e("strong",null,[n("[Added in "),e("a",T,[n("Pro 8.8.0"),s(t)]),n("]")])]),S,e("p",null,[n("For regular expressions, you can check "),e("a",U,[n("Regular Expressions-Novice Tutorial"),s(t)]),n(".")]),A,e("p",null,[n("For regular expressions, you can check "),e("a",R,[n("Regular Expressions-Novice Tutorial"),s(t)]),n(".")]),F,e("p",null,[n("For regular expressions, you can check "),e("a",O,[n("Regular Expressions-Novice Tutorial"),s(t)]),n(".")]),N,e("p",null,[n("For regular expressions, you can check "),e("a",I,[n("Regular Expressions-Novice Tutorial"),s(t)]),n(".")]),C,e("ul",null,[e("li",null,[n("Return "),e("a",W,[n("Rect"),s(t)])])]),e("p",null,[n("Returns the range of the widget on the screen. Its value is a "),e("a",B,[n("Rect"),s(t)]),n(" object.")]),E,e("ul",null,[e("li",null,[n("Return "),e("a",Q,[n("Rect"),s(t)])])]),e("p",null,[n("Returns the range of the widget in the parent widget. Its value is a "),e("a",V,[n("Rect"),s(t)]),n(" object.")]),L,e("p",null,[n("Function left over from history, equivalent to "),M,n(". Refer to "),e("a",P,[n("forEach"),s(t)]),n(".")]),D])}const K=o(l,[["render",J],["__file","widgetsBasedAutomation.html.vue"]]);export{K as default};
