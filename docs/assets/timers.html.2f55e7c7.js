import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as e,e as s}from"./app.6aa2b576.js";const t={},l=s(`<h1 id="timers" tabindex="-1"><a class="header-anchor" href="#timers" aria-hidden="true">#</a> timers</h1><blockquote><p>Stability: 2 - Stable</p></blockquote><p>The timers module exposes a global API for calling scheduling functions at some future time. Because the timer functions are global, there is no need to call timers using this API.***</p><p>The timer function in Auto.js implements an API similar to the timer provided by the Web browser, except that it uses a different internal implementation that is built on the Android Looper-Handler message loop mechanism. The implementation mechanism is more similar to Node.js.</p><p>For example, to send the message &quot;hello&quot; after 5 seconds:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is important to note that these timers are still single-threaded. If the body of the script has a time-consuming operation or a dead loop, the timer set will not be executed in time, e.g.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// the statement here will be executed after 15 seconds instead of 5 seconds</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//pause for 10 seconds</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And again.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// The statement here will never be executed</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//dead loop</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setinterval-callback-delay-args" tabindex="-1"><a class="header-anchor" href="#setinterval-callback-delay-args" aria-hidden="true">#</a> setInterval(callback, delay[, . .args])</h2><ul><li><code><span class="token property">callback</span></code> {Function} The function to call when the timer reaches a point.</li><li><code><span class="token property">delay</span></code> {number} The number of milliseconds to wait before calling callback.</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any} Optional argument to be passed when calling the callback.</li></ul><p>The callback is scheduled to repeat every delay milliseconds. Returns an id for clearInterval().</p><p>When delay is less than 0, delay will be set to 0.</p><h2 id="settimeout-callback-delay-args" tabindex="-1"><a class="header-anchor" href="#settimeout-callback-delay-args" aria-hidden="true">#</a> setTimeout(callback, delay[, . .args])</h2><ul><li><code><span class="token property">callback</span></code> {Function} The function to be called when the timer reaches the point.</li><li><code><span class="token property">delay</span></code> {number} The number of milliseconds to wait before calling callback.</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any} Optional arguments to be passed when calling the callback.</li></ul><p>A single callback scheduled to be executed after the delay milliseconds. Returns an id for clearTimeout().</p><p>The callback may not be called exactly at the delay millisecond. Auto.js cannot guarantee exactly when callbacks will be fired, nor can it guarantee their order. Callbacks will be called as close to the specified time as possible.</p><p>When delay is less than 0, delay will be set to 0.</p><h2 id="setimmediate-callback-args" tabindex="-1"><a class="header-anchor" href="#setimmediate-callback-args" aria-hidden="true">#</a> setImmediate(callback[, . . args])</h2><ul><li><code><span class="token property">callback</span></code> {Function} The function to be called at the end of the current round of the Looper loop.</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any} Optional argument to be passed when calling the callback.</li></ul><p>The callback is scheduled to be executed immediately, it is triggered after the I/O event callback. Returns an id for clearImmediate().</p><p>When setImmediate() is called multiple times, the callback functions are executed sequentially in the order they were created. Each event loop iteration processes the entire callback queue. If an immediate timer is queued by an executing callback, the timer will not be triggered until the next event loop iteration.</p><p>The setImmediate(), setInterval(), and setTimeout() methods return the id of the timer that represents the scheduled timer each time. They can be used to cancel the timer and prevent triggering.</p><h2 id="clearinterval-id" tabindex="-1"><a class="header-anchor" href="#clearinterval-id" aria-hidden="true">#</a> clearInterval(id)</h2><ul><li><code><span class="token property">id</span></code> {number} The id returned by a setInterval().</li></ul><p>Cancels a recurring timer task created by setInterval().</p><p>Example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// send a hello every 5 seconds</span>
<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Cancel the loop after 1 minute</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cleartimeout-id" tabindex="-1"><a class="header-anchor" href="#cleartimeout-id" aria-hidden="true">#</a> clearTimeout(id)</h2><ul><li><code><span class="token property">id</span></code> {number} The id returned by a setTimeout().</li></ul><p>Cancel a timed task created by setTimeout().</p><h2 id="clearimmediate-id" tabindex="-1"><a class="header-anchor" href="#clearimmediate-id" aria-hidden="true">#</a> clearImmediate(id)</h2><ul><li><code><span class="token property">id</span></code> {number} The id returned by setImmediate().</li></ul><p>Cancels an Immediate object created by setImmediate().</p>`,35),i=[l];function c(o,p){return a(),e("div",null,i)}const d=n(t,[["render",c],["__file","timers.html.vue"]]);export{d as default};
