import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as n,e as a}from"./app.6aa2b576.js";const t={},s=a('<h1 id="keys" tabindex="-1"><a class="header-anchor" href="#keys" aria-hidden="true">#</a> keys</h1><p>The Keys emulation section provides some global functions that emulate physical keys, including Home, Volume, Photo, etc. Some functions depend on accessibility services, and some depend on root privileges.</p><p>In general, functions that start with a capital letter depend on root privileges. When executing such functions, if you do not have root privileges, the function will have no effect after execution and will output a warning in the console.</p><h2 id="back" tabindex="-1"><a class="header-anchor" href="#back" aria-hidden="true">#</a> back()</h2><ul><li>Returns {boolean}</li></ul><p>Simulates pressing the return key. Returns whether the execution was successful. This function relies on accessibility services.</p><h2 id="home" tabindex="-1"><a class="header-anchor" href="#home" aria-hidden="true">#</a> home()</h2><ul><li>Returns {boolean}</li></ul><p>Simulates pressing the Home key. Returns whether the execution was successful. This function depends on the accessibility service.</p><h2 id="powerdialog" tabindex="-1"><a class="header-anchor" href="#powerdialog" aria-hidden="true">#</a> powerDialog()</h2><ul><li>Returns {boolean}</li></ul><p>Pops up the power button menu. Returns whether the execution was successful. This function depends on the accessibility service.</p><h2 id="notifications" tabindex="-1"><a class="header-anchor" href="#notifications" aria-hidden="true">#</a> notifications()</h2><ul><li>Returns {boolean}</li></ul><p>Pull out the notification bar. Returns whether the execution was successful. This function depends on the accessibility service.</p><h2 id="quicksettings" tabindex="-1"><a class="header-anchor" href="#quicksettings" aria-hidden="true">#</a> quickSettings()</h2><ul><li>Rtn {boolean}</li></ul><p>Show quick settings (pull down the notification bar to the bottom). Returns whether execution was successful. This function depends on the accessibility service.</p><h2 id="recents" tabindex="-1"><a class="header-anchor" href="#recents" aria-hidden="true">#</a> recents()</h2><ul><li>Returns {boolean}</li></ul><p>Show recent tasks. Returns whether the execution was successful. This function relies on accessibility services.</p><h2 id="splitscreen" tabindex="-1"><a class="header-anchor" href="#splitscreen" aria-hidden="true">#</a> splitScreen()</h2><ul><li>Return {boolean}</li></ul><p>Split screen. Returns whether the execution was successful. This function depends on the accessibility service and requires the system&#39;s own support.</p><h2 id="home-1" tabindex="-1"><a class="header-anchor" href="#home-1" aria-hidden="true">#</a> Home()</h2><p>Simulates pressing the Home button. This function depends on root privileges.</p><h2 id="back-1" tabindex="-1"><a class="header-anchor" href="#back-1" aria-hidden="true">#</a> Back()</h2><p>Simulates pressing the back button. This function depends on root privileges.</p><h2 id="power" tabindex="-1"><a class="header-anchor" href="#power" aria-hidden="true">#</a> Power()</h2><p>Simulate pressing the power button. This function depends on root privileges.</p><h2 id="menu" tabindex="-1"><a class="header-anchor" href="#menu" aria-hidden="true">#</a> Menu()</h2><p>Simulate pressing the menu key. This function depends on root privileges.</p><h2 id="volumeup" tabindex="-1"><a class="header-anchor" href="#volumeup" aria-hidden="true">#</a> VolumeUp()</h2><p>Press the volume up key. This function depends on root privileges.</p><h2 id="volumedown" tabindex="-1"><a class="header-anchor" href="#volumedown" aria-hidden="true">#</a> VolumeDown()</h2><p>Press the volume up key. This function depends on root privileges.</p><h2 id="camera" tabindex="-1"><a class="header-anchor" href="#camera" aria-hidden="true">#</a> Camera()</h2><p>Simulate pressing the camera key.</p><h2 id="volumeup-1" tabindex="-1"><a class="header-anchor" href="#volumeup-1" aria-hidden="true">#</a> VolumeUp()</h2><p>Simulate pressing the physical key up. This function depends on root privilege.</p><h2 id="down" tabindex="-1"><a class="header-anchor" href="#down" aria-hidden="true">#</a> Down()</h2><p>Simulate pressing the physical button down. This function depends on root privileges.</p><h2 id="left" tabindex="-1"><a class="header-anchor" href="#left" aria-hidden="true">#</a> Left()</h2><p>Simulate pressing the left physical button. This function depends on root privileges.</p><h2 id="right" tabindex="-1"><a class="header-anchor" href="#right" aria-hidden="true">#</a> Right()</h2><p>Simulate pressing the physical button right. This function depends on root privileges.</p><h2 id="ok" tabindex="-1"><a class="header-anchor" href="#ok" aria-hidden="true">#</a> OK()</h2><p>Simulate pressing the physical button OK. This function depends on root privileges.</p><h2 id="text-text" tabindex="-1"><a class="header-anchor" href="#text-text" aria-hidden="true">#</a> Text(text)</h2><ul><li>text {string} The text to be entered, only in English or English symbols. Enter the text text. e.g. <code><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></li></ul><h2 id="keycode-code" tabindex="-1"><a class="header-anchor" href="#keycode-code" aria-hidden="true">#</a> KeyCode(code)</h2><ul><li>code {number} | {string} The numeric code or name of the key to be pressed. See the following table. Simulates a physical keystroke. For example, <code><span class="token function">KeyCode</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span></code> and <code><span class="token function">KeyCode</span><span class="token punctuation">(</span><span class="token string">&quot;KEYCODE_A&quot;</span><span class="token punctuation">)</span></code> are presses of the A key.</li></ul><h1 id="appendix-keycode-cross-reference-table" tabindex="-1"><a class="header-anchor" href="#appendix-keycode-cross-reference-table" aria-hidden="true">#</a> Appendix: KeyCode Cross Reference Table</h1><p>KeyCode KeyEvent Value</p><ul><li>KEYCODE_MENU 1</li><li>KEYCODE_SOFT_RIGHT 2</li><li>KEYCODE_HOME 3</li><li>KEYCODE_BACK 4</li><li>KEYCODE_CALL 5</li><li>KEYCODE_ENDCALL 6<br> 6 * KEYCODE_0 7</li><li>KEYCODE_1 8</li><li>KEYCODE_2 9</li><li>KEYCODE_3 10</li><li>KEYCODE_4 11</li><li>KEYCODE_5 12</li><li>KEYCODE_6 13</li><li>KEYCODE_7 14</li><li>KEYCODE_8 15</li><li>KEYCODE_9 16</li><li>KEYCODE_STAR 17</li><li>KEYCODE_POUND 18</li><li>KEYCODE_DPAD_UP 19</li><li>KEYCODE_DPAD_DOWN 20</li><li>KEYCODE_DPAD_LEFT 21</li><li>KEYCODE_DPAD_RIGHT 22</li><li>KEYCODE_DPAD_CENTER 23</li><li>KEYCODE_VOLUME_UP 24</li><li>KEYCODE_VOLUME_DOWN 25</li><li>KEYCODE_POWER 26</li><li>KEYCODE_CAMERA 27</li><li>KEYCODE_CLEAR 28<br> 28 * KEYCODE_A 29<br> 28 * KEYCODE_A 29 * KEYCODE_B 30</li><li>KEYCODE_C 31</li><li>KEYCODE_D 32</li><li>KEYCODE_E 33</li><li>KEYCODE_F 34</li><li>KEYCODE_G 35</li><li>KEYCODE_H 36</li><li>KEYCODE_I 37</li><li>KEYCODE_J 38</li><li>KEYCODE_K 39</li><li>KEYCODE_L 40</li><li>KEYCODE_M 41</li><li>KEYCODE_N 42<br> 42 * KEYCODE_O<br> 43 * KEYCODE_P</li><li>KEYCODE_Q 45</li><li>KEYCODE_R 46<br> 46 * KEYCODE_S 47<br> 47 * KEYCODE_T<br> 48 * KEYCODE_U 49<br> 49 * KEYCODE_V 50</li><li>KEYCODE_W 51</li><li>KEYCODE_X 52</li><li>KEYCODE_Y 53<br> 53 * KEYCODE_Z 54</li><li>KEYCODE_COMMA 55</li><li>KEYCODE_PERIOD 56</li><li>KEYCODE_ALT_LEFT 57<br> 57 * KEYCODE_ALT_RIGHT 58<br> 58 * KEYCODE_SHIFT_LEFT 59<br> 59 * KEYCODE_SHIFT_RIGHT 60</li><li>KEYCODE_TAB 61</li><li>KEYCODE_SPACE 62<br> 63 * KEYCODE_SYM<br> 63 * KEYCODE_EXPLORER 64</li><li>KEYCODE_ENVELOPE 65</li><li>KEYCODE_ENTER 66</li><li>KEYCODE_DEL 67</li><li>KEYCODE_GRAVE 68</li><li>KEYCODE_MINUS 69<br> 69 * KEYCODE_EQUALS 70</li><li>KEYCODE_LEFT_BRACKET 71</li><li>KEYCODE_RIGHT_BRACKET 72<br> 72 * KEYCODE_BACKSLASH 73</li><li>KEYCODE_SEMICOLON 74</li><li>KEYCODE_APOSTROPHE 75</li><li>KEYCODE_SLASH 76</li><li>KEYCODE_AT 77</li><li>KEYCODE_NUM 78</li><li>KEYCODE_HEADSETHOOK 79</li><li>KEYCODE_FOCUS 80</li><li>KEYCODE_PLUS 81<br> 81 * KEYCODE_MENU 82</li><li>KEYCODE_NOTIFICATION 83<br> 83 * KEYCODE_SEARCH 84<br> 84 * TAG_LAST_ KEYCODE 85</li></ul>',55),l=[s];function o(r,h){return i(),n("div",null,l)}const d=e(t,[["render",o],["__file","keys.html.vue"]]);export{d as default};
