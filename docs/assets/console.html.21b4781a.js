import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as p,a as n,b as s,d as t,e as a,r as l}from"./app.6aa2b576.js";const c={},r=a('<h1 id="console" tabindex="-1"><a class="header-anchor" href="#console" aria-hidden="true">#</a> console</h1><blockquote><p>Stability: 2 - Stable</p></blockquote><p>The Console module provides a console for debugging similar to the one used in web browsers. It is used to output some debugging information, intermediate results, etc. Some of the functions in the console module can also be used directly as global functions, such as log, print, etc.</p><h2 id="console-show" tabindex="-1"><a class="header-anchor" href="#console-show" aria-hidden="true">#</a> console.show()</h2><p>Show the console. This will display a hover window of the console (requires hover permission).</p><h2 id="console-hide" tabindex="-1"><a class="header-anchor" href="#console-hide" aria-hidden="true">#</a> console.hide()</h2><p>Hide the console hover window.</p><h2 id="console-clear" tabindex="-1"><a class="header-anchor" href="#console-clear" aria-hidden="true">#</a> console.clear()</h2><p>Clears the console.</p><h2 id="console-log-data-args" tabindex="-1"><a class="header-anchor" href="#console-log-data-args" aria-hidden="true">#</a> console.log([data][, . .args])</h2><ul><li><code><span class="token property">data</span></code> {any}</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any}</li></ul>',11),u={href:"http://man7.org/linux/man-pages/man3/printf.3.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count: %d&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// print: count: 5 to stdout</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count:&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// print: count: 5 to stdout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See util.format() for details.</p><p>This function can also be used as a global function.</p><h2 id="console-verbose-data-args" tabindex="-1"><a class="header-anchor" href="#console-verbose-data-args" aria-hidden="true">#</a> console.verbose([data][, . .args])</h2><ul><li><code><span class="token property">data</span></code> {any}</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any}</li></ul><p>Similar to console.log, but the output is shown in gray font. The output has a lower priority than log and is used to output information of an observational nature.</p><h2 id="console-info-data-args" tabindex="-1"><a class="header-anchor" href="#console-info-data-args" aria-hidden="true">#</a> console.info([data][, . .args])</h2><ul><li><code><span class="token property">data</span></code> {any}</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any}</li></ul><p>Similar to console.log, but the output is shown in green font. The output has higher priority than log, and is used to output important information.</p><h2 id="console-warn-data-args" tabindex="-1"><a class="header-anchor" href="#console-warn-data-args" aria-hidden="true">#</a> console.warn([data][, . . args])</h2><ul><li><code><span class="token property">data</span></code> {any}</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any}</li></ul><p>Similar to console.log, but the output is shown in blue font. The output has higher priority than info, and is used to output warning messages.</p><h2 id="console-error-data-args" tabindex="-1"><a class="header-anchor" href="#console-error-data-args" aria-hidden="true">#</a> console.error([data][, . . args])</h2><ul><li><code><span class="token property">data</span></code> {any}</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any}</li></ul><p>Similar to console.log, but the output is shown in red font. Output priority is higher than warn, and is used to output error messages.</p><h2 id="console-assert-value-message" tabindex="-1"><a class="header-anchor" href="#console-assert-value-message" aria-hidden="true">#</a> console.assert(value, message)</h2><ul><li>value {any} The boolean value to be asserted.</li><li>message {string} The message to be output if value is false</li></ul><p>Assert. If value is false, output the error message and stop the script.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Error in addition&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-time-label" tabindex="-1"><a class="header-anchor" href="#console-time-label" aria-hidden="true">#</a> console.time([label])</h2><p><strong>[new in v4.1.0]</strong></p><ul><li><code><span class="token property">label</span></code> {String} Timer label, can be omitted</li></ul><p>Starts a timer to calculate the duration of an operation. The timer is identified by a unique <code><span class="token property">label</span></code>. When calling <code>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, the same <code><span class="token property">label</span></code> can be used to stop the timer and output the duration in milliseconds to the console. Repeatedly starting a timer with the same label will overwrite the previous timer that started the same label.</p><h2 id="console-timeend-label" tabindex="-1"><a class="header-anchor" href="#console-timeend-label" aria-hidden="true">#</a> console.timeEnd(label)</h2><p><strong>[new in v4.1.0]</strong></p><ul><li><code><span class="token property">label</span></code> {String} timer label</li></ul><p>Stop the timer started before by calling <code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> and print the result to the console. The timer is deleted after calling <code>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>. If the timer specified by the tag does not exist then <code><span class="token property">NaNms</span></code> will be printed.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;summation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;sum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// print sum: xxx ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-trace-data-args" tabindex="-1"><a class="header-anchor" href="#console-trace-data-args" aria-hidden="true">#</a> console.trace([data][, . . args])</h2><p><strong>[new in v4.1.0]</strong></p><ul><li><code><span class="token property">data</span></code> {any}</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any}</li></ul><p>Similar to console.log, it also prints out information about the call stack where this function was called (i.e. the currently running file, number of lines, etc.).</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&#39;Show me&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Print: (the stack trace will change depending on the location of the called trace)</span>
<span class="token comment">// Show me</span>
<span class="token comment">// at &lt;test&gt;:7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-input-data-args" tabindex="-1"><a class="header-anchor" href="#console-input-data-args" aria-hidden="true">#</a> console.input(data[, . .args])</h2><ul><li><code><span class="token property">data</span></code> {any}</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any}</li></ul><p>Outputs the same message as console.log, and displays the input box on the console waiting for input. Pressing the console&#39;s confirm button will return the input string after calculating it with eval.</p><p><strong>Some models may have a bug that the console does not show the input box.</strong></p><p>For example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> console<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter a number:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// After entering 123.</span>
<span class="token function">toast</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//display 124</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-rawinput-data-args" tabindex="-1"><a class="header-anchor" href="#console-rawinput-data-args" aria-hidden="true">#</a> console.rawInput(data[, . .args])</h2><ul><li><code><span class="token property">data</span></code> {any}</li><li><code><span class="token operator">...</span> <span class="token punctuation">.</span>args</code> {any}</li></ul><p>Outputs the same message as console.log and displays the input box on the console waiting for input. Pressing the console&#39;s confirm button will return the input string directly.</p><p>Some models may have a bug that the console does not show the input box.</p><p>For example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> console<span class="token punctuation">.</span><span class="token function">rawInput</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter a number:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// After entering 123.</span>
<span class="token function">toast</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//display 1231</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setsize-w-h" tabindex="-1"><a class="header-anchor" href="#console-setsize-w-h" aria-hidden="true">#</a> console.setSize(w, h)</h2><ul><li><code><span class="token property">w</span></code> {number} width</li><li>\`\`h\` {number} height</li></ul><p>Set the size of the console in pixels.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set the console size to a quarter of the screen</span>
console<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setposition-x-y" tabindex="-1"><a class="header-anchor" href="#console-setposition-x-y" aria-hidden="true">#</a> console.setPosition(x, y)</h2><ul><li><code><span class="token property">x</span></code> {number} horizontal coordinate</li><li><code><span class="token property">y</span></code> {number} vertical coordinate</li></ul><p>Sets the position of the console in pixels.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setgloballogconfig-config" tabindex="-1"><a class="header-anchor" href="#console-setgloballogconfig-config" aria-hidden="true">#</a> console.setGlobalLogConfig(config)</h2><p><strong>[new in v4.1.0]</strong></p>`,55),h=n("code",null,[n("span",{class:"token property"},"config")],-1),k=a('<li><code><span class="token property">file</span></code> {string} The path to the log file to which the logs will be written.</li><li><code><span class="token property">maxFileSize</span></code> {number} the maximum file size in bytes, default is 512 * 1024 (512KB)</li><li><code><span class="token property">rootLevel</span></code> {string} The log level to write to, default is &quot;ALL&quot; (all logs), can be &quot;OFF&quot;, &quot;DEBUG&quot;, &quot;INFO&quot;, &quot;WARN&quot;, &quot;ERROR&quot;, &quot;FATAL&quot;, etc.</li><li><code><span class="token property">maxBackupSize</span></code> {number} The maximum number of log backup files, default is 5</li>',4),m=n("code",null,[n("span",{class:"token property"},"filePattern")],-1),g={href:"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html",target:"_blank",rel:"noopener noreferrer"},b=a(`<p>Set the path and configuration for log saving. For example, save the logs to &quot;/sdcard/1.txt&quot;:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">setGlobalLogConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/sdcard/1.txt&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that this function affects the logging of all scripts.</p><h2 id="print-text" tabindex="-1"><a class="header-anchor" href="#print-text" aria-hidden="true">#</a> print(text)</h2><ul><li>text {string} | {Object} The message to print to the console</li></ul><p>Equivalent to <code><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span></code>.</p>`,6);function v(f,y){const e=l("ExternalLinkIcon");return i(),p("div",null,[r,n("p",null,[s("Print to the console with line breaks. Multiple arguments can be passed in, the first as the main message and the others as substitution values similar to those in "),n("a",u,[s("printf(3)"),t(e)]),s(" (the arguments are passed to util.format()).")]),d,n("ul",null,[n("li",null,[h,s(" {Object} Log configuration, optional items are. "),n("ul",null,[k,n("li",null,[m,s(" {string} The format of log writing, see "),n("a",g,[s("PatternLayout"),t(e)])])])])]),b])}const q=o(c,[["render",v],["__file","console.html.vue"]]);export{q as default};
