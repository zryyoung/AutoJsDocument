import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as u,c as r,f as a,a as n,b as s,d as t,w as p,e,r as i}from"./app.6aa2b576.js";const d={},k=e(`<h1 id="util" tabindex="-1"><a class="header-anchor" href="#util" aria-hidden="true">#</a> util</h1><blockquote><p>Stability: 2-Stable</p></blockquote><p>The <code><span class="token property">util</span></code> module is primarily designed to support the needs of Node.js&#39; own internal APIs. However, many of the utilities are useful for application and module developers as well. It can be accessed using:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="util-callbackify-original" tabindex="-1"><a class="header-anchor" href="#util-callbackify-original" aria-hidden="true">#</a> util.callbackify(original)</h2>`,5),m=e(`<ul><li><code><span class="token property">original</span></code> {Function} An <code><span class="token keyword">async</span></code> function</li><li>Returns: {Function} a callback style function</li></ul><p>Takes an <code><span class="token keyword">async</span></code> function (or a function that returns a Promise) and returns a function following the Node.js error first callback style. In the callback, the first argument will be the rejection reason (or <code><span class="token keyword">null</span></code> if the Promise resolved), and the second argument will be the resolved value.</p><p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> callbackFunction <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">callbackify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">callbackFunction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Will print:</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Note</em>:</p>`,7),v=n("code",null,[n("span",{class:"token string"},"'uncaughtException'")],-1),b=e(`<li><p>Since <code><span class="token keyword">null</span></code> has a special meaning as the first argument to a callback, if a wrapped function rejects a <code><span class="token property">Promise</span></code> with a falsy value as a reason, the value is wrapped in an <code><span class="token property">Error</span></code> with the original value stored in a field named <code><span class="token property">reason</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> callbackFunction <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">callbackify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">callbackFunction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// When the Promise was rejected with \`null\` it is wrapped with an Error and</span>
  <span class="token comment">// the original value is stored in \`reason\`.</span>
  err <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;reason&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span>reason <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),g=n("h2",{id:"util-debuglog-section",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#util-debuglog-section","aria-hidden":"true"},"#"),s(" util.debuglog(section)")],-1),h=n("ul",null,[n("li",null,[n("code",null,[n("span",{class:"token property"},"section")]),s(" {string} A string identifying the portion of the application for which the "),n("code",null,[n("span",{class:"token property"},"debuglog")]),s(" function is being created.")]),n("li",null,"Returns: {Function} The logging function")],-1),f=n("code",null,[s("util"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"debuglog"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),y=n("code",null,[n("span",{class:"token property"},"stderr")],-1),w=n("code",null,[n("span",{class:"token constant"},"NODE_DEBUG")],-1),_=n("code",null,[n("span",{class:"token property"},"section")],-1),j=n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),x=e(`<p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> debuglog <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">debuglog</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">debuglog</span><span class="token punctuation">(</span><span class="token string">&#39;hello from foo [%d]&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If this program is run with <code><span class="token constant">NODE_DEBUG</span><span class="token operator">=</span>foo</code> in the environment, then it will output something like:</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>FOO 3245: hello from foo [123]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>where <code><span class="token number">3245</span></code> is the process id. If it is not run with that environment variable set, then it will not print anything.</p><p>Multiple comma-separated <code><span class="token property">section</span></code> names may be specified in the <code><span class="token constant">NODE_DEBUG</span></code> environment variable. For example: <code><span class="token constant">NODE_DEBUG</span><span class="token operator">=</span>fs<span class="token punctuation">,</span>net<span class="token punctuation">,</span>tls</code>.</p><h2 id="util-deprecate-function-string" tabindex="-1"><a class="header-anchor" href="#util-deprecate-function-string" aria-hidden="true">#</a> util.deprecate(function, string)</h2>`,7),R=e('<p>The <code>util<span class="token punctuation">.</span><span class="token function">deprecate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method wraps the given <code><span class="token keyword">function</span></code> or class in such a way that it is marked as deprecated.</p>',1),S=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>puts <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">deprecate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;util.puts: Use console.log instead&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When called, <code>util<span class="token punctuation">.</span><span class="token function">deprecate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> will return a function that will emit a <code><span class="token property">DeprecationWarning</span></code> using the <code>process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;warning&#39;</span><span class="token punctuation">)</span></code> event. By default, this warning will be emitted and printed to <code><span class="token property">stderr</span></code> exactly once, the first time it is called. After the warning is emitted, the wrapped <code><span class="token keyword">function</span></code> is called.</p><p>If either the <code><span class="token operator">--</span>no<span class="token operator">-</span>deprecation</code> or <code><span class="token operator">--</span>no<span class="token operator">-</span>warnings</code> command line flags are used, or if the <code>process<span class="token punctuation">.</span>noDeprecation</code> property is set to <code><span class="token boolean">true</span></code> <em>prior</em> to the first deprecation warning, the <code>util<span class="token punctuation">.</span><span class="token function">deprecate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method does nothing.</p><p>If the <code><span class="token operator">--</span>trace<span class="token operator">-</span>deprecation</code> or <code><span class="token operator">--</span>trace<span class="token operator">-</span>warnings</code> command line flags are set, or the <code>process<span class="token punctuation">.</span>traceDeprecation</code> property is set to <code><span class="token boolean">true</span></code>, a warning and a stack trace are printed to <code><span class="token property">stderr</span></code> the first time the deprecated function is called.</p><p>If the <code><span class="token operator">--</span><span class="token keyword">throw</span><span class="token operator">-</span>deprecation</code> command line flag is set, or the <code>process<span class="token punctuation">.</span>throwDeprecation</code> property is set to <code><span class="token boolean">true</span></code>, then an exception will be thrown when the deprecated function is called.</p><p>The <code><span class="token operator">--</span><span class="token keyword">throw</span><span class="token operator">-</span>deprecation</code> command line flag and <code>process<span class="token punctuation">.</span>throwDeprecation</code> property take precedence over <code><span class="token operator">--</span>trace<span class="token operator">-</span>deprecation</code> and <code>process<span class="token punctuation">.</span>traceDeprecation</code>.</p><h2 id="util-format-format-args" tabindex="-1"><a class="header-anchor" href="#util-format-format-args" aria-hidden="true">#</a> util.format(format[, ...args])</h2>`,7),q=e(`<ul><li><code><span class="token property">format</span></code> {string} A <code><span class="token property">printf</span></code>-like format string.</li></ul><p>The <code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method returns a formatted string using the first argument as a <code><span class="token property">printf</span></code>-like format.</p><p>The first argument is a string containing zero or more <em>placeholder</em> tokens. Eachplaceholder token is replaced with the converted value from the corresponding argument. Supported placeholders are:</p><ul><li><code><span class="token operator">%</span>s</code>-String.</li><li><code><span class="token operator">%</span>d</code>-Number (integer or floating point value).</li><li><code><span class="token operator">%</span>i</code>-Integer.</li><li><code><span class="token operator">%</span>f</code>-Floating point value.</li><li><code><span class="token operator">%</span>j</code>-JSON. Replaced with the string <code><span class="token string">&#39;[Circular]&#39;</span></code> if the argument contains circular references.</li><li><code><span class="token operator">%</span>o</code>-Object. A string representation of an object with generic JavaScript object formatting. Similar to <code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> with options <code><span class="token punctuation">{</span> <span class="token literal-property property">showHidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">showProxy</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></code>. This will show the full object including non-enumerable symbols and properties.</li><li><code><span class="token operator">%</span><span class="token constant">O</span></code>-Object. A string representation of an object with generic JavaScript object formatting. Similar to <code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> without options. This will show the full object not including non-enumerable symbols and properties.</li><li><code><span class="token operator">%</span><span class="token operator">%</span></code>-single percent sign (<code><span class="token string">&#39;%&#39;</span></code>). This does not consume an argument.</li></ul><p>If the placeholder does not have a corresponding argument, the placeholder is not replaced.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;%s:%s&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns:&#39;foo:%s&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If there are more arguments passed to the <code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method than the number of placeholders, the extra arguments are coerced into strings then concatenated to the returned string, each delimited by a space. Excessive arguments whose <code><span class="token keyword">typeof</span></code> is <code><span class="token string">&#39;object&#39;</span></code> or <code><span class="token string">&#39;symbol&#39;</span></code> (except <code><span class="token keyword">null</span></code>) will be transformed by <code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;%s:%s&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;foo:bar baz&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If the first argument is not a string then <code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> returns a string that is the concatenation of all arguments separated by spaces. Each argument is converted to a string using <code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1 2 3&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If only one argument is passed to <code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, it is returned as it is without any formatting.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;%% %s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;%% %s&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="util-inherits-constructor-superconstructor" tabindex="-1"><a class="header-anchor" href="#util-inherits-constructor-superconstructor" aria-hidden="true">#</a> util.inherits(constructor, superConstructor)</h2>`,13),A=n("em",null,"Note",-1),D=n("code",null,[s("util"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"inherits"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),T=n("code",null,[n("span",{class:"token keyword"},"class")],-1),E=n("code",null,[n("span",{class:"token keyword"},"extends")],-1),O={href:"https://github.com/nodejs/node/issues/4179",target:"_blank",rel:"noopener noreferrer"},I=n("ul",null,[n("li",null,[n("code",null,[n("span",{class:"token property"},"constructor")]),s(" {Function}")]),n("li",null,[n("code",null,[n("span",{class:"token property"},"superConstructor")]),s(" {Function}")])],-1),M={href:"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,[n("span",{class:"token property"},"constructor")],-1),N=n("code",null,[n("span",{class:"token property"},"superConstructor")],-1),U=e(`<p>As an additional convenience, <code><span class="token property">superConstructor</span></code> will be accessible through the <code>constructor<span class="token punctuation">.</span>super_</code> property.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">EventEmitter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

util<span class="token punctuation">.</span><span class="token function">inherits</span><span class="token punctuation">(</span>MyStream<span class="token punctuation">,</span> EventEmitter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MyStream</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stream <span class="token keyword">instanceof</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyStream<span class="token punctuation">.</span>super_ <span class="token operator">===</span> EventEmitter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received data: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;It works!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Received data: &quot;It works!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 example using <code><span class="token keyword">class</span></code> and <code><span class="token keyword">extends</span></code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyStream</span> <span class="token keyword">extends</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>
  <span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received data: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;With ES6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-inspect-object-options" tabindex="-1"><a class="header-anchor" href="#util-inspect-object-options" aria-hidden="true">#</a> util.inspect(object[, options])</h2>`,5),B=e(`<ul><li><code><span class="token property">object</span></code> {any} Any JavaScript primitive or Object.</li><li><code><span class="token property">options</span></code> {Object} <ul><li><code><span class="token property">showHidden</span></code> {boolean} If <code><span class="token boolean">true</span></code>, the <code><span class="token property">object</span></code>&#39;s non-enumerable symbols and properties will be included in the formatted result. Defaults to <code><span class="token boolean">false</span></code>.</li><li><code><span class="token property">depth</span></code> {number} Specifies the number of times to recurse while formatting the <code><span class="token property">object</span></code>. This is useful for inspecting large complicated objects. Defaults to <code><span class="token number">2</span></code>. To make it recurse indefinitely pass <code><span class="token keyword">null</span></code>.</li><li><code><span class="token property">colors</span></code> {boolean} If <code><span class="token boolean">true</span></code>, the output will be styled with ANSI color codes. Defaults to <code><span class="token boolean">false</span></code>. Colors are customizable, see <a href="#util_customizing_util_inspect_colors">Customizing <code>util<span class="token punctuation">.</span>inspect</code> colors</a>.</li><li><code><span class="token property">customInspect</span></code> {boolean} If <code><span class="token boolean">false</span></code>, then custom <code><span class="token function">inspect</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> opts<span class="token punctuation">)</span></code> functions exported on the <code><span class="token property">object</span></code> being inspected will not be called. Defaults to <code><span class="token boolean">true</span></code>.</li><li><code><span class="token property">showProxy</span></code> {boolean} If <code><span class="token boolean">true</span></code>, then objects and functions that are <code><span class="token property">Proxy</span></code> objects will be introspected to show their <code><span class="token property">target</span></code> and <code><span class="token property">handler</span></code> objects. Defaults to <code><span class="token boolean">false</span></code>.</li><li><code><span class="token property">maxArrayLength</span></code> {number} Specifies the maximum number of array and <code><span class="token property">TypedArray</span></code> elements to include when formatting. Defaults to <code><span class="token number">100</span></code>. Set to <code><span class="token keyword">null</span></code> to show all array elements. Set to <code><span class="token number">0</span></code> or negative to show no array elements.</li><li><code><span class="token property">breakLength</span></code> {number} The length at which an object&#39;s keys are split across multiple lines. Set to <code><span class="token number">Infinity</span></code> to format an object as a single line. Defaults to 60 for legacy compatibility.</li></ul></li></ul><p>The <code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method returns a string representation of <code><span class="token property">object</span></code> that is Primarily useful for debugging. Additional <code><span class="token property">options</span></code> may be passed that alter certain aspects of the formatted string.</p><p>The following example inspects all properties of the <code><span class="token property">util</span></code> object:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>util<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">showHidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Values \u200B\u200Bmay supply their own custom <code><span class="token function">inspect</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> opts<span class="token punctuation">)</span></code> functions, when called these receive the current <code><span class="token property">depth</span></code> in the recursive inspection, as well as the options object passed to <code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><h3 id="customizing-util-inspect-colors" tabindex="-1"><a class="header-anchor" href="#customizing-util-inspect-colors" aria-hidden="true">#</a> Customizing <code>util<span class="token punctuation">.</span>inspect</code> colors</h3>`,6),Y=e('<p>Color output (if enabled) of <code>util<span class="token punctuation">.</span>inspect</code> is customizable globally via the <code>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>styles</code> and <code>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>colors</code> properties.</p><p><code>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>styles</code> is a map associating a style name to a color from <code>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>colors</code>.</p><p>The default styles and associated colors are:</p><ul><li><code><span class="token property">number</span></code>-<code><span class="token property">yellow</span></code></li><li><code><span class="token property">boolean</span></code>-<code><span class="token property">yellow</span></code></li><li><code><span class="token property">string</span></code>-<code><span class="token property">green</span></code></li><li><code><span class="token property">date</span></code>-<code><span class="token property">magenta</span></code></li><li><code><span class="token property">regexp</span></code>-<code><span class="token property">red</span></code></li><li><code><span class="token keyword">null</span></code>-<code><span class="token property">bold</span></code></li><li><code><span class="token keyword">undefined</span></code>-<code><span class="token property">grey</span></code></li><li><code><span class="token property">special</span></code>-<code><span class="token property">cyan</span></code> (only applied to functions at this time)</li><li><code><span class="token property">name</span></code>-(no styling)</li></ul><p>The predefined color codes are: <code><span class="token property">white</span></code>, <code><span class="token property">grey</span></code>, <code><span class="token property">black</span></code>, <code><span class="token property">blue</span></code>, <code><span class="token property">cyan</span></code>, <code><span class="token property">green</span></code>, <code><span class="token property">magenta</span></code>, <code><span class="token property">red</span></code> and <code><span class="token property">yellow</span></code>. There are also <code><span class="token property">bold</span></code>, <code><span class="token property">italic</span></code>, <code><span class="token property">underline</span></code> and <code><span class="token property">inverse</span></code> codes.</p><p>Color styling uses ANSI control codes that may not be supported on all terminals.</p><h3 id="custom-inspection-functions-on-objects" tabindex="-1"><a class="header-anchor" href="#custom-inspection-functions-on-objects" aria-hidden="true">#</a> Custom inspection functions on Objects</h3>',7),C=e(`<p>Objects may also define their own <code><span class="token punctuation">[</span>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>custom<span class="token punctuation">]</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> opts<span class="token punctuation">)</span></code> (or, equivalently <code><span class="token function">inspect</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> opts<span class="token punctuation">)</span></code>) function that <code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> will invoke and use the result of when inspecting the object:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">inspect</span><span class="token punctuation">(</span><span class="token parameter">depth<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> options<span class="token punctuation">.</span><span class="token function">stylize</span><span class="token punctuation">(</span><span class="token string">&#39;[Box]&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;special&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> newOptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">depth</span><span class="token operator">:</span> options<span class="token punctuation">.</span>depth <span class="token operator">===</span> <span class="token keyword">null</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token operator">:</span> options<span class="token punctuation">.</span>depth<span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Five space padding because that&#39;s the size of &quot;Box&lt; &quot;.</span>
    <span class="token keyword">const</span> padding <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> inner <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> newOptions<span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>padding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span><span class="token function">stylize</span><span class="token punctuation">(</span><span class="token string">&#39;Box&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;special&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>inner<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: &quot;Box&lt; true &gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Custom <code><span class="token punctuation">[</span>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>custom<span class="token punctuation">]</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> opts<span class="token punctuation">)</span></code> functions typically return a string but may return a value of any type that will be formatted accordingly by <code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span><span class="token string">&#39;this will not show up in the inspect() output&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>custom<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">depth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">bar</span><span class="token operator">:</span><span class="token string">&#39;baz&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: &quot;{ bar:&#39;baz&#39; }&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A custom inspection method can alternatively be provided by exposing an <code><span class="token function">inspect</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> opts<span class="token punctuation">)</span></code> method on the object:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span><span class="token string">&#39;this will not show up in the inspect() output&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function-variable function">inspect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">depth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">bar</span><span class="token operator">:</span><span class="token string">&#39;baz&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: &quot;{ bar:&#39;baz&#39; }&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-inspect-custom" tabindex="-1"><a class="header-anchor" href="#util-inspect-custom" aria-hidden="true">#</a> util.inspect.custom</h3>`,7),P=n("p",null,[s("A Symbol that can be used to declare custom inspect functions, see "),n("a",{href:"#util_custom_inspection_functions_on_objects"},"Custom inspection functions on Objects"),s(".")],-1),F=n("h3",{id:"util-inspect-defaultoptions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#util-inspect-defaultoptions","aria-hidden":"true"},"#"),s(" util.inspect.defaultOptions")],-1),z=e(`<p>The <code><span class="token property">defaultOptions</span></code> value allows customization of the default options used by <code>util<span class="token punctuation">.</span>inspect</code>. This is useful for functions like <code>console<span class="token punctuation">.</span>log</code> or <code>util<span class="token punctuation">.</span>format</code> which implicitly call into <code>util<span class="token punctuation">.</span>inspect</code>. It shall be set to an object containing one or more valid <a href="#util_util_inspect_object_options"><code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></a> options. Setting option properties directly is also supported.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs the truncated array</span>
util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>defaultOptions<span class="token punctuation">.</span>maxArrayLength <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs the full array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-promisify-original" tabindex="-1"><a class="header-anchor" href="#util-promisify-original" aria-hidden="true">#</a> util.promisify(original)</h2>`,3),W=e(`<ul><li><code><span class="token property">original</span></code> {Function}</li></ul><p>Takes a function following the common Node.js callback style, i.e. taking a <code><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">...</span></code> callback as the last argument, and returns a version that returns promises.</p><p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stat <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something with \`stats\`</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Handle the error.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or, equivalently using <code><span class="token keyword">async</span> <span class="token keyword">function</span></code>s:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stat <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">callStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> stats <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">This directory is owned by </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stats<span class="token punctuation">.</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If there is an <code>original<span class="token punctuation">[</span>util<span class="token punctuation">.</span>promisify<span class="token punctuation">.</span>custom<span class="token punctuation">]</span></code> property present, <code><span class="token property">promisify</span></code> will return its value, see <a href="#util_custom_promisified_functions">Custom promisified functions</a>.</p><p><code><span class="token function">promisify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> assumes that <code><span class="token property">original</span></code> is a function taking a callback as its final argument in all cases, and the returned function will result in undefined behavior if it does not.</p><h3 id="custom-promisified-functions" tabindex="-1"><a class="header-anchor" href="#custom-promisified-functions" aria-hidden="true">#</a> Custom promisified functions</h3><p>Using the <code>util<span class="token punctuation">.</span>promisify<span class="token punctuation">.</span>custom</code> symbol one can override the return value of <a href="#util_util_promisify_original"><code>util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></a>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">foo<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

doSomething<span class="token punctuation">[</span>util<span class="token punctuation">.</span>promisify<span class="token punctuation">.</span>custom<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">getPromiseSomehow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> promisified <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>promisified <span class="token operator">===</span> doSomething<span class="token punctuation">[</span>util<span class="token punctuation">.</span>promisify<span class="token punctuation">.</span>custom<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// prints&#39;true&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This can be useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument.</p><h3 id="util-promisify-custom" tabindex="-1"><a class="header-anchor" href="#util-promisify-custom" aria-hidden="true">#</a> util.promisify.custom</h3>`,13),G=n("ul",null,[n("li",null,"{symbol}")],-1),H=n("p",null,[s("A Symbol that can be used to declare custom promisified variants of functions, see "),n("a",{href:"#util_custom_promisified_functions"},"Custom promisified functions"),s(".")],-1),J=n("h2",{id:"class-util-textdecoder",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-util-textdecoder","aria-hidden":"true"},"#"),s(" Class: util.TextDecoder")],-1),V=n("blockquote",null,[n("p",null,"Stability: 1-Experimental")],-1),$={href:"https://encoding.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,[n("span",{class:"token property"},"TextDecoder")],-1),Q=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">&#39;shift_jis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> string <span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> buffer<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>buffer <span class="token operator">=</span> <span class="token function">getNextChunkSomehow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  string <span class="token operator">+=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">stream</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
string <span class="token operator">+=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// end-of-stream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="whatwg-supported-encodings" tabindex="-1"><a class="header-anchor" href="#whatwg-supported-encodings" aria-hidden="true">#</a> WHATWG Supported Encodings</h3>`,2),X={href:"https://encoding.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,[n("span",{class:"token property"},"TextDecoder")],-1),nn=e('<h4 id="encodings-supported-without-icu" tabindex="-1"><a class="header-anchor" href="#encodings-supported-without-icu" aria-hidden="true">#</a> Encodings Supported Without ICU</h4><table><thead><tr><th>Encoding</th><th>Aliases</th></tr></thead><tbody><tr><td><code><span class="token string">&#39;utf-8&#39;</span></code></td><td><code><span class="token string">&#39;unicode-1-1-utf-8&#39;</span></code>, <code><span class="token string">&#39;utf8&#39;</span></code></td></tr><tr><td><code><span class="token string">&#39;utf-16le&#39;</span></code></td><td><code><span class="token string">&#39;utf-16&#39;</span></code></td></tr></tbody></table><h4 id="encodings-supported-by-default-with-icu" tabindex="-1"><a class="header-anchor" href="#encodings-supported-by-default-with-icu" aria-hidden="true">#</a> Encodings Supported by Default (With ICU)</h4><table><thead><tr><th>Encoding</th><th>Aliases</th></tr></thead><tbody><tr><td><code><span class="token string">&#39;utf-8&#39;</span></code></td><td><code><span class="token string">&#39;unicode-1-1-utf-8&#39;</span></code>, <code><span class="token string">&#39;utf8&#39;</span></code></td></tr><tr><td><code><span class="token string">&#39;utf-16le&#39;</span></code></td><td><code><span class="token string">&#39;utf-16&#39;</span></code></td></tr><tr><td><code><span class="token string">&#39;utf-16be&#39;</span></code></td><td></td></tr></tbody></table><h4 id="encodings-requiring-full-icu-data" tabindex="-1"><a class="header-anchor" href="#encodings-requiring-full-icu-data" aria-hidden="true">#</a> Encodings Requiring Full ICU Data</h4><p>| Encoding | Aliases | | ----------------- | ------------------------------- -| | <code><span class="token string">&#39;ibm866&#39;</span></code> | <code><span class="token string">&#39;866&#39;</span></code>, <code><span class="token string">&#39;cp866&#39;</span></code>, <code><span class="token string">&#39;csibm866&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-2&#39;</span></code> | <code><span class="token string">&#39;csisolatin2&#39;</span></code>, <code><span class="token string">&#39;iso-ir-101&#39;</span></code>, <code><span class="token string">&#39;iso8859-2&#39;</span></code>, <code><span class="token string">&#39;iso88592&#39;</span></code>, <code><span class="token string">&#39;iso_8859-2&#39;</span></code>, <code><span class="token string">&#39;iso_8859-2:1987&#39;</span></code>, <code><span class="token string">&#39;l2&#39;</span></code>, <code><span class="token string">&#39;latin2&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-3&#39;</span></code> | <code><span class="token string">&#39;csisolatin3&#39;</span></code>, <code><span class="token string">&#39;iso-ir-109&#39;</span></code>, <code><span class="token string">&#39;iso8859-3&#39;</span></code>, <code><span class="token string">&#39;iso88593&#39;</span></code>, <code><span class="token string">&#39;iso_8859-3&#39;</span></code>, <code><span class="token string">&#39;iso_8859-3:1988&#39;</span></code>, <code><span class="token string">&#39;l3&#39;</span></code>, <code><span class="token string">&#39;latin3&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-4&#39;</span></code> | <code><span class="token string">&#39;csisolatin4&#39;</span></code>, <code><span class="token string">&#39;iso-ir-110&#39;</span></code>, <code><span class="token string">&#39;iso8859-4&#39;</span></code>, <code><span class="token string">&#39;iso88594&#39;</span></code>, <code><span class="token string">&#39;iso_8859-4&#39;</span></code>, <code><span class="token string">&#39;iso_8859-4:1988&#39;</span></code>, <code><span class="token string">&#39;l4&#39;</span></code>, <code><span class="token string">&#39;latin4&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-5&#39;</span></code> | <code><span class="token string">&#39;csisolatincyrillic&#39;</span></code>, <code><span class="token string">&#39;cyrillic&#39;</span></code>, <code><span class="token string">&#39;iso-ir-144&#39;</span></code>, <code><span class="token string">&#39;iso8859-5&#39;</span></code>, <code><span class="token string">&#39;iso88595&#39;</span></code>, <code><span class="token string">&#39;iso_8859 -5&#39;</span></code>, <code><span class="token string">&#39;iso_8859-5:1988&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-6&#39;</span></code> | <code><span class="token string">&#39;arabic&#39;</span></code>, <code><span class="token string">&#39;asmo-708&#39;</span></code>, <code><span class="token string">&#39;csiso88596e&#39;</span></code>, <code><span class="token string">&#39;csiso88596i&#39;</span></code>, <code><span class="token string">&#39;csisolatinarabic&#39;</span></code>, <code><span class="token string">&#39;ecma-114&#39;</span></code> , <code><span class="token string">&#39;iso-8859-6-e&#39;</span></code>, <code><span class="token string">&#39;iso-8859-6-i&#39;</span></code>, <code><span class="token string">&#39;iso-ir-127&#39;</span></code>, <code><span class="token string">&#39;iso8859-6&#39;</span></code>, <code><span class="token string">&#39;iso88596&#39;</span></code>, <code><span class="token string">&#39;iso_8859-6&#39;</span></code>, <code><span class="token string">&#39;iso_8859-6:1987&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-7&#39;</span></code> | <code><span class="token string">&#39;csisolatingreek&#39;</span></code>, <code><span class="token string">&#39;ecma-118&#39;</span></code>, <code><span class="token string">&#39;elot_928&#39;</span></code>, <code><span class="token string">&#39;greek&#39;</span></code>, <code><span class="token string">&#39;greek8&#39;</span></code>, <code><span class="token string">&#39;iso-ir-126 &#39;</span></code>, <code><span class="token string">&#39;iso8859-7&#39;</span></code>, <code><span class="token string">&#39;iso88597&#39;</span></code>, <code><span class="token string">&#39;iso_8859-7&#39;</span></code>, <code><span class="token string">&#39;iso_8859-7:1987&#39;</span></code>, <code><span class="token string">&#39;sun_eu_greek&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-8&#39;</span></code> | <code><span class="token string">&#39;csiso88598e&#39;</span></code>, <code><span class="token string">&#39;csisolatinhebrew&#39;</span></code>, <code><span class="token string">&#39;hebrew&#39;</span></code>, <code><span class="token string">&#39;iso-8859-8-e&#39;</span></code>, <code><span class="token string">&#39;iso-ir-138&#39;</span></code> , <code><span class="token string">&#39;iso8859-8&#39;</span></code>, <code><span class="token string">&#39;iso88598&#39;</span></code>, <code><span class="token string">&#39;iso_8859-8&#39;</span></code>, <code><span class="token string">&#39;iso_8859-8:1988&#39;</span></code>, <code><span class="token string">&#39;visual&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-8-i&#39;</span></code> | <code><span class="token string">&#39;csiso88598i&#39;</span></code>, <code><span class="token string">&#39;logical&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-10&#39;</span></code> | <code><span class="token string">&#39;csisolatin6&#39;</span></code>, <code><span class="token string">&#39;iso-ir-157&#39;</span></code>, <code><span class="token string">&#39;iso8859-10&#39;</span></code>, <code><span class="token string">&#39;iso885910&#39;</span></code>, <code><span class="token string">&#39;l6&#39;</span></code>, <code><span class="token string">&#39;latin6 &#39;</span></code> | | <code><span class="token string">&#39;iso-8859-13&#39;</span></code> | <code><span class="token string">&#39;iso8859-13&#39;</span></code>, <code><span class="token string">&#39;iso885913&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-14&#39;</span></code> | <code><span class="token string">&#39;iso8859-14&#39;</span></code>, <code><span class="token string">&#39;iso885914&#39;</span></code> | | <code><span class="token string">&#39;iso-8859-15&#39;</span></code> | <code><span class="token string">&#39;csisolatin9&#39;</span></code>, <code><span class="token string">&#39;iso8859-15&#39;</span></code>, <code><span class="token string">&#39;iso885915&#39;</span></code>, <code><span class="token string">&#39;iso_8859-15&#39;</span></code>, <code><span class="token string">&#39;l9&#39;</span></code> | | <code><span class="token string">&#39;koi8-r&#39;</span></code> | <code><span class="token string">&#39;cskoi8r&#39;</span></code>, <code><span class="token string">&#39;koi&#39;</span></code>, <code><span class="token string">&#39;koi8&#39;</span></code>, <code><span class="token string">&#39;koi8_r&#39;</span></code> | | <code><span class="token string">&#39;koi8-u&#39;</span></code> | <code><span class="token string">&#39;koi8-ru&#39;</span></code> | | <code><span class="token string">&#39;macintosh&#39;</span></code> | <code><span class="token string">&#39;csmacintosh&#39;</span></code>, <code><span class="token string">&#39;mac&#39;</span></code>, <code><span class="token string">&#39;x-mac-roman&#39;</span></code> | | <code><span class="token string">&#39;windows-874&#39;</span></code> | <code><span class="token string">&#39;dos-874&#39;</span></code>, <code><span class="token string">&#39;iso-8859-11&#39;</span></code>, <code><span class="token string">&#39;iso8859-11&#39;</span></code>, <code><span class="token string">&#39;iso885911&#39;</span></code>, <code><span class="token string">&#39;tis-620&#39;</span></code> | | <code><span class="token string">&#39;windows-1250&#39;</span></code> | <code><span class="token string">&#39;cp1250&#39;</span></code>, <code><span class="token string">&#39;x-cp1250&#39;</span></code> | | <code><span class="token string">&#39;windows-1251&#39;</span></code> | <code><span class="token string">&#39;cp1251&#39;</span></code>, <code><span class="token string">&#39;x-cp1251&#39;</span></code> | | <code><span class="token string">&#39;windows-1252&#39;</span></code> | <code><span class="token string">&#39;ansi_x3.4-1968&#39;</span></code>, <code><span class="token string">&#39;ascii&#39;</span></code>, <code><span class="token string">&#39;cp1252&#39;</span></code>, <code><span class="token string">&#39;cp819&#39;</span></code>, <code><span class="token string">&#39;csisolatin1&#39;</span></code>, <code><span class="token string">&#39;ibm819&#39;</span></code>, <code><span class="token string">&#39;iso-8859-1&#39;</span></code>, <code><span class="token string">&#39;iso-ir-100&#39;</span></code>, <code><span class="token string">&#39;iso8859-1&#39;</span></code>, <code><span class="token string">&#39;iso88591&#39;</span></code>, <code><span class="token string">&#39;iso_8859-1&#39;</span></code>, <code><span class="token string">&#39;iso_8859-1:1987&#39;</span></code> , <code><span class="token string">&#39;l1&#39;</span></code>, <code><span class="token string">&#39;latin1&#39;</span></code>, <code><span class="token string">&#39;us-ascii&#39;</span></code>, <code><span class="token string">&#39;x-cp1252&#39;</span></code> | | <code><span class="token string">&#39;windows-1253&#39;</span></code> | <code><span class="token string">&#39;cp1253&#39;</span></code>, <code><span class="token string">&#39;x-cp1253&#39;</span></code> | | <code><span class="token string">&#39;windows-1254&#39;</span></code> | <code><span class="token string">&#39;cp1254&#39;</span></code>, <code><span class="token string">&#39;csisolatin5&#39;</span></code>, <code><span class="token string">&#39;iso-8859-9&#39;</span></code>, <code><span class="token string">&#39;iso-ir-148&#39;</span></code>, <code><span class="token string">&#39;iso8859-9&#39;</span></code>, <code><span class="token string">&#39;iso88599&#39;</span></code>, <code><span class="token string">&#39;iso_8859-9&#39;</span></code>, <code><span class="token string">&#39;iso_8859-9:1989&#39;</span></code>, <code><span class="token string">&#39;l5&#39;</span></code>, <code><span class="token string">&#39;latin5&#39;</span></code>, <code><span class="token string">&#39;x-cp1254&#39;</span></code> | | <code><span class="token string">&#39;windows-1255&#39;</span></code> | <code><span class="token string">&#39;cp1255&#39;</span></code>, <code><span class="token string">&#39;x-cp1255&#39;</span></code> | | <code><span class="token string">&#39;windows-1256&#39;</span></code> | <code><span class="token string">&#39;cp1256&#39;</span></code>, <code><span class="token string">&#39;x-cp1256&#39;</span></code> | | <code><span class="token string">&#39;windows-1257&#39;</span></code> | <code><span class="token string">&#39;cp1257&#39;</span></code>, <code><span class="token string">&#39;x-cp1257&#39;</span></code> | | <code><span class="token string">&#39;windows-1258&#39;</span></code> | <code><span class="token string">&#39;cp1258&#39;</span></code>, <code><span class="token string">&#39;x-cp1258&#39;</span></code> | | <code><span class="token string">&#39;x-mac-cyrillic&#39;</span></code> | <code><span class="token string">&#39;x-mac-ukrainian&#39;</span></code> | | <code><span class="token string">&#39;gbk&#39;</span></code> | <code><span class="token string">&#39;chinese&#39;</span></code>, <code><span class="token string">&#39;csgb2312&#39;</span></code>, <code><span class="token string">&#39;csiso58gb231280&#39;</span></code>, <code><span class="token string">&#39;gb2312&#39;</span></code>, <code><span class="token string">&#39;gb_2312&#39;</span></code>, <code><span class="token string">&#39;gb_2312-80&#39;</span></code>, <code><span class="token string">&#39;iso-ir -58&#39;</span></code>, <code><span class="token string">&#39;x-gbk&#39;</span></code> | | <code><span class="token string">&#39;gb18030&#39;</span></code> | | | <code><span class="token string">&#39;big5&#39;</span></code> | <code><span class="token string">&#39;big5-hkscs&#39;</span></code>, <code><span class="token string">&#39;cn-big5&#39;</span></code>, <code><span class="token string">&#39;csbig5&#39;</span></code>, <code><span class="token string">&#39;x-x-big5&#39;</span></code> | | <code><span class="token string">&#39;euc-jp&#39;</span></code> | <code><span class="token string">&#39;cseucpkdfmtjapanese&#39;</span></code>, <code><span class="token string">&#39;x-euc-jp&#39;</span></code> | | <code><span class="token string">&#39;iso-2022-jp&#39;</span></code> | <code><span class="token string">&#39;csiso2022jp&#39;</span></code> | | <code><span class="token string">&#39;shift_jis&#39;</span></code> | <code><span class="token string">&#39;csshiftjis&#39;</span></code>, <code><span class="token string">&#39;ms932&#39;</span></code>, <code><span class="token string">&#39;ms_kanji&#39;</span></code>, <code><span class="token string">&#39;shift-jis&#39;</span></code>, <code><span class="token string">&#39;sjis&#39;</span></code>, <code><span class="token string">&#39;windows-31j&#39;</span></code>, <code><span class="token string">&#39;x -sjis&#39;</span></code> | | <code><span class="token string">&#39;euc-kr&#39;</span></code> | <code><span class="token string">&#39;cseuckr&#39;</span></code>, <code><span class="token string">&#39;csksc56011987&#39;</span></code>, <code><span class="token string">&#39;iso-ir-149&#39;</span></code>, <code><span class="token string">&#39;korean&#39;</span></code>, <code><span class="token string">&#39;ks_c_5601-1987&#39;</span></code>, <code><span class="token string">&#39;ks_c_5601-1989 &#39;</span></code>, <code><span class="token string">&#39;ksc5601&#39;</span></code>, <code><span class="token string">&#39;ksc_5601&#39;</span></code>, <code><span class="token string">&#39;windows-949&#39;</span></code> |</p>',6),sn=n("em",null,"Note",-1),an=n("code",null,[n("span",{class:"token string"},"'iso-8859-16'")],-1),en={href:"https://encoding.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},tn=n("h3",{id:"new-textdecoder-encoding-options",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new-textdecoder-encoding-options","aria-hidden":"true"},"#"),s(" new TextDecoder([encoding[, options]])")],-1),on=n("li",null,[n("code",null,[n("span",{class:"token property"},"encoding")]),s(" {string} Identifies the "),n("code",null,[n("span",{class:"token property"},"encoding")]),s(" that this "),n("code",null,[n("span",{class:"token property"},"TextDecoder")]),s(" instance supports. Defaults to "),n("code",null,[n("span",{class:"token string"},"'utf-8'")]),s(".")],-1),pn=n("code",null,[n("span",{class:"token property"},"options")],-1),cn=n("code",null,[n("span",{class:"token property"},"fatal")],-1),ln=n("code",null,[n("span",{class:"token boolean"},"true")],-1),un=n("code",null,[n("span",{class:"token boolean"},"false")],-1),rn=e('<li><code><span class="token property">ignoreBOM</span></code> {boolean} When <code><span class="token boolean">true</span></code>, the <code><span class="token property">TextDecoder</span></code> will include the byte order mark in the decoded result. When <code><span class="token boolean">false</span></code>, the byte order mark will be removed from the output. This option is only used when <code><span class="token property">encoding</span></code> is <code><span class="token string">&#39;utf-8&#39;</span></code>, <code><span class="token string">&#39;utf-16be&#39;</span></code> or <code><span class="token string">&#39;utf-16le&#39;</span></code>. Defaults to <code><span class="token boolean">false</span></code>.</li>',1),dn=e('<p>Creates an new <code><span class="token property">TextDecoder</span></code> instance. The <code><span class="token property">encoding</span></code> may specify one of the supported encodings or an alias.</p><h3 id="textdecoder-decode-input-options" tabindex="-1"><a class="header-anchor" href="#textdecoder-decode-input-options" aria-hidden="true">#</a> textDecoder.decode([input[, options]])</h3><ul><li><code><span class="token property">input</span></code> {ArrayBuffer|DataView|TypedArray} An <code><span class="token property">ArrayBuffer</span></code>, <code><span class="token property">DataView</span></code> or Typed Array instance containing the encoded data.</li><li><code><span class="token property">options</span></code> {Object} <ul><li><code><span class="token property">stream</span></code> {boolean} <code><span class="token boolean">true</span></code> if additional chunks of data are expected. Defaults to <code><span class="token boolean">false</span></code>.</li></ul></li><li>Returns: {string}</li></ul><p>Decodes the <code><span class="token property">input</span></code> and returns a string. If <code>options<span class="token punctuation">.</span>stream</code> is <code><span class="token boolean">true</span></code>, any incomplete byte sequences occuring at the end of the <code><span class="token property">input</span></code> are buffered internally and emitted after the next call to <code>textDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><p>If <code>textDecoder<span class="token punctuation">.</span>fatal</code> is <code><span class="token boolean">true</span></code>, decoding errors that occur will result in a <code><span class="token property">TypeError</span></code> being thrown.</p><h3 id="textdecoder-encoding" tabindex="-1"><a class="header-anchor" href="#textdecoder-encoding" aria-hidden="true">#</a> textDecoder.encoding</h3><ul><li>{string}</li></ul><p>The encoding supported by the <code><span class="token property">TextDecoder</span></code> instance.</p><h3 id="textdecoder-fatal" tabindex="-1"><a class="header-anchor" href="#textdecoder-fatal" aria-hidden="true">#</a> textDecoder.fatal</h3><ul><li>{boolean}</li></ul><p>The value will be <code><span class="token boolean">true</span></code> if decoding errors result in a <code><span class="token property">TypeError</span></code> being thrown.</p><h3 id="textdecoder-ignorebom" tabindex="-1"><a class="header-anchor" href="#textdecoder-ignorebom" aria-hidden="true">#</a> textDecoder.ignoreBOM</h3><ul><li>{boolean}</li></ul><p>The value will be <code><span class="token boolean">true</span></code> if the decoding result will include the byte order mark.</p><h2 id="class-util-textencoder" tabindex="-1"><a class="header-anchor" href="#class-util-textencoder" aria-hidden="true">#</a> Class: util.TextEncoder</h2>',15),kn=n("blockquote",null,[n("p",null,"Stability: 1-Experimental")],-1),mn={href:"https://encoding.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,[n("span",{class:"token property"},"TextEncoder")],-1),bn=n("code",null,[n("span",{class:"token property"},"TextEncoder")],-1),gn=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> uint8array <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&#39;this is some data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="textencoder-encode-input" tabindex="-1"><a class="header-anchor" href="#textencoder-encode-input" aria-hidden="true">#</a> textEncoder.encode([input])</h3><ul><li><code><span class="token property">input</span></code> {string} The text to encode. Defaults to an empty string.</li><li>Returns: {Uint8Array}</li></ul><p>UTF-8 encodes the <code><span class="token property">input</span></code> string and returns a <code><span class="token property">Uint8Array</span></code> containing the encoded bytes.</p><h3 id="textdecoder-encoding-1" tabindex="-1"><a class="header-anchor" href="#textdecoder-encoding-1" aria-hidden="true">#</a> textDecoder.encoding</h3><ul><li>{string}</li></ul><p>The encoding supported by the <code><span class="token property">TextEncoder</span></code> instance. Always set to <code><span class="token string">&#39;utf-8&#39;</span></code>.</p><h2 id="deprecated-apis" tabindex="-1"><a class="header-anchor" href="#deprecated-apis" aria-hidden="true">#</a> Deprecated APIs</h2><p>The following APIs have been deprecated and should no longer be used. Existing applications and modules should be updated to find alternative approaches.</p><h3 id="util-extend-target-source" tabindex="-1"><a class="header-anchor" href="#util-extend-target-source" aria-hidden="true">#</a> util._extend(target, source)</h3>`,10),hn={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,[s("Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"assign"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),yn=n("p",null,[s("The "),n("code",null,[s("util"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"_extend"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(" method was never intended to be used outside of internal Node.js modules. The community found and used it anyway.")],-1),wn={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,[s("Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"assign"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),jn=n("h3",{id:"util-debug-string",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#util-debug-string","aria-hidden":"true"},"#"),s(" util.debug(string)")],-1),xn=n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),Rn=e('<ul><li><code><span class="token property">string</span></code> {string} The message to print to <code><span class="token property">stderr</span></code></li></ul><p>Deprecated predecessor of <code>console<span class="token punctuation">.</span>error</code>.</p><h3 id="util-error-strings" tabindex="-1"><a class="header-anchor" href="#util-error-strings" aria-hidden="true">#</a> util.error([...strings])</h3>',3),Sn=n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),qn=e('<ul><li><code><span class="token operator">...</span>strings</code> {string} The message to print to <code><span class="token property">stderr</span></code></li></ul><p>Deprecated predecessor of <code>console<span class="token punctuation">.</span>error</code>.</p><h3 id="util-isarray-object" tabindex="-1"><a class="header-anchor" href="#util-isarray-object" aria-hidden="true">#</a> util.isArray(object)</h3>',3),An=n("blockquote",null,[n("p",null,"Stability: 0-Deprecated")],-1),Dn=n("ul",null,[n("li",null,[n("code",null,[n("span",{class:"token property"},"object")]),s(" {any}")])],-1),Tn={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,[s("Array"),n("span",{class:"token punctuation"},"."),s("isArray")],-1),On=e(`<p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is an <code><span class="token property">Array</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isboolean-object" tabindex="-1"><a class="header-anchor" href="#util-isboolean-object" aria-hidden="true">#</a> util.isBoolean(object)</h3>`,3),In=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is a <code><span class="token property">Boolean</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isbuffer-object" tabindex="-1"><a class="header-anchor" href="#util-isbuffer-object" aria-hidden="true">#</a> util.isBuffer(object)</h3>`,5),Mn=n("code",null,[s("Buffer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isBuffer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),Ln=e(`<ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is a <code><span class="token property">Buffer</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isdate-object" tabindex="-1"><a class="header-anchor" href="#util-isdate-object" aria-hidden="true">#</a> util.isDate(object)</h3>`,4),Nn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is a <code><span class="token property">Date</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false (without&#39;new&#39; returns a String)</span>
util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-iserror-object" tabindex="-1"><a class="header-anchor" href="#util-iserror-object" aria-hidden="true">#</a> util.isError(object)</h3>`,5),Un=n("blockquote",null,[n("p",null,"Stability: 0-Deprecated")],-1),Bn=n("ul",null,[n("li",null,[n("code",null,[n("span",{class:"token property"},"object")]),s(" {any}")])],-1),Yn=n("code",null,[n("span",{class:"token boolean"},"true")],-1),Cn=n("code",null,[n("span",{class:"token property"},"object")],-1),Pn=n("code",null,[n("span",{class:"token property"},"Error")],-1),Fn=n("code",null,[n("span",{class:"token boolean"},"false")],-1),zn=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&#39;an error occurred&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that this method relies on <code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> behavior. It is possible to obtain an incorrect result when the <code><span class="token property">object</span></code> argument manipulates <code>@@toStringTag</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&#39;an error occurred&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">;</span>
util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isfunction-object" tabindex="-1"><a class="header-anchor" href="#util-isfunction-object" aria-hidden="true">#</a> util.isFunction(object)</h3>`,4),Wn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is a <code><span class="token property">Function</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">Bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isnull-object" tabindex="-1"><a class="header-anchor" href="#util-isnull-object" aria-hidden="true">#</a> util.isNull(object)</h3>`,5),Gn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is strictly <code><span class="token keyword">null</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isnullorundefined-object" tabindex="-1"><a class="header-anchor" href="#util-isnullorundefined-object" aria-hidden="true">#</a> util.isNullOrUndefined(object)</h3>`,5),Hn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is <code><span class="token keyword">null</span></code> or <code><span class="token keyword">undefined</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isNullOrUndefined</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isNullOrUndefined</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isNullOrUndefined</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isnumber-object" tabindex="-1"><a class="header-anchor" href="#util-isnumber-object" aria-hidden="true">#</a> util.isNumber(object)</h3>`,5),Jn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is a <code><span class="token property">Number</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isobject-object" tabindex="-1"><a class="header-anchor" href="#util-isobject-object" aria-hidden="true">#</a> util.isObject(object)</h3>`,5),Vn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is strictly an <code><span class="token property">Object</span></code> <strong>and</strong> not a <code><span class="token property">Function</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isprimitive-object" tabindex="-1"><a class="header-anchor" href="#util-isprimitive-object" aria-hidden="true">#</a> util.isPrimitive(object)</h3>`,5),$n=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is a primitive type. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isregexp-object" tabindex="-1"><a class="header-anchor" href="#util-isregexp-object" aria-hidden="true">#</a> util.isRegExp(object)</h3>`,5),Kn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is a <code><span class="token property">RegExp</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">some regexp</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;another regexp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isstring-object" tabindex="-1"><a class="header-anchor" href="#util-isstring-object" aria-hidden="true">#</a> util.isString(object)</h3>`,5),Qn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is a <code><span class="token property">string</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-issymbol-object" tabindex="-1"><a class="header-anchor" href="#util-issymbol-object" aria-hidden="true">#</a> util.isSymbol(object)</h3>`,5),Xn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is a <code><span class="token property">Symbol</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isSymbol</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isSymbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isSymbol</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isundefined-object" tabindex="-1"><a class="header-anchor" href="#util-isundefined-object" aria-hidden="true">#</a> util.isUndefined(object)</h3>`,5),Zn=e(`<blockquote><p>Stability: 0-Deprecated</p></blockquote><ul><li><code><span class="token property">object</span></code> {any}</li></ul><p>Returns <code><span class="token boolean">true</span></code> if the given <code><span class="token property">object</span></code> is <code><span class="token keyword">undefined</span></code>. Otherwise, returns <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
util<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-log-string" tabindex="-1"><a class="header-anchor" href="#util-log-string" aria-hidden="true">#</a> util.log(string)</h3>`,5),ns=e(`<blockquote><p>Stability: 0-Deprecated: Use a third party module instead.</p></blockquote><ul><li><code><span class="token property">string</span></code> {string}</li></ul><p>The <code>util<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method prints the given <code><span class="token property">string</span></code> to <code><span class="token property">stdout</span></code> with an included timestamp.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Timestamped message.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-print-strings" tabindex="-1"><a class="header-anchor" href="#util-print-strings" aria-hidden="true">#</a> util.print([...strings])</h3>`,5),ss=n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),as=n("p",null,[s("Deprecated predecessor of "),n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),s("log")]),s(".")],-1),es=n("h3",{id:"util-puts-strings",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#util-puts-strings","aria-hidden":"true"},"#"),s(" util.puts([...strings])")],-1),ts=n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")],-1),os=n("p",null,[s("Deprecated predecessor of "),n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),s("log")]),s(".")],-1);function ps(cs,is){const o=i("RouterLink"),c=i("ExternalLinkIcon");return u(),r("div",null,[k,a(` YAML
added: v8.2.0
`),m,n("ul",null,[n("li",null,[n("p",null,[s("The callback is executed asynchronously, and will have a limited stack trace. If the callback throws, the process will emit an "),t(o,{to:"/en/v8/process.html#process_event_uncaughtexception"},{default:p(()=>[v]),_:1}),s(" event, and if not handled will exit.")])]),b]),g,a(` YAML
added: v0.11.3
`),h,n("p",null,[s("The "),f,s(" method is used to create a function that conditionally writes debug messages to "),y,s(" based on the existence of the "),w,s(" environment variable. If the "),_,s(" name appears within the value of that environment variable, then the returned function operates similar to "),t(o,{to:"/en/v8/console.html#console_console_error_data_args"},{default:p(()=>[j]),_:1}),s(". If not, then the returned function is a no-op.")]),x,a(` YAML
added: v0.8.0
`),R,a(" eslint-disable prefer-rest-params "),S,a(` YAML
added: v0.5.3
changes:
  -version: v8.4.0
    pr-url: https://github.com/nodejs/node/pull/14558
    description: The \`%o\` and \`%O\` specifiers are supported now.
`),q,a(` YAML
added: v0.3.0
changes:
  -version: v5.0.0
    pr-url: https://github.com/nodejs/node/pull/3455
    description: The \`constructor\` parameter can refer to an ES6 class now.
`),n("p",null,[A,s(": Usage of "),D,s(" is discouraged. Please use the ES6 "),T,s(" and "),E,s(" keywords to get language level inheritance support. Also note that the two styles are "),n("a",O,[s("semantically incompatible"),t(c)]),s(".")]),I,n("p",null,[s("Inherit the prototype methods from one "),n("a",M,[s("constructor"),t(c)]),s(" into another. The prototype of "),L,s(" will be set to a new object created from "),N,s(".")]),U,a(` YAML
added: v0.3.0
changes:
  -version: v6.6.0
    pr-url: https://github.com/nodejs/node/pull/8174
    description: Custom inspection functions can now return \`this\`.
  -version: v6.3.0
    pr-url: https://github.com/nodejs/node/pull/7499
    description: The \`breakLength\` option is supported now.
  -version: v6.1.0
    pr-url: https://github.com/nodejs/node/pull/6334
    description: The \`maxArrayLength\` option is supported now; in particular,
                 long arrays are truncated by default.
  -version: v6.1.0
    pr-url: https://github.com/nodejs/node/pull/6465
    description: The \`showProxy\` option is supported now.
`),B,a(" type=misc "),Y,a(" type=misc "),C,a(` YAML
added: v6.6.0
`),P,F,a(` YAML
added: v6.4.0
`),z,a(` YAML
added: v8.0.0
`),W,a(` YAML
added: v8.0.0
`),G,H,J,a(` YAML
added: v8.3.0
`),V,n("p",null,[s("An implementation of the "),n("a",$,[s("WHATWG Encoding Standard"),t(c)]),s(),K,s(" API.")]),Q,n("p",null,[s("Per the "),n("a",X,[s("WHATWG Encoding Standard"),t(c)]),s(", the encodings supported by the "),Z,s(" API are outlined in the tables below. For each encoding, one or more aliases may be used.")]),n("p",null,[s("Different Node.js build configurations support different sets of encodings. While a very basic set of encodings is supported even on Node.js builds without ICU enabled, support for some encodings is provided only when Node.js is built with ICU and using the full ICU data (see "),t(o,{to:"/en/v8/intl.html"},{default:p(()=>[s("Internationalization")]),_:1}),s(").")]),nn,n("p",null,[sn,s(": The "),an,s(" encoding listed in the "),n("a",en,[s("WHATWG Encoding Standard"),t(c)]),s(" is not supported.")]),tn,n("ul",null,[on,n("li",null,[pn,s(" {Object} "),n("ul",null,[n("li",null,[cn,s(" {boolean} "),ln,s(" if decoding failures are fatal. Defaults to "),un,s(". This option is only supported when ICU is enabled (see "),t(o,{to:"/en/v8/intl.html"},{default:p(()=>[s("Internationalization")]),_:1}),s(").")]),rn])])]),dn,a(` YAML
added: v8.3.0
`),kn,n("p",null,[s("An implementation of the "),n("a",mn,[s("WHATWG Encoding Standard"),t(c)]),s(),vn,s(" API. All instances of "),bn,s(" only support UTF-8 encoding.")]),gn,a(` YAML
added: v0.7.5
deprecated: v6.0.0
`),n("blockquote",null,[n("p",null,[s("Stability: 0-Deprecated: Use "),n("a",hn,[fn,t(c)]),s(" instead.")])]),yn,n("p",null,[s("It is deprecated and should not be used in new code. JavaScript comes with very similar built-in functionality through "),n("a",wn,[_n,t(c)]),s(".")]),jn,a(` YAML
added: v0.3.0
deprecated: v0.11.3
`),n("blockquote",null,[n("p",null,[s("Stability: 0-Deprecated: Use "),t(o,{to:"/en/v8/console.html#console_console_error_data_args"},{default:p(()=>[xn]),_:1}),s(" instead.")])]),Rn,a(` YAML
added: v0.3.0
deprecated: v0.11.3
`),n("blockquote",null,[n("p",null,[s("Stability: 0-Deprecated: Use "),t(o,{to:"/en/v8/console.html#console_console_error_data_args"},{default:p(()=>[Sn]),_:1}),s(" instead.")])]),qn,a(` YAML
added: v0.6.0
deprecated: v4.0.0
`),An,Dn,n("p",null,[s("Internal alias for "),n("a",Tn,[En,t(c)]),s(".")]),On,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),In,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),n("blockquote",null,[n("p",null,[s("Stability: 0-Deprecated: Use "),t(o,{to:"/en/v8/buffer.html#buffer_class_method_buffer_isbuffer_obj"},{default:p(()=>[Mn]),_:1}),s(" instead.")])]),Ln,a(` YAML
added: v0.6.0
deprecated: v4.0.0
`),Nn,a(` YAML
added: v0.6.0
deprecated: v4.0.0
`),Un,Bn,n("p",null,[s("Returns "),Yn,s(" if the given "),Cn,s(" is an "),t(o,{to:"/en/v8/errors.html#errors_class_error"},{default:p(()=>[Pn]),_:1}),s(". Otherwise, returns "),Fn,s(".")]),zn,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),Wn,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),Gn,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),Hn,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),Jn,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),Vn,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),$n,a(` YAML
added: v0.6.0
deprecated: v4.0.0
`),Kn,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),Qn,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),Xn,a(` YAML
added: v0.11.5
deprecated: v4.0.0
`),Zn,a(` YAML
added: v0.3.0
deprecated: v6.0.0
`),ns,a(` YAML
added: v0.3.0
deprecated: v0.11.3
`),n("blockquote",null,[n("p",null,[s("Stability: 0-Deprecated: Use "),t(o,{to:"/en/v8/console.html#console_console_log_data_args"},{default:p(()=>[ss]),_:1}),s(" instead.")])]),as,es,a(` YAML
added: v0.3.0
deprecated: v0.11.3
`),n("blockquote",null,[n("p",null,[s("Stability: 0-Deprecated: Use "),t(o,{to:"/en/v8/console.html#console_console_log_data_args"},{default:p(()=>[ts]),_:1}),s(" instead.")])]),os])}const rs=l(d,[["render",ps],["__file","util.html.vue"]]);export{rs as default};
