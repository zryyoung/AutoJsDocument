import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as i,a as n,b as a,d as e,e as t,r}from"./app.6aa2b576.js";const l="/docs/assets/ex1.af78d85e.png",c="/docs/assets/ex1-horizontal.3a7740a4.png",u="/docs/assets/ex-properties.87d2fb74.png",d="/docs/assets/ex-w.b5b5f445.png",h="/docs/assets/ex-gravity.9a64f0f9.png",k="/docs/assets/ex-layout-gravity.9b42f6fe.png",m="/docs/assets/ex1-margin.204ad0e5.png",g="/docs/assets/ex2-margin.3d58ccba.png",f="/docs/assets/ex-marginLeft.6cff2e2a.png",b="/docs/assets/ex-padding.9975cd64.png",v={},y=t(`<h1 id="ui" tabindex="-1"><a class="header-anchor" href="#ui" aria-hidden="true">#</a> ui</h1><p>The ui module provides support for writing user interfaces.</p><pre><code>A reminder to Android developers or high-level users, the UI system of Auto.js comes from Android, and all attributes and methods can be found in the Android source code. If some code or attributes do not appear in the Auto.js documentation, you can refer to the Android documentation.
View: https://developer.android.com/reference/android/view/View
Widget: https://developer.android.com/reference/android/widget/package-summary
</code></pre><p>The front of the script with ui must use <code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span></code> to specify the ui mode, otherwise the script will not run in the ui mode. Correct demonstration:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//Other code of the script</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before string &quot;ui&quot; can have comments, blank lines and spaces <strong>[v4.1.0 new]</strong>, but no other codes.</p><p>The interface is composed of views. View is divided into two types, widget and layout. Widgets are used to display text, pictures, web pages, etc., for example, text control (text) is used to display text, button control (button) can display a button and provide a click effect, and image control (img) is used to display Pictures from the Internet or files, in addition to the input box control (input), progress bar control (progressbar), radio check box control (checkbox), etc.; layout (Layout) is equipped with one or more controls The &quot;container&quot; is used to control the position of the controls in it. For example, the vertical layout (vertical) will display the controls in it from top to bottom (that is, the vertical arrangement), and the horizontal layout (horizontal) will place the controls inside it. The controls are displayed in order from left to right (that is, arranged horizontally), and the frame layout (frame), he will display the controls in him directly in the upper left corner, if there are multiple controls, the subsequent controls will overlap the previous controls .</p><p>We use xml to write the interface, and specify the layout xml of the interface through the <code>ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function. for example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
$ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button text<span class="token operator">=</span><span class="token string">&quot;First button&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button text<span class="token operator">=</span><span class="token string">&quot;Second button&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the part from lines 3 to 6 is xml, which specifies the specific content of the interface. The label <code><span class="token operator">&lt;</span>vertical<span class="token operator">&gt;</span> <span class="token operator">...</span> <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span></code> on the third line of the code indicates vertical layout. The layout label usually starts with <code><span class="token operator">&lt;</span><span class="token operator">...</span><span class="token operator">&gt;</span></code> and ends with <code><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">...</span><span class="token operator">&gt;</span></code>, two The content between the tags is the content in the layout, such as <code><span class="token operator">&lt;</span>frame<span class="token operator">&gt;</span> <span class="token operator">...</span> <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span></code>. In this example, the content of lines 4 and 5 is the content in the vertical layout (vertical). The fourth line of the code is a button control (button). The label of the control usually starts with <code><span class="token operator">&lt;</span><span class="token operator">...</span></code> and ends with <code><span class="token operator">/</span><span class="token operator">&gt;</span></code>. Between them are the specific attributes of the control, such as <code><span class="token operator">&lt;</span>text <span class="token operator">...</span> <span class="token operator">/</span> <span class="token operator">&gt;</span></code>. In this example, the part of <code>text<span class="token operator">=</span><span class="token string">&quot;first button&quot;</span></code> is the attribute of the button control (button), which specifies the text content (text) of this button control as &quot;the first button&quot;.</p><p>The 5th line of the code is the same as the 4th line, which is also a button control, except that its text content is &quot;the second button&quot;. These two controls are in a vertical layout, so they will be arranged vertically, the effect is as shown in the figure:</p><p><img src="`+l+`" alt="ex1" loading="lazy"></p><p>If we change the vertical layout (vertical) of this example to horizontal layout (horizontal), that is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>horizontal<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button text<span class="token operator">=</span><span class="token string">&quot;First button&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button text<span class="token operator">=</span><span class="token string">&quot;Second button&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>horizontal<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The two buttons will be arranged horizontally, and the effect is as shown in the figure:</p><p><img src="`+c+`" alt="ex1-horizontal" loading="lazy"></p><p>A control can specify multiple attributes (or even no attributes), separated by spaces; the layout can also specify attributes, for example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical bg<span class="token operator">=</span><span class="token string">&quot;#ff0000&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button text<span class="token operator">=</span><span class="token string">&quot;First button&quot;</span> textSize<span class="token operator">=</span><span class="token string">&quot;20sp&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button text<span class="token operator">=</span><span class="token string">&quot;Second button&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The third line <code>bg<span class="token operator">=</span><span class="token string">&quot;#ff0000&quot;</span></code> specifies the background color (bg) of the vertical layout as &quot;#ff0000&quot;, which is an RGB color, which means red (for related knowledge of RGB, please refer to [RGB color comparison table] (http \u{1F615}/tool.oschina.net/commons?type=3)). The fourth line of <code>textSize<span class="token operator">=</span><span class="token string">&quot;20sp&quot;</span></code> specifies the font size (textSize) of the button control as &quot;20sp&quot;, and sp is a font unit, so don&#39;t worry about it in depth for now. The effect of the above code is as follows:</p><p><img src="`+u+`" alt="ex-properties" loading="lazy"></p><p>An interface consists of several layouts and controls. In order to facilitate the reading of the document, let us explain the following terms:</p><ul><li>Sub-view, sub-control: The control in the layout is the sub-control/sub-view of this layout. In fact, there are not only controls in the layout, but also nested layouts. Therefore, it is more accurate to use Child View. In the above example, the button is the child control of the vertical layout.</li><li>Parent view, parent layout: The layout that directly contains a control is the parent layout/parent view of this control. In the above example, the vertical layout is the parent layout of the button.</li></ul><h1 id="view-view" tabindex="-1"><a class="header-anchor" href="#view-view" aria-hidden="true">#</a> View: View</h1><p>Controls and layouts belong to the view (View). In this chapter, we will introduce the common properties and functions of all controls and layouts. For example, attribute background, width and height, etc. (all controls and layouts can set the background and width and height), the function <code><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> sets the action performed when the view is clicked.</p><h2 id="attr-name-value" tabindex="-1"><a class="header-anchor" href="#attr-name-value" aria-hidden="true">#</a> attr(name, value)</h2><ul><li><code><span class="token property">name</span></code> {string} attribute name</li><li><code><span class="token property">value</span></code> {string} The value of the attribute</li></ul><p>Set the value of the attribute. The attribute designation is the attribute of View in xml. For example, you can use the statement <code><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">)</span></code> to set the text value of the text control.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>

$ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>frame<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text id<span class="token operator">=</span><span class="token string">&quot;example&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Hello&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// execute after 5 seconds</span>
$ui<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// modify the text</span>
    $ui<span class="token punctuation">.</span>example<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello, Auto.js UI&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// modify background</span>
    $ui<span class="token punctuation">.</span>example<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;bg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#ff00ff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// modify the height</span>
    $ui<span class="token punctuation">.</span>example<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;500dp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note:</strong> Not all properties can be set in js code. Some properties can only be set when the layout is created, such as the style property. Although some properties can be set in code, they are not yet supported; for these In case, Auto.js Pro 8.1.0+ will throw an exception, other versions will not throw an exception.</p><h2 id="attr-name" tabindex="-1"><a class="header-anchor" href="#attr-name" aria-hidden="true">#</a> attr(name)</h2><ul><li><code><span class="token property">name</span></code> {string} attribute name</li><li>Return {string}</li></ul><p>Get the value of the attribute.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>

$ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>frame<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text id<span class="token operator">=</span><span class="token string">&quot;example&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Get text</span>
    <span class="token keyword">let</span> text <span class="token operator">=</span> $ui<span class="token punctuation">.</span>example<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// parse as a number</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// number plus 1</span>
    num<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">// set text</span>
    $ui<span class="token punctuation">.</span>example<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// continue in 1 second</span>
    $ui<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="w" tabindex="-1"><a class="header-anchor" href="#w" aria-hidden="true">#</a> w</h2><p>The width of the View is an abbreviation of the attribute <code><span class="token property">width</span></code>. The values \u200B\u200Bthat can be set are <code><span class="token operator">*</span></code>, <code><span class="token property">auto</span></code> and specific values. Among them, <code><span class="token operator">*</span></code> means width <strong>fill the parent layout as much as possible</strong>, and <code><span class="token property">auto</span></code> means that the width will be automatically adjusted according to the content of the View (adaptive width). E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>horizontal<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button w<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Adaptive width&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button w<span class="token operator">=</span><span class="token string">&quot;*&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Fill the parent layout&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>horizontal<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the first button is an adaptive width, and the second button is to fill the parent layout. The display effect is:</p><p><img src="`+d+`" alt="ex-w" loading="lazy"></p><p>If this property is not set, different controls and layouts have different default widths, most of which are <code><span class="token property">auto</span></code>.</p><p>The width attribute can also specify a specific value. For example, <code>w<span class="token operator">=</span><span class="token string">&quot;20&quot;</span></code>, <code>w<span class="token operator">=</span><span class="token string">&quot;20px&quot;</span></code>, etc. Without a unit, the default unit is dp, and other units include px (pixel), mm (millimeter), and in (inch). For more information about the unit of dimensions, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>horizontal<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button w<span class="token operator">=</span><span class="token string">&quot;200&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Width 200dp&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button w<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Width 100dp&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>horizontal<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="h" tabindex="-1"><a class="header-anchor" href="#h" aria-hidden="true">#</a> h</h2><p>The height of the View is an abbreviation of the property <code><span class="token property">height</span></code>. The values \u200B\u200Bthat can be set are <code><span class="token operator">*</span></code>, <code><span class="token property">auto</span></code> and specific values. Among them, <code><span class="token operator">*</span></code> means width <strong>fill the parent layout as much as possible</strong>, and <code><span class="token property">auto</span></code> means that the width will be automatically adjusted according to the content of the View (adaptive width).</p><p>If this property is not set, different controls and layouts have different default heights, most of which are <code><span class="token property">auto</span></code>.</p><p>The width attribute can also specify a specific value. For example, <code>h<span class="token operator">=</span><span class="token string">&quot;20&quot;</span></code>, <code>h<span class="token operator">=</span><span class="token string">&quot;20px&quot;</span></code>, etc. Without a unit, the default unit is dp, and other units include px (pixel), mm (millimeter), and in (inch). For more information about the unit of dimensions, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> id</h2><p>View id is used to distinguish different controls and layouts under an interface. The id of an interface is usually unique under the same interface, that is, generally there is no two Views with the same id. The id attribute is also a bridge connecting the xml layout and JavaScript code. In the code, you can get this View through the id of a View and perform operations on it (set click actions, set attributes, get attributes, etc.). E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>frame<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;ok&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;OK&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Get the button control through ui.ok</span>
<span class="token function">toast</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>ok<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, there is a button control &quot;OK&quot;, the id attribute is &quot;ok&quot;, then we can use <code>ui<span class="token punctuation">.</span>ok</code> in the code to get it, and then get the text content of this button control through the <code><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function . In addition, the frame layout (frame) is used in this example because we only have one control, so it is used for the simplest layout frame layout.</p><h2 id="gravity" tabindex="-1"><a class="header-anchor" href="#gravity" aria-hidden="true">#</a> gravity</h2><p>The &quot;gravity&quot; of the View. Used to determine the position of the View content relative to the View, the values \u200B\u200Bthat can be set are:</p><ul><li><code><span class="token property">left</span></code> to the left</li><li><code><span class="token property">right</span></code> to the right</li><li><code><span class="token property">top</span></code> to the top</li><li><code><span class="token property">bottom</span></code> to the bottom</li><li><code><span class="token property">center</span></code></li><li><code><span class="token property">center_vertical</span></code> vertical center</li><li><code><span class="token property">center_horizontal</span></code> horizontally centered</li></ul><p>For example, for a button control, <code>gravity<span class="token operator">=</span><span class="token string">&quot;right&quot;</span></code> will make theThe text content is displayed to the right. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>frame<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button gravity<span class="token operator">=</span><span class="token string">&quot;right&quot;</span> w<span class="token operator">=</span><span class="token string">&quot;*&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;right text&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The display effect is:</p><p><img src="`+h+`" alt="ex-gravity" loading="lazy"></p><p>These attributes can be combined. For example, the content of the View of <code>gravity<span class="token operator">=</span><span class="token string">&quot;right|bottom&quot;</span></code> will be in the lower right corner.</p><h2 id="layout-gravity" tabindex="-1"><a class="header-anchor" href="#layout-gravity" aria-hidden="true">#</a> layout_gravity</h2><p>The &quot;gravity&quot; of the View in the layout is used to determine the position of the View itself in its <strong>parent layout</strong>. The value that can be set is the same as the gravity attribute. Pay attention to distinguish this attribute from the gravity attribute.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>frame w<span class="token operator">=</span><span class="token string">&quot;*&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;*&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button layout_gravity<span class="token operator">=</span><span class="token string">&quot;center&quot;</span> w<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;centered button&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button layout_gravity<span class="token operator">=</span><span class="token string">&quot;right|bottom&quot;</span> w<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;the button in the lower right corner&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we make the size of the frame layout (frame) fill the entire screen, by setting the attribute <code>layout_gravity<span class="token operator">=</span><span class="token string">&quot;center&quot;</span></code> to the first button to center the button in the frame layout, and setting the second button The attribute <code>layout_gravity<span class="token operator">=</span><span class="token string">&quot;right|bottom&quot;</span></code> makes it in the lower right corner of the frame layout. The effect is as follows:</p><p><img src="`+k+`" alt="ex-layout-gravity" loading="lazy"></p><p>It should be noted that the attribute of layout_gravity may not always be effective, depending on the type of layout. For example, the first child control in the horizontal layout cannot be displayed at the bottom (otherwise it is contrary to the horizontal layout itself).</p><h2 id="margin" tabindex="-1"><a class="header-anchor" href="#margin" aria-hidden="true">#</a> margin</h2><p>Margin is the distance between the View and other Views, that is, the outer margin. The margin attribute includes four values:</p><ul><li><code><span class="token property">marginLeft</span></code> left margin</li><li><code><span class="token property">marginRight</span></code> right margin</li><li><code><span class="token property">marginTop</span></code> upper margin</li><li><code><span class="token property">marginBottom</span></code> bottom margin</li></ul><p>The value of the margin attribute itself can have three formats:</p><ul><li><code>margin<span class="token operator">=</span><span class="token string">&quot;marginAll&quot;</span></code> specifies that each margin is the same value. For example, <code>margin<span class="token operator">=</span><span class="token string">&quot;10&quot;</span></code> means that the left and right margins are 10dp.</li><li><code>margin<span class="token operator">=</span><span class="token string">&quot;marginLeft marginTop marginRight marginBottom&quot;</span></code> specify each margin separately. For example, <code>margin<span class="token operator">=</span><span class="token string">&quot;10 20 30 40&quot;</span></code> means that the left margin is 10dp, the top margin is 20dp, the right margin is 30dp, and the bottom margin is 40dp</li><li><code>margin<span class="token operator">=</span><span class="token string">&quot;marginHorizontal marginVertical&quot;</span></code> specifies the horizontal and vertical margins. For example, <code>margin<span class="token operator">=</span><span class="token string">&quot;10 20&quot;</span></code> means that the left and right margins are 10dp, and the top and bottom margins are 20dp.</li></ul><p>Use an example to specifically understand the meaning of margins:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>horizontal<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button margin<span class="token operator">=</span><span class="token string">&quot;30&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;30 from all around&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button text<span class="token operator">=</span><span class="token string">&quot;Normal button&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>horizontal<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The margin attribute of the first button specifies that its margin is 30dp, that is, the distance between him and the horizontal layout and the second button are both 30dp, and the display effect is as follows:</p><p><img src="`+m+'" alt="ex1-margin" loading="lazy"></p><p>If you change <code>margin<span class="token operator">=</span><span class="token string">&quot;30&quot;</span></code> to <code>margin<span class="token operator">=</span><span class="token string">&quot;10 40&quot;</span></code>, then the left and right spacing of the first button is 10dp, and the top and bottom spacing is 40dp, the effect is as follows:</p><p><img src="'+g+`" alt="ex2-margin" loading="lazy"></p><p>For the unit of the margin attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="marginleft" tabindex="-1"><a class="header-anchor" href="#marginleft" aria-hidden="true">#</a> marginLeft</h2><p>The left margin of the View. If this attribute conflicts with the value specified by the margin attribute, the following attributes will take effect, and the preceding attributes will be invalid. For example, the left margin of <code>margin<span class="token operator">=</span><span class="token string">&quot;20&quot;</span> marginLeft<span class="token operator">=</span><span class="token string">&quot;10&quot;</span></code> is 10dp, and the other margins are 20dp.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>horizontal<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button marginLeft<span class="token operator">=</span><span class="token string">&quot;50&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;50 from the left&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button text<span class="token operator">=</span><span class="token string">&quot;Normal button&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>horizontal<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first button specifies a left margin of 50dp, then the left margin of the horizontal layout (horizontal) between him and his parent layout is 50dp, the effect is as follows:</p><p><img src="`+f+`" alt="ex-marginLeft" loading="lazy"></p><h2 id="marginright" tabindex="-1"><a class="header-anchor" href="#marginright" aria-hidden="true">#</a> marginRight</h2><p>The right margin of the View. If this attribute conflicts with the value specified by the margin attribute, the latter attribute takes effect and the previous attribute is invalid.</p><h2 id="margintop" tabindex="-1"><a class="header-anchor" href="#margintop" aria-hidden="true">#</a> marginTop</h2><p>The top margin of the View. If this attribute conflicts with the value specified by the margin attribute, the latter attribute takes effect and the previous attribute is invalid.</p><h2 id="marginbottom" tabindex="-1"><a class="header-anchor" href="#marginbottom" aria-hidden="true">#</a> marginBottom</h2><p>The bottom margin of the View. If this attribute conflicts with the value specified by the margin attribute, the latter attribute takes effect and the previous attribute is invalid.</p><h2 id="padding" tabindex="-1"><a class="header-anchor" href="#padding" aria-hidden="true">#</a> padding</h2><p>The distance between the View and its own content, that is, the inner margin. Note that to distinguish it from the margin property, the margin property is the spacing between the View, and padding is the spacing between the View and its own content. For example, the padding of a text control is the distance between the edge of the text control and its text content, and paddingLeft is the distance between the left side of the text control and its text content.</p><p>The value of the padding attribute also has three formats:</p><ul><li><code>padding<span class="token operator">=</span><span class="token string">&quot;paddingAll&quot;</span></code> specifies that each padding is the same value. For example, <code>padding<span class="token operator">=</span><span class="token string">&quot;10&quot;</span></code> means that the left, right, top, and bottom padding are both 10dp.</li><li><code>padding<span class="token operator">=</span><span class="token string">&quot;paddingLeft paddingTop paddingRight paddingBottom&quot;</span></code> specify each padding separately. For example, <code>padding<span class="token operator">=</span><span class="token string">&quot;10 20 30 40&quot;</span></code> means that the left padding is 10dp, the top padding is 20dp, the right padding is 30dp, and the bottom padding is 40dp.</li><li><code>padding<span class="token operator">=</span><span class="token string">&quot;paddingHorizontal paddingVertical&quot;</span></code> specifies the horizontal padding and vertical padding. For example, <code>padding<span class="token operator">=</span><span class="token string">&quot;10 20&quot;</span></code> means that the left and right padding is 10dp, and the top and bottom padding is 20dp.</li></ul><p>Use an example to specifically understand the meaning of padding:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>frame w<span class="token operator">=</span><span class="token string">&quot;*&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;*&quot;</span> gravity<span class="token operator">=</span><span class="token string">&quot;center&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text padding<span class="token operator">=</span><span class="token string">&quot;10 20 30 40&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#ff0000&quot;</span> w<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This example is a centered button (set by the <code>gravity<span class="token operator">=</span><span class="token string">&quot;center&quot;</span></code> property of the parent layout), the background color is red (<code>bg<span class="token operator">=</span><span class="token string">&quot;#ff0000&quot;</span></code>), the text content is &quot;HelloWorld&quot;, and the left margin is 10dp. The top margin is 20dp, the bottom margin is 30dp, and the right margin is 40dp. The display effect is as follows:</p><p><img src="`+b+'" alt="ex-padding" loading="lazy"></p><h2 id="paddingleft" tabindex="-1"><a class="header-anchor" href="#paddingleft" aria-hidden="true">#</a> paddingLeft</h2><p>The left inner margin of the View. If this attribute conflicts with the value specified by the padding attribute, the latter attribute takes effect and the previous attribute is invalid.</p><h2 id="paddingright" tabindex="-1"><a class="header-anchor" href="#paddingright" aria-hidden="true">#</a> paddingRight</h2><p>The right inner margin of the View. If this attribute conflicts with the value specified by the padding attribute, the latter attribute takes effect and the previous attribute is invalid.</p><h2 id="paddingtop" tabindex="-1"><a class="header-anchor" href="#paddingtop" aria-hidden="true">#</a> paddingTop</h2><p>The top padding of the View. If this attribute conflicts with the value specified by the padding attribute, the latter attribute takes effect and the previous attribute is invalid.</p><h2 id="paddingbottom" tabindex="-1"><a class="header-anchor" href="#paddingbottom" aria-hidden="true">#</a> paddingBottom</h2><p>The bottom padding of the View. If this attribute conflicts with the value specified by the padding attribute, the latter attribute takes effect and the previous attribute is invalid.</p><h2 id="bg" tabindex="-1"><a class="header-anchor" href="#bg" aria-hidden="true">#</a> bg</h2><p>View background. The value can be an image pointed to by a link or path, or a color in RGB format, or other background. See <a href="#draw">Drawables</a> for details.</p><p>For example, <code>bg<span class="token operator">=</span><span class="token string">&quot;#00ff00&quot;</span></code> sets the background to green, <code>bg<span class="token operator">=</span><span class="token string">&quot;file:///sdcard/1.png&quot;</span></code> sets the background to the picture &quot;1.png&quot;, <code>bg<span class="token operator">=</span><span class="token string">&quot;?attr/selectableItemBackground&quot;</span></code>Set the background to the ripple effect that appears when you click (may need to set <code>clickable<span class="token operator">=</span><span class="token string">&quot;true&quot;</span></code> at the same time to take effect).</p><h2 id="alpha" tabindex="-1"><a class="header-anchor" href="#alpha" aria-hidden="true">#</a> alpha</h2><p>The transparency of the View, its value is a decimal between 0 and 1, 0 means completely transparent, 1 means completely opaque. For example, <code>alpha<span class="token operator">=</span><span class="token string">&quot;0.5&quot;</span></code> means semi-transparent.</p><h2 id="foreground" tabindex="-1"><a class="header-anchor" href="#foreground" aria-hidden="true">#</a> foreground</h2><p>View the foreground. The foreground is the content displayed on the content of a View, which may overwrite the content of the View itself. Its value is similar to the value of the attribute bg.</p><h2 id="minheight" tabindex="-1"><a class="header-anchor" href="#minheight" aria-hidden="true">#</a> minHeight</h2><p>The minimum height of the View. This value is not always effective, depending on whether the parent layout has enough space to accommodate it.</p><p>Example: <code><span class="token operator">&lt;</span>text height<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> minHeight<span class="token operator">=</span><span class="token string">&quot;50&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><p>For the unit of this attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="minwidth" tabindex="-1"><a class="header-anchor" href="#minwidth" aria-hidden="true">#</a> minWidth</h2><p>The minimum width of the View. This value is not always effective, depending on whether the parent layout has enough space to accommodate it.</p><p>Example: <code><span class="token operator">&lt;</span>input width<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span> minWidth<span class="token operator">=</span><span class="token string">&quot;50&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><p>For the unit of this attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="visibility" tabindex="-1"><a class="header-anchor" href="#visibility" aria-hidden="true">#</a> visibility</h2><p>The visibility of the View, this property can determine whether the View is displayed. Its value can be:</p><ul><li><code><span class="token property">gone</span></code> is not visible.</li><li><code><span class="token property">visible</span></code> is visible. Views are visible by default.</li><li><code><span class="token property">invisible</span></code> is not visible, but still occupies space.</li></ul><h2 id="rotation" tabindex="-1"><a class="header-anchor" href="#rotation" aria-hidden="true">#</a> rotation</h2><p>The rotation angle of the View. Through this attribute, the View can be rotated clockwise by a certain angle. For example, <code>rotation<span class="token operator">=</span><span class="token string">&quot;90&quot;</span></code> can make him rotate 90 degrees clockwise.</p><p>If you want to set the center of rotation, you can set it through the <code><span class="token property">transformPivotX</span></code>, <code><span class="token property">transformPivotY</span></code> properties. The default rotation center is the center of the View.</p><h2 id="transformpivotx" tabindex="-1"><a class="header-anchor" href="#transformpivotx" aria-hidden="true">#</a> transformPivotX</h2><p>The coordinate x of the transformation center of the View. The center coordinates used for the rotation, scaling, and other transformations of the View. For example, <code>transformPivotX<span class="token operator">=</span><span class="token string">&quot;10&quot;</span></code>.</p><p>The coordinate system of this coordinate takes the upper left corner of the View as the origin. That is, the x value is the distance from the center of the transformation to the left side of the View.</p><p>For the unit of this attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="transformpivoty" tabindex="-1"><a class="header-anchor" href="#transformpivoty" aria-hidden="true">#</a> transformPivotY</h2><p>The transformation center coordinate y of the View. The center coordinates used for the rotation, scaling, and other transformations of the View. For example, <code>transformPivotY<span class="token operator">=</span><span class="token string">&quot;10&quot;</span></code>.</p><p>The coordinate system of this coordinate takes the upper left corner of the View as the origin. That is, the y value is the distance from the transform center to the upper edge of the View.</p><p>For the unit of this attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="style" tabindex="-1"><a class="header-anchor" href="#style" aria-hidden="true">#</a> style</h2><p>Set the style of the View. Different controls have different optional built-in styles. See the description of each control for details.</p><p>It should be noted that the style attribute only supports Android 5.1 and above.</p><h1 id="text-control-text" tabindex="-1"><a class="header-anchor" href="#text-control-text" aria-hidden="true">#</a> Text control: text</h1><p>The text control is used to display text, you can control the font size, font color, font, etc. of the text.</p>',136),x={href:"https://developer.android.google.cn/reference/android/widget/TextView.html",target:"_blank",rel:"noopener noreferrer"},q=t('<h2 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> text</h2><p>Set the content of the text. For example, <code>text<span class="token operator">=</span><span class="token string">&quot;a piece of text&quot;</span></code>.## textColor</p><p>Set the color of the font. It can be a color in RGB format (such as #ff00ff), or a color name (such as red, green, etc.). For details, see <a href="#ui_%E8%89%B2">Color</a>.</p><p>Example, red font: <code><span class="token operator">&lt;</span>text text<span class="token operator">=</span><span class="token string">&quot;red font&quot;</span> textColor<span class="token operator">=</span><span class="token string">&quot;red&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h2 id="textsize" tabindex="-1"><a class="header-anchor" href="#textsize" aria-hidden="true">#</a> textSize</h2><p>Set the font size, the unit is usually sp. According to Material Design&#39;s specifications, the body font size is 14sp, the title font size is 18sp, and the subtitle font size is 16sp.</p><p>Example, super large font: <code><span class="token operator">&lt;</span>text text<span class="token operator">=</span><span class="token string">&quot;super large font&quot;</span> textSize<span class="token operator">=</span><span class="token string">&quot;40sp&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h2 id="textstyle" tabindex="-1"><a class="header-anchor" href="#textstyle" aria-hidden="true">#</a> textStyle</h2><p>Set the font style, such as italic, bold, etc. The optional values \u200B\u200Bare:</p><ul><li>bold bold font</li><li>italic italic</li><li>normal normal font</li></ul><p>You can use or (&quot;|&quot;) to combine them, such as &quot;bold|italic&quot; in bold and italic.</p>',11),w=n("p",null,[a("For example, bold: `"),n("text",{textStyle:"bold",textSize:"18sp",text:"This is bold"})],-1),T=t(`<h2 id="lines" tabindex="-1"><a class="header-anchor" href="#lines" aria-hidden="true">#</a> lines</h2><p>Set the number of lines of the text control. Even if the text content does not reach the set number of lines, the control will leave a corresponding width to display blank lines; if the text content exceeds the set number of lines, the excess part will not be displayed.</p><p>In addition, multiple lines of text cannot be set in xml, and should be set in the code. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text id<span class="token operator">=</span><span class="token string">&quot;myText&quot;</span> line<span class="token operator">=</span><span class="token string">&quot;3&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
<span class="token comment">//Pass through \\n to wrap</span>
ui<span class="token punctuation">.</span>myText<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;The first line\\nThe second line\\nThe third line\\nThe fourth line&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="maxlines" tabindex="-1"><a class="header-anchor" href="#maxlines" aria-hidden="true">#</a> maxLines</h2><p>Set the maximum number of lines of the text control.</p><h2 id="typeface" tabindex="-1"><a class="header-anchor" href="#typeface" aria-hidden="true">#</a> typeface</h2><p>Set the font. The optional values \u200B\u200Bare:</p><ul><li><code><span class="token property">normal</span></code> normal font</li><li><code><span class="token property">sans</span></code> serif font</li><li><code><span class="token property">serif</span></code> sans serif font</li><li><code><span class="token property">monospace</span></code> monospace font</li></ul><p>Example, monospace font: <code><span class="token operator">&lt;</span>text text<span class="token operator">=</span><span class="token string">&quot;monospace font&quot;</span> typeface<span class="token operator">=</span><span class="token string">&quot;monospace&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h2 id="ellipsize" tabindex="-1"><a class="header-anchor" href="#ellipsize" aria-hidden="true">#</a> ellipsize</h2><p>Set the ellipsis position of the text. The ellipsis of the text will be displayed when the text content exceeds the text control. The optional values \u200B\u200Bare:</p><ul><li><code><span class="token property">end</span></code> displays an ellipsis at the end of the text</li><li><code><span class="token property">marquee</span></code> marquee effect, the text will be scrolled</li><li><code><span class="token property">middle</span></code> displays an ellipsis in the middle of the text</li><li><code><span class="token property">none</span></code> does not display the ellipsis</li><li><code><span class="token property">start</span></code> displays an ellipsis at the beginning of the text</li></ul><h2 id="ems" tabindex="-1"><a class="header-anchor" href="#ems" aria-hidden="true">#</a> ems</h2><p>When this property is set, the character length displayed by the TextView (unit is em), the excess part will not be displayed, or the ellipsis will be displayed according to the setting of the ellipsize property.</p>`,15),j=n("p",null,[a("For example, to limit text to a maximum of 5em: `"),n("text",{ems:"5",ellipsize:"end",text:"Very long, very long, very long, very long, very long, very long text"})],-1),I=t('<h2 id="autolink" tabindex="-1"><a class="header-anchor" href="#autolink" aria-hidden="true">#</a> autoLink</h2><p>Control whether links such as url and email address are automatically found and converted into clickable links. The default value is &quot;none&quot;.</p><p>Setting this value can make the links, phone calls, etc. in the text clickable.</p><p>The optional value is a combination of the following values \u200B\u200Bthrough or (&quot;|&quot;):</p><ul><li><code><span class="token property">all</span></code> matches all connections, emails, addresses, phone numbers</li><li><code><span class="token property">email</span></code> matches email address</li><li><code><span class="token property">map</span></code> matches the map address</li><li><code><span class="token property">none</span></code> does not match (default)</li><li><code><span class="token property">phone</span></code> matches phone number</li><li><code><span class="token property">web</span></code> matches URL address</li></ul><p>Example: <code><span class="token operator">&lt;</span>text autoLink<span class="token operator">=</span><span class="token string">&quot;web|phone&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Baidu: http://www.baidu.com Telecom phone: 10000&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h1 id="button-control-button" tabindex="-1"><a class="header-anchor" href="#button-control-button" aria-hidden="true">#</a> Button control: button</h1><p>The button control is a special text control, so all the function properties of the text control are applicable to the button control.</p><p>In addition, the button control has some built-in styles, which are set through the <code><span class="token property">style</span></code> property, including:</p><ul><li>Widget.AppCompat.Button.Colored button with color</li><li>Widget.AppCompat.Button.Borderless borderless button</li><li>Widget.AppCompat.Button.Borderless.Colored borderless button with color</li></ul><p>For the specific effects of these styles, please refer to &quot;Sample/Interface Control/Button Control.js&quot;.</p><p>For example: <code><span class="token operator">&lt;</span>button style<span class="token operator">=</span><span class="token string">&quot;Widget.AppCompat.Button.Colored&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Beautiful button&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h1 id="input-box-control-input" tabindex="-1"><a class="header-anchor" href="#input-box-control-input" aria-hidden="true">#</a> Input box control: input</h1>',13),z={href:"https://developer.android.google.cn/reference/android/widget/EditText.html",target:"_blank",rel:"noopener noreferrer"},V=t(`<p>For an input box control, we can set its content through the text attribute, and specify the number of lines in the input box through the lines attribute; get the input content through the <code><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function in the code. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical padding<span class="token operator">=</span><span class="token string">&quot;16&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text textSize<span class="token operator">=</span><span class="token string">&quot;16sp&quot;</span> textColor<span class="token operator">=</span><span class="token string">&quot;black&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Please enter your name&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;name&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;\u5C0F\u660E&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;ok&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;OK&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Specify the action to be performed when the OK button is clicked</span>
ui<span class="token punctuation">.</span>ok<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Get the input content through getText()</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> ui<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">toast</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition, the input box control has other main properties (although these properties are also available for text controls, they are generally only used for input box controls):</p><h2 id="hint" tabindex="-1"><a class="header-anchor" href="#hint" aria-hidden="true">#</a> hint</h2><p>Enter the prompt. This prompt will be displayed when the input box is empty.</p><p>The code for the above picture effect is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input hint<span class="token operator">=</span><span class="token string">&quot;Please enter your name&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="textcolorhint" tabindex="-1"><a class="header-anchor" href="#textcolorhint" aria-hidden="true">#</a> textColorHint</h2><p>Specify the font color of the input prompt.</p><h2 id="textsizehint" tabindex="-1"><a class="header-anchor" href="#textsizehint" aria-hidden="true">#</a> textSizeHint</h2><p>Specify the font size of the input prompt.</p><h2 id="inputtype" tabindex="-1"><a class="header-anchor" href="#inputtype" aria-hidden="true">#</a> inputType</h2><p>Specify the type of text that can be entered in the input box. The optional values \u200B\u200Bare the following values \u200B\u200Band their combination with &quot;|&quot;:</p><ul><li><code><span class="token property">date</span></code> is used to enter the date.</li><li><code><span class="token property">datetime</span></code> is used to enter the date and time.</li><li><code><span class="token property">none</span></code> has no content type. This input box cannot be edited.</li><li><code><span class="token property">number</span></code> can only enter numbers.</li><li><code><span class="token property">numberDecimal</span></code> can be combined with number and its other options to allow input of decimal numbers (including decimals).</li><li><code><span class="token property">numberPassword</span></code> can only enter a number password.</li><li><code><span class="token property">numberSigned</span></code> can be combined with number and its other options to allow the input of signed numbers.</li><li><code><span class="token property">phone</span></code> is used to enter a phone number.</li><li><code><span class="token property">text</span></code> is just normal text.</li><li><code><span class="token property">textAutoComplete</span></code> can be combined with text and its other options to specify that this field will do its own auto-completion and interact with the input method appropriately.</li><li><code><span class="token property">textAutoCorrect</span></code> can be combined with text and its other options to request automatic text input error correction.</li><li><code><span class="token property">textCapCharacters</span></code> can be combined with text and its other options to request all characters in uppercase.</li><li><code><span class="token property">textCapSentences</span></code> can be combined with text and its other options to request capitalization of the first character in each sentence.</li><li><code><span class="token property">textCapWords</span></code> can be combined with text and its other options to request that the first character in each word be capitalized.</li><li><code><span class="token property">textEmailAddress</span></code> is used to enter an email address.</li><li><code><span class="token property">textEmailSubject</span></code> is used to enter the subject of the email.</li><li><code><span class="token property">textImeMultiLine</span></code> can be combined with text and its other options to indicate that although the regular text view should not be multi-line, if possible, IME should provide multi-line support.</li><li><code><span class="token property">textLongMessage</span></code> is used to enter the content of a long message.</li><li><code><span class="token property">textMultiLine</span></code> can be combined with text and its other options to allow multiple lines of text in the field. If this flag is not set, the text field will be restricted to a single line.</li><li><code><span class="token property">textNoSuggestions</span></code> can be combined with text and its other options to indicate that the input method should not display any dictionary-based word suggestions.</li><li><code><span class="token property">textPassword</span></code> is used to enter the password.</li><li><code><span class="token property">textPersonName</span></code> is used to enter a person&#39;s name.</li><li><code><span class="token property">textPhonetic</span></code> is used to enter text that is pronounced in pinyin, such as the pinyin name field in a contact entry.</li><li><code><span class="token property">textPostalAddress</span></code> is used to enter the postal address.</li><li><code><span class="token property">textShortMessage</span></code> is used to input short message content.</li><li><code><span class="token property">textUri</span></code> is used to enter a URI.</li><li><code><span class="token property">textVisiblePassword</span></code> is used to enter a visible password.</li><li><code><span class="token property">textWebEditText</span></code> is used to enter the text in the web form.</li><li><code><span class="token property">textWebEmailAddress</span></code> is used to enter an email address in a web form.</li><li><code><span class="token property">textWebPassword</span></code> is used to enter a password in a web form.</li><li><code><span class="token property">time</span></code> is used to enter the time.</li></ul><p>For example, if you want to specify the input type of an input box as a decimal number, it is: <code><span class="token operator">&lt;</span>input inputType<span class="token operator">=</span><span class="token string">&quot;number|numberDecimal&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h2 id="password" tabindex="-1"><a class="header-anchor" href="#password" aria-hidden="true">#</a> password</h2><p>Specify whether the input box is a password input box. The default is <code><span class="token boolean">false</span></code>.</p><p>For example: <code><span class="token operator">&lt;</span>input password<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h2 id="numeric" tabindex="-1"><a class="header-anchor" href="#numeric" aria-hidden="true">#</a> numeric</h2><p>Specify whether the input box is a number input box. The default is <code><span class="token boolean">false</span></code>.</p><p>For example: <code><span class="token operator">&lt;</span>input numeric<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h2 id="phonenumber" tabindex="-1"><a class="header-anchor" href="#phonenumber" aria-hidden="true">#</a> phoneNumber</h2><p>Specify whether the input box is a phone number input box. The default is <code><span class="token boolean">false</span></code>.</p><p>For example: <code><span class="token operator">&lt;</span>input phoneNumber<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h2 id="digit" tabindex="-1"><a class="header-anchor" href="#digit" aria-hidden="true">#</a> digit</h2><p>Specify the characters that can be entered in the input box. For example, to specify that the input box can only enter &quot;1234567890+-&quot;, it is <code><span class="token operator">&lt;</span>input digit<span class="token operator">=</span><span class="token string">&quot;1234567890+-&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code>.</p><h2 id="singleline" tabindex="-1"><a class="header-anchor" href="#singleline" aria-hidden="true">#</a> singleLine</h2><p>Specify whether the input box is a single-line input box. The default is <code><span class="token boolean">false</span></code>. You can also specify a single-line input box with <code>lines<span class="token operator">=</span><span class="token string">&quot;1&quot;</span></code>.</p><p>For example: <code><span class="token operator">&lt;</span>input singleLine<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h1 id="picture-control-img" tabindex="-1"><a class="header-anchor" href="#picture-control-img" aria-hidden="true">#</a> Picture control: img</h1><p>The picture control is used to display pictures from the network, local or embedded data, and can specify the pictures to be displayed in rounded rectangles, circles, etc. But it cannot be used to display animated gif images.</p>`,31),_={href:"https://developer.android.google.cn/reference/android/widget/ImageView.html",target:"_blank",rel:"noopener noreferrer"},S=t(`<h2 id="src" tabindex="-1"><a class="header-anchor" href="#src" aria-hidden="true">#</a> src</h2><p>Use a Uri to specify the source of the picture. It can be the address of the image (http://....), the local path (file://....) or the base64 data (&quot;data:image/png;base64,...&quot;).</p><p>If you use the image address or local path, Auto.js will automatically use the appropriate cache to store these images, reducing the time to load the next time.</p><p>For example, to display the logo of Baidu:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>frame<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;https://www.baidu.com/img/bd_logo1.png&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For another example, the picture showing the file /sdcard/1.png is <code><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;file:///sdcard/1.png&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code>. For another example, make base64 display a small wallet picture as:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>frame<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Img w <span class="token operator">=</span> <span class="token string">&quot;40&quot;</span> h <span class="token operator">=</span> <span class="token string">&quot;40&quot;</span> src <span class="token operator">=</span> <span class="token string">&quot;data: image / png; base64, iVBORw0KGgoAAAANSUhEUgAAADwAAAA8CAYAAAA6 / NlyAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAEu0lEQVRoge3bW4iVVRQH8N + ZnDKxvJUGCSWUlXYle / ChiKAkIiu7UXQjonwNIopM8cHoAhkRGQXdfIiE0Ep8KalQoptRTiFFZiRlOo6TPuSk4zk97G9w5vidc77LPjNi84f1MN + 391rrf9a + rL32N4xiFMcUjouo5zyciYPYH0FnBadiNiZiD2oR9JbGRdgiOFPDIXRhCWYU0Dcj6duV6BrQuyWxNaLowBcOO1Uv + 7EKc4WINUIlabMq6dNI35eJzRHDWOzS2MEB6cd6XI / OQf07k2frkzat9HQnNkcUG7R2dECq2I53EtmePMvaf + MwcWqKu + RzuqhUcfcwcWqKTvmiXFQ2GDodRhQz0aN9ZHsSG0cVrkGf + GT7MG8YeeTCHeKS7sOdMR1stjcWxY2YH0nXh1gdSdf / E + 2I8KVYigkl9ewVUsxNpT1qMzaKN4ejJxrtyEt7IuraE1EX2jOkp + JBnFxSzz68KuTqoyiK2BHuxDO4NpK + j / GoOAWF6BiH98Q / SHyCycPIIxMm4FPZCPTj30SynIFr + A7ThotMK4wXopA1Ym9gSiKv5Oj3bdKnFMpuS514E1fm6NMnbF098s3NS4QS0Ik5 + hyBsoSXYkGO9jvxy6C / t + IPIYJZcBWW57AXFfMNrSo2kqqw2l4hvSzcIRTw1sm24FVxb5s4NcR0 / JXBuUNYJttI6sDjsi1kvTgrGpsMjq3O4FQNa + SbNhWsyKj7I4wpzSYDbpFtKB / EOSn9ZwpRfx5Xp7yfhN0Z9FdxXxxKjTEe2zI4U8NnKf3PNrT2VcWTKe1eyGjjT + Eapm14IqMjNTyd0n9JSrsDwhmaEN2H8GMOO8viUjyMSfJVJh9O0bGoQdt1eFm2oVwve7 UpC1ssX568KEXH6fghp54s8lRkrk7CjpxOrGqg6wQ8IKSKWXPpVtIt8ly + v4ATf2t + yqlgDl5SbCjXy8JIXFXweQEHqngxo43JeEw54l + JVLKaJeypRZzoFxavrIWG6cKPW2SO9 + PCMkQHsLiA8fpIv5 / DmUn4qaCtpWWIEiLzdUHj9XJA2H5uFRbBZriuoI1NSpatpio + nJtFvFvYd2c1sDsGvxfQ3a / knrwgMtm0qD8rPSprCuq8uRmhVqvanBbvm + EQfsNKIcnvTmnTiUdwQcq73oJ2L2v2stXx6vyCRr8RDuk / C8OMUK24J6VtBaekPG81zxuh0TTJhC7FhtUOHF + n61whGalvu8uRWVJFvgPEYOkqQzhLVSPPXLoYa4Xh3Stcls1NaTdb8Xx7ZxnCvSUIfy / kzWno0Pyzx3dL2C0695Hto7NGUhXy5Lzp3kLZKiqNpNTl2 + YShgdIvyXbVck44TB / oKTNzWUIv13S + IDsFmpY84QvZAcwTbh4e04o18SwtbIM4dsiOTFYVgzSv7wN + m9vRqjV / PrA0JuCox1bhYNKQ7Qi3CcU1fpiedRG9AkLXhRfbxCnKlET0s21ifwaSWcPbopBdDDOwGtClTD2vCsq + / C68K8HmVDk7DhFyIsvFzKnGThN + 689 + oU9dptwQb5B + LB8dx4lMb7xqAhkJwo / xljhFFSfSdUc3mPrcbwj15P + pP0 / QiR7hYSkGsHnUYziWMF / mXV4JVcZ8G0AAAAASUVORK5CYII = &quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tint" tabindex="-1"><a class="header-anchor" href="#tint" aria-hidden="true">#</a> tint</h2><p>The image is colored, and its value is a color name or RGB color value. Using this attribute will paint all non-transparent areas in the picture with the same color. Can be used to change the color of the picture.</p><p>For example, for the base64 image above: <code><span class="token operator">&lt;</span>img w<span class="token operator">=</span><span class="token string">&quot;40&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;40&quot;</span> tint<span class="token operator">=</span><span class="token string">&quot;red&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;data:image/png;base64,...&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></code>, the color of the wallet icon Will turn red.</p><h2 id="scaletype" tabindex="-1"><a class="header-anchor" href="#scaletype" aria-hidden="true">#</a> scaleType</h2><p>Control the mode when the picture is scaled according to the width and height of the picture control. The optional values \u200B\u200Bare:</p><ul><li><code><span class="token property">center</span></code> displays the image in the center of the control, but does not perform zooming.</li><li><code><span class="token property">centerCrop</span></code> keeps the aspect ratio of the image and zooms the image so that the size (width and height) of the image is equal to or greater than the corresponding size of the control (excluding padding) and the image is displayed in the center of the control.</li><li><code><span class="token property">centerInside</span></code> keeps the aspect ratio of the image and zooms the image so that the size (width and height) of the image is smaller than the corresponding size of the view (excluding padding) and the image is displayed in the center of the control.</li><li><code><span class="token property">fitCenter</span></code> keeps the aspect ratio of the image and zooms the image, so that the width** or **height of the image is the same as the width and height of the control and the image is displayed in the center of the control</li><li><code><span class="token property">fitEnd</span></code> keeps the aspect ratio of the image and zooms the image so that the width** or **height of the image is the same as the width and height of the control and the image is displayed in the lower right corner of the control</li><li><code><span class="token property">fitStart</span></code> keeps the aspect ratio of the image and zooms the image so that the width** or **height of the image is the same as the width and height of the control and the image is displayed in the upper left corner of the control</li><li><code><span class="token property">fitXY</span></code> makes the picture and the width and height exactly match the width and height of the control, but the aspect ratio of the picture may not be consistent</li><li><code><span class="token property">matrix</span></code> uses the image matrix for scaling when drawing. Need to use the <code><span class="token function">setImageMatrix</span><span class="token punctuation">(</span>Matrix<span class="token punctuation">)</span></code> function in the code to take effect.</li></ul><p>The default scaleType is <code><span class="token property">fitCenter</span></code>; besides, the most commonly used one is <code><span class="token property">fitXY</span></code>, which can make the image scale to the same size as the control, but the image may be deformed.</p><h2 id="radius" tabindex="-1"><a class="header-anchor" href="#radius" aria-hidden="true">#</a> radius</h2><p>The radius of the image control. If it is set to half of the width and height of the control and the width and height of the control are the same, the picture will be cut into a circle display; otherwise the picture will be displayed as a rounded rectangle, the radius is the radius of the four rounded corners, and it can also be displayed by <code><span class="token property">radiusTopLeft</span></code>, <code> The attributes such <span class="token keyword">as</span> radiusTopRight</code>, <code><span class="token property">radiusBottomLeft</span></code>, <code><span class="token property">radiusBottomRight</span></code> set the radius of the four rounded corners respectively.</p><p>For example, the Auto.js icon with a rounded rectangle: <code><span class="token operator">&lt;</span>img w<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> radius<span class="token operator">=</span><span class="token string">&quot;20&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;white&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;http://www.autojs.org/assets/uploads /profile/3-profileavatar.png&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></code></p><p>For the unit of this attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="radiustopleft" tabindex="-1"><a class="header-anchor" href="#radiustopleft" aria-hidden="true">#</a> radiusTopLeft</h2><p>The radius of the fillet of the upper left corner of the image control. For the unit of this attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="radiustopright" tabindex="-1"><a class="header-anchor" href="#radiustopright" aria-hidden="true">#</a> radiusTopRight</h2><p>The radius of the fillet of the upper right corner of the picture control. For the unit of this attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="radiusbottomleft" tabindex="-1"><a class="header-anchor" href="#radiusbottomleft" aria-hidden="true">#</a> radiusBottomLeft</h2><p>The radius of the bottom left corner of the picture control. For the unit of this attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="radiusbottomright" tabindex="-1"><a class="header-anchor" href="#radiusbottomright" aria-hidden="true">#</a> radiusBottomRight</h2><p>The radius of the fillet of the bottom right corner of the image control. For the unit of this attribute, see [Unit of Dimensions: Dimension](#ui_Dimensional Unit_Dimension).</p><h2 id="borderwidth" tabindex="-1"><a class="header-anchor" href="#borderwidth" aria-hidden="true">#</a> borderWidth</h2><p>The border width of the picture control. It is used to display a frame outside the picture, and the frame will change accordingly as the shape (rounded corners, etc.) of the picture control changes. For example, an Auto.js icon with a rounded rectangle and a gray border: <code><span class="token operator">&lt;</span>img w<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> radius<span class="token operator">=</span><span class="token string">&quot;20&quot;</span> borderWidth<span class="token operator">=</span><span class="token string">&quot;5&quot;</span> borderColor<span class="token operator">=</span><span class="token string">&quot;gray&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;white&quot;</span> src<span class="token operator">=</span><span class="token string">&quot; http://www.autojs.org/assets/uploads/profile/3-profileavatar.png&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h2 id="bordercolor" tabindex="-1"><a class="header-anchor" href="#bordercolor" aria-hidden="true">#</a> borderColor</h2><p>The border color of the picture control.</p><h2 id="circle" tabindex="-1"><a class="header-anchor" href="#circle" aria-hidden="true">#</a> circle</h2><p>Specify whether the picture of the picture control is cut into a circle display. If it is <code><span class="token boolean">true</span></code>, the image control will keep its width and height consistent (if the width and height are inconsistent, keep the height equal to the width) and make the radius of the circle half of the width.</p><p>For example, a circular Auto.js icon: <code><span class="token operator">&lt;</span>img w<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> h<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> circle<span class="token operator">=</span><span class="token string">&quot;true&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;white&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;http://www.autojs.org/assets/uploads/ profile/3-profileavatar.png&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></code></p><h1 id="vertical-layout-vertical" tabindex="-1"><a class="header-anchor" href="#vertical-layout-vertical" aria-hidden="true">#</a> Vertical layout: vertical</h1><p>The vertical layout is a relatively simple layout. The controls in it will be placed one by one in the vertical direction, as shown in the following figure:</p><p>Vertical layout:</p><p>\u2014\u2014\u2014\u2014\u2014</p><p>| Control 1 |</p><p>| Control 2 |</p><p>| Control 3 |</p><p>| ............ |</p><p>\u2014\u2014\u2014\u2014\u2014\u2014</p><h2 id="layout-weight" tabindex="-1"><a class="header-anchor" href="#layout-weight" aria-hidden="true">#</a> layout_weight</h2><p>The control in the vertical layout can control the proportion of the height of the control to the height of the vertical layout through the <code><span class="token property">layout_weight</span></code> property. If you specify <code><span class="token property">layout_weight</span></code> for a control, then the height of this control = the remaining vertical layout height * layout_weight / weightSum; if you do not specify weightSum, then weightSum is the sum of the layout_weights of all child controls. The so-called &quot;remaining height&quot; refers to the vertical layout minus the remaining height of the control that does not specify the layout_weight. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical h<span class="token operator">=</span><span class="token string">&quot;100dp&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 1&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#ff0000&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 2&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#00ff00&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 3&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#0000ff&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this layout, the layout_weight of the three controls is 1, which means that their height will account for 1/3 of the vertical layout height, which is 33.3dp. Another example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical h<span class="token operator">=</span><span class="token string">&quot;100dp&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 1&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#ff0000&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;2&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 2&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#00ff00&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 3&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#0000ff&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this layout, the height of the first control is 1/4, the second control is 2/4, and the third control is 1/4. Another example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical h<span class="token operator">=</span><span class="token string">&quot;100dp&quot;</span> weightSum<span class="token operator">=</span><span class="token string">&quot;5&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 1&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#ff0000&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;2&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 2&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#00ff00&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 3&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#0000ff&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this layout, because the weightSum is specified as 5, the height of the first control is 1/5, the second control is 2/5, and the third control is 1/5. Another example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical h<span class="token operator">=</span><span class="token string">&quot;100dp&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text h<span class="token operator">=</span><span class="token string">&quot;40dp&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 1&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#ff0000&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;2&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 2&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#00ff00&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 3&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#0000ff&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this layout, the first control does not specify layout_weight, but specifies a height of 40dp, so no proportional calculation is added. At this time, the remaining height of the layout is 60dp. The height of the second control is 2/3 of the remaining height, which is 40dp, and the height of the third control is 1/3 of the remaining height, which is 20dp.</p><p>The layout_weight attribute of the vertical layout can also be used to control the height of its child controls to occupy the remaining space, for example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>vertical h<span class="token operator">=</span><span class="token string">&quot;100dp&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text h<span class="token operator">=</span><span class="token string">&quot;40dp&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 1&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#ff0000&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text h<span class="token operator">=</span><span class="token string">&quot;40dp&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 2&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#00ff00&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text layout_weight<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;Control 3&quot;</span> bg<span class="token operator">=</span><span class="token string">&quot;#0000ff&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this layout, the height of the third control will take up the remaining space excluding control 1 and control 2.</p><h1 id="horizontal-layout-horizontal" tabindex="-1"><a class="header-anchor" href="#horizontal-layout-horizontal" aria-hidden="true">#</a> Horizontal layout: horizontal</h1><p>The horizontal layout is a relatively simple layout. The controls in it are placed in order in the horizontal direction, as shown in the following figure: Horizontal layout: \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014</p><p>| Control 1 | Control 2 | Control 3 | ... |</p><p>\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014</p><h2 id="layout-weight-1" tabindex="-1"><a class="header-anchor" href="#layout-weight-1" aria-hidden="true">#</a> layout_weight</h2><p>In the horizontal layout, you can also use the layout_weight property to control the proportion of the child control&#39;s <strong>width</strong> to the parent layout. It is similar to the vertical layout and will not be repeated here.</p><h1 id="linear-layout-linear" tabindex="-1"><a class="header-anchor" href="#linear-layout-linear" aria-hidden="true">#</a> Linear layout: linear</h1><p>In fact, both vertical layout and horizontal layout are linear layouts. Linear layout has an orientation attribute, which is used to specify the direction of the layout. The optional values \u200B\u200Bare <code><span class="token property">vertical</span></code> and <code><span class="token property">horizontal</span></code>.</p><p>For example, <code><span class="token operator">&lt;</span>linear orientation<span class="token operator">=</span><span class="token string">&quot;vertical&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>linear<span class="token operator">&gt;</span></code> is equivalent to <code><span class="token operator">&lt;</span>vertical<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span></code>.</p><p>The default orientation of the linear layout is horizontal. Therefore, a linear layout that does not specify the orientation attribute is a horizontal layout.</p><h1 id="frame-layout-frame" tabindex="-1"><a class="header-anchor" href="#frame-layout-frame" aria-hidden="true">#</a> Frame layout: frame</h1><p>Frame layout</p><h1 id="relative-layout-relative" tabindex="-1"><a class="header-anchor" href="#relative-layout-relative" aria-hidden="true">#</a> Relative layout: relative</h1><h1 id="check-box-control-checkbox" tabindex="-1"><a class="header-anchor" href="#check-box-control-checkbox" aria-hidden="true">#</a> Check box control: checkbox</h1><h1 id="select-box-control-radio" tabindex="-1"><a class="header-anchor" href="#select-box-control-radio" aria-hidden="true">#</a> Select box control: radio</h1><h1 id="selection-box-layout-radiogroup" tabindex="-1"><a class="header-anchor" href="#selection-box-layout-radiogroup" aria-hidden="true">#</a> Selection box layout: radiogroup</h1><h1 id="switch-control-switch" tabindex="-1"><a class="header-anchor" href="#switch-control-switch" aria-hidden="true">#</a> Switch control: Switch</h1><p>The switch control is used to indicate whether an option is selected.</p><h2 id="checked" tabindex="-1"><a class="header-anchor" href="#checked" aria-hidden="true">#</a> checked</h2><p>Indicates whether the switch is selected. The optional values \u200B\u200Bare:</p><ul><li><code><span class="token boolean">true</span></code> switch on</li><li><code><span class="token boolean">false</span></code> off switch</li></ul><h2 id="text-1" tabindex="-1"><a class="header-anchor" href="#text-1" aria-hidden="true">#</a> text</h2><p>The text describing the switch.</p><h1 id="progress-bar-control-progressbar" tabindex="-1"><a class="header-anchor" href="#progress-bar-control-progressbar" aria-hidden="true">#</a> Progress bar control: progressbar</h1><h1 id="drag-bar-control-seekbar" tabindex="-1"><a class="header-anchor" href="#drag-bar-control-seekbar" aria-hidden="true">#</a> Drag bar control: seekbar</h1><h1 id="down-menu-control-spinner" tabindex="-1"><a class="header-anchor" href="#down-menu-control-spinner" aria-hidden="true">#</a> Down menu control: spinner</h1><h1 id="time-selection-control-timepicker" tabindex="-1"><a class="header-anchor" href="#time-selection-control-timepicker" aria-hidden="true">#</a> Time selection control: timepicker</h1><h1 id="date-selection-control-datepicker" tabindex="-1"><a class="header-anchor" href="#date-selection-control-datepicker" aria-hidden="true">#</a> Date selection control: datepicker</h1><h1 id="floating-button-control-fab" tabindex="-1"><a class="header-anchor" href="#floating-button-control-fab" aria-hidden="true">#</a> Floating button control: fab</h1><h1 id="title-bar-control-toolbar" tabindex="-1"><a class="header-anchor" href="#title-bar-control-toolbar" aria-hidden="true">#</a> Title bar control: toolbar</h1><h1 id="card-card" tabindex="-1"><a class="header-anchor" href="#card-card" aria-hidden="true">#</a> Card: card</h1><p>The card control is a control with rounded corners and shadows.</p><h2 id="cardbackgroundcolor" tabindex="-1"><a class="header-anchor" href="#cardbackgroundcolor" aria-hidden="true">#</a> cardBackgroundColor</h2><p>The background color of the card.</p><h2 id="cardcornerradius" tabindex="-1"><a class="header-anchor" href="#cardcornerradius" aria-hidden="true">#</a> cardCornerRadius</h2><p>The corner radius of the card.</p><h2 id="cardelevation" tabindex="-1"><a class="header-anchor" href="#cardelevation" aria-hidden="true">#</a> cardElevation</h2><p>Set the height of the card on the z axis to control the size of the shadow.</p><h2 id="contentpadding" tabindex="-1"><a class="header-anchor" href="#contentpadding" aria-hidden="true">#</a> contentPadding</h2><p>Set the inner margin of the card. This attribute includes four values:</p><ul><li><code><span class="token property">contentPaddingLeft</span></code> left padding</li><li><code><span class="token property">contentPaddingRight</span></code> right padding</li><li><code><span class="token property">contentPaddingTop</span></code> top padding</li><li><code><span class="token property">contentPaddingBottom</span></code> bottom padding</li></ul><h2 id="foreground-1" tabindex="-1"><a class="header-anchor" href="#foreground-1" aria-hidden="true">#</a> foreground</h2><p>Use the <code>foreground<span class="token operator">=</span><span class="token string">&quot;?selectableItemBackground&quot;</span></code> property to add a click effect to the card.</p><h1 id="drawer-layout-drawer" tabindex="-1"><a class="header-anchor" href="#drawer-layout-drawer" aria-hidden="true">#</a> Drawer layout: drawer</h1><h1 id="list-list" tabindex="-1"><a class="header-anchor" href="#list-list" aria-hidden="true">#</a> List: list</h1><h1 id="tab-tab" tabindex="-1"><a class="header-anchor" href="#tab-tab" aria-hidden="true">#</a> Tab: tab</h1><h1 id="ui-1" tabindex="-1"><a class="header-anchor" href="#ui-1" aria-hidden="true">#</a> ui</h1><h2 id="ui-layout-xml" tabindex="-1"><a class="header-anchor" href="#ui-layout-xml" aria-hidden="true">#</a> ui.layout(xml)</h2><ul><li><code><span class="token property">xml</span></code> {XML} | {string} Layout XML or XML string</li></ul><p>Render the layout XML as a View object and set it as the current view.</p><h2 id="ui-layoutfile-xmlfile" tabindex="-1"><a class="header-anchor" href="#ui-layoutfile-xmlfile" aria-hidden="true">#</a> ui.layoutFile(xmlFile)</h2><ul><li><code><span class="token property">xml</span></code> {string} The path of the layout XML file</li></ul><p>This function is similar to <code>ui<span class="token punctuation">.</span>layout</code>, except that it allows an xml file path to be passed in to render the layout.</p><h2 id="ui-inflate-xml-parent-null-attachtoparent-false" tabindex="-1"><a class="header-anchor" href="#ui-inflate-xml-parent-null-attachtoparent-false" aria-hidden="true">#</a> ui.inflate(xml[, parent = null, attachToParent = false])</h2><ul><li><code><span class="token property">xml</span></code> {string} | {XML} Layout XML or XML string</li><li><code><span class="token property">parent</span></code> {View} parent view</li><li><code><span class="token property">attachToParent</span></code> {boolean} Whether the rendered View is added to the parent view, the default is false</li><li>Back to {View}</li></ul><p>Render the layout XML as a View object. If the View will be used as a child View of a View, we recommend passing in the <code><span class="token property">parent</span></code> parameter so that some layout attributes that depend on the parent view can be applied correctly during rendering.</p><p>This function is used to dynamically create and display View.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>

$ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>linear id<span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>linear<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create 3 text controls dynamically and add them to the container</span>
<span class="token comment">// This is just an example, it is not recommended in fact, if you want to display the list,</span>
<span class="token comment">// Use the list component; dynamically creating dozens or dozens of Views will make the interface freeze</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> textView <span class="token operator">=</span> $ui<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>text textColor<span class="token operator">=</span><span class="token string">&quot;#000000&quot;</span> textSize<span class="token operator">=</span><span class="token string">&quot;14sp&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">,</span> $ui<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
    textView<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Text Control&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    $ui<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>textView<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="ui-registerwidget-name-widget" tabindex="-1"><a class="header-anchor" href="#ui-registerwidget-name-widget" aria-hidden="true">#</a> ui.registerWidget(name, widget)</h1><ul><li><code><span class="token property">name</span></code> {string} component name</li><li><code><span class="token property">widget</span></code> {Function} component</li></ul><p>Register a custom component. Refer to the example -&gt; interface controls -&gt; custom controls.</p><h1 id="ui-isuithread" tabindex="-1"><a class="header-anchor" href="#ui-isuithread" aria-hidden="true">#</a> ui.isUiThread()</h1><ul><li>Return {boolean}</li></ul><p>Returns whether the current thread is a UI thread.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>

<span class="token function">log</span><span class="token punctuation">(</span>$ui<span class="token punctuation">.</span><span class="token function">isUiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; true</span>

$threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span>$ui<span class="token punctuation">.</span><span class="token function">isUiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ui-findview-id" tabindex="-1"><a class="header-anchor" href="#ui-findview-id" aria-hidden="true">#</a> ui.findView(id)</h2><ul><li><code><span class="token property">id</span></code> {string} View ID</li><li>Back to {View}</li></ul><p>Find the corresponding view object according to the ID in the current view and return. If no view is currently set or no view with this ID is found, <code><span class="token keyword">null</span></code> is returned.</p><p>Generally, we use <code>ui<span class="token punctuation">.</span>xxx</code> to get the control with id xxx. If xxx is an existing attribute of ui, you can get this control by <code>$ui<span class="token punctuation">.</span><span class="token function">findView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><h2 id="ui-finish" tabindex="-1"><a class="header-anchor" href="#ui-finish" aria-hidden="true">#</a> ui.finish()</h2><p>End the current activity and destroy the interface.</p><h2 id="ui-setcontentview-view" tabindex="-1"><a class="header-anchor" href="#ui-setcontentview-view" aria-hidden="true">#</a> ui.setContentView(view)</h2><ul><li><code><span class="token property">view</span></code> {View}</li></ul><p>Set the view object as the current view.</p><h2 id="ui-post-callback-delay-0" tabindex="-1"><a class="header-anchor" href="#ui-post-callback-delay-0" aria-hidden="true">#</a> ui.post(callback[, delay = 0])</h2><ul><li><code><span class="token property">callback</span></code> {Function} callback function</li><li><code><span class="token property">delay</span></code> {number} Delay in milliseconds</li></ul><p>Add <code><span class="token property">callback</span></code> to the message loop of the UI thread and execute it after delay milliseconds (there is no guarantee that it will be executed after delay milliseconds).</p><p>This function can be used to delay the execution of actions in the UI thread (sleep cannot be used in the UI thread), or it can be used to update the UI in a child thread.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>

ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>frame<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>text id<span class="token operator">=</span><span class="token string">&quot;result&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

ui<span class="token punctuation">.</span>result<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Calculating&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Calculate 1+ ... + 10000000 in the child thread</span>
threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Since the UI cannot be operated on the child thread, it must be thrown to the UI thread for execution</span>
    ui<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        ui<span class="token punctuation">.</span>result<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ui-run-callback" tabindex="-1"><a class="header-anchor" href="#ui-run-callback" aria-hidden="true">#</a> ui.run(callback)</h2><ul><li><code><span class="token property">callback</span></code> {Function} callback function</li><li>Return the execution result of callback</li></ul><p>Execute <code><span class="token property">callback</span></code> in the UI thread. If it is currently in the UI thread, execute the <code><span class="token property">callback</span></code> directly; otherwise, throw the <code><span class="token property">callback</span></code> to the UI thread for execution (added to the end of the UI thread\u2019s message loop), ** and wait for the callback execution to end (blocking the current Thread)**.</p><h2 id="ui-statusbarcolor-color" tabindex="-1"><a class="header-anchor" href="#ui-statusbarcolor-color" aria-hidden="true">#</a> ui.statusBarColor(color)</h2><ul><li>color {string} | {number} color</li></ul><p>Set the color of the status bar of the current interface.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
ui<span class="token punctuation">.</span><span class="token function">statusBarColor</span><span class="token punctuation">(</span><span class="token string">&quot;#000000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ui-useandroidresources" tabindex="-1"><a class="header-anchor" href="#ui-useandroidresources" aria-hidden="true">#</a> ui.useAndroidResources()</h2><p>Enable the use of Android&#39;s layout, drawable, animation, style and other resource features. After enabling this feature, perform the following configuration in project.json, you can write the interface like writing Android native:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    androidResources<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;resDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;res&quot;</span><span class="token punctuation">,</span> <span class="token comment">// resource folder</span>
        <span class="token property">&quot;manifest&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AndroidManifest.xml&quot;</span> <span class="token comment">// AndroidManifest file path</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The res folder usually has the following structure:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">-</span>res
    <span class="token operator">-</span>layout <span class="token comment">// Layout resources</span>
    <span class="token operator">-</span>drawable <span class="token comment">// resources such as pictures and shapes</span>
    <span class="token operator">-</span>menu <span class="token comment">// menu resource</span>
    <span class="token operator">-</span>values \u200B\u200B<span class="token comment">// resources such as styles and strings</span>
    <span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Refer to Examples -&gt; Complex Interface -&gt; Android Native Interface.</p><h1 id="dimension-unit-dimension" tabindex="-1"><a class="header-anchor" href="#dimension-unit-dimension" aria-hidden="true">#</a> Dimension unit: Dimension</h1><h1 id="drawables" tabindex="-1"><a class="header-anchor" href="#drawables" aria-hidden="true">#</a> Drawables</h1><h1 id="colour" tabindex="-1"><a class="header-anchor" href="#colour" aria-hidden="true">#</a> colour</h1><p><strong>(Improving...)</strong></p>`,151);function F(C,A){const s=r("ExternalLinkIcon");return p(),i("div",null,[y,n("p",null,[a("The following introduces the main properties and methods of the control. If you want to view all of its properties and methods, please read "),n("a",x,[a("TextView"),e(s)]),a(".")]),q,w,T,j,I,n("p",null,[a("The input box control is also a special text control, so all the properties and functions of the text control function are applicable to the button control. The input box control has its own attributes and functions. To view all of these, read "),n("a",z,[a("EditText"),e(s)]),a(".")]),V,n("p",null,[a("Here only introduces his main methods and attributes. If you want to view all of his methods and attributes, read "),n("a",_,[a("ImageView"),e(s)]),a(".")]),S])}const B=o(v,[["render",F],["__file","ui.html.vue"]]);export{B as default};
