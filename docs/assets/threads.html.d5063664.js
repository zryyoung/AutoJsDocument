import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as u,c as l,a as s,b as n,d as a,w as e,e as o,r as c}from"./app.6aa2b576.js";const r={},d=o(`<h1 id="threads" tabindex="-1"><a class="header-anchor" href="#threads" aria-hidden="true">#</a> threads</h1><blockquote><p>Stability: 1-Experiment</p></blockquote><p>The threads module provides multi-threading support and can start a new thread to run scripts.</p><p>The main thread of the script will wait for the execution of all child threads to complete before stopping. Therefore, if there is an infinite loop in the child threads, please call <code><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to stop the script directly or <code>threads<span class="token punctuation">.</span><span class="token function">shutDownAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to stop all if necessary. Child thread.</p><p>All threads started by <code>threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> will automatically stop when the script is forcibly stopped.</p><p>Because JavaScript does not have multithreading support, you may encounter unexpected problems.</p><h2 id="threads-start-action" tabindex="-1"><a class="header-anchor" href="#threads-start-action" aria-hidden="true">#</a> threads.start(action)</h2><ul><li><code><span class="token property">action</span></code> {Function} The function to be executed in the new thread</li><li>Return <a href="#threads_thread">Thread</a></li></ul><p>Start a new thread and execute the action.</p><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Code executed in a new thread</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;child thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Script main thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <a href="#threads_thread">Thread</a> object returned by this function can obtain the status of the thread and control the running of the thread. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> thread <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;child thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Stop thread execution</span>
thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See <a href="#threads_thread">Thread</a> for more information.</p><h2 id="threads-shutdownall" tabindex="-1"><a class="header-anchor" href="#threads-shutdownall" aria-hidden="true">#</a> threads.shutDownAll()</h2><p>Stop all child threads started by <code>threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p><h2 id="threads-currentthread" tabindex="-1"><a class="header-anchor" href="#threads-currentthread" aria-hidden="true">#</a> threads.currentThread()</h2><ul><li>Return <a href="#threads_thread">Thread</a></li></ul><p>Return the current thread.</p><h2 id="threads-disposable" tabindex="-1"><a class="header-anchor" href="#threads-disposable" aria-hidden="true">#</a> threads.disposable()</h2><ul><li>Return <a href="#threads_disposable">Disposable</a></li></ul><p>Create a Disposable object to wait for a one-time result from another thread. For more information, see [Thread Communication](#threads_Thread Communication) and <a href="#threads_disposable">Disposable</a>.</p><h2 id="threads-atomic-initialvalue" tabindex="-1"><a class="header-anchor" href="#threads-atomic-initialvalue" aria-hidden="true">#</a> threads.atomic([initialValue])</h2>`,23),k=s("li",null,[s("code",null,[s("span",{class:"token property"},"initialValue")]),n(" {number} The initial integer value, the default is 0")],-1),h={href:"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicLong.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicLong.html",target:"_blank",rel:"noopener noreferrer"},v=s("h2",{id:"threads-lock",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#threads-lock","aria-hidden":"true"},"#"),n(" threads.lock()")],-1),b={href:"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html",target:"_blank",rel:"noopener noreferrer"},g=o(`<h1 id="thread" tabindex="-1"><a class="header-anchor" href="#thread" aria-hidden="true">#</a> Thread</h1><p>The thread object, the object returned by <code>threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, is used to obtain and control the state of a thread, interact with other threads, and so on.</p><p>The Thread object provides the same API as the timers module, such as <code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, etc., which are used to execute the corresponding timing callbacks in the thread, so that the threads can directly interact. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> thread <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Timer executed in the child thread</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Child thread:&quot;</span> <span class="token operator">+</span> threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The current thread is the main thread:&quot;</span> <span class="token operator">+</span> threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Wait for the child thread to start</span>
thread<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Timer executed in the child thread</span>
thread<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//This code will be executed in the child thread</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The current thread is a child thread:&quot;</span> <span class="token operator">+</span> threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="thread-interrupt" tabindex="-1"><a class="header-anchor" href="#thread-interrupt" aria-hidden="true">#</a> Thread.interrupt()</h2><p>Interrupt the thread running.</p><h2 id="thread-join-timeout" tabindex="-1"><a class="header-anchor" href="#thread-join-timeout" aria-hidden="true">#</a> Thread.join([timeout])</h2><ul><li><code><span class="token property">timeout</span></code> {number} waiting time in milliseconds</li></ul><p>Wait for the thread execution to complete. If timeout is 0, it will wait until the thread execution is completed; otherwise, it will wait at most timeout milliseconds.</p><p>E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//Start the child thread to calculate 1 and add to 10000</span>
<span class="token keyword">var</span> thread <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Wait for the thread to complete</span>
thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;sum = &quot;</span><span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="isalive" tabindex="-1"><a class="header-anchor" href="#isalive" aria-hidden="true">#</a> isAlive()</h2><ul><li>Return {boolean}</li></ul><p>Returns whether the thread is alive. If the thread has not started or has ended, return <code><span class="token boolean">false</span></code>; if the thread has started or is running, return <code><span class="token boolean">true</span></code>.</p><h2 id="waitfor" tabindex="-1"><a class="header-anchor" href="#waitfor" aria-hidden="true">#</a> waitFor()</h2><p>Wait for the thread to start executing. After calling <code>threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, the thread still needs some time to start execution, so calling this function will wait for the thread to start execution; if the thread is already in the execution state, it will return immediately.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> thread <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//do something</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
thread<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
thread<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//do something</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="thread-settimeout-callback-delay-args" tabindex="-1"><a class="header-anchor" href="#thread-settimeout-callback-delay-args" aria-hidden="true">#</a> Thread.setTimeout(callback, delay[, ...args])</h2>`,18),y=o(`<p>The difference is that the timer will be executed in this thread. If the current thread has not yet started execution or has finished execution, an \u02BBIllegalStateException\` is thrown.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;current thread (main thread):&quot;</span> <span class="token operator">+</span> threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> thread <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Set an empty timing to keep the thread running</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
thread<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;current thread (child thread):&quot;</span> <span class="token operator">+</span> threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="thread-setinterval-callback-delay-args" tabindex="-1"><a class="header-anchor" href="#thread-setinterval-callback-delay-args" aria-hidden="true">#</a> Thread.setInterval(callback, delay[, ...args])</h2>`,3),w=s("p",null,"The difference is that the timer will be executed in this thread. If the current thread has not yet started execution or has finished execution, an \u02BBIllegalStateException` is thrown.",-1),x=s("h2",{id:"thread-setimmediate-callback-args",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#thread-setimmediate-callback-args","aria-hidden":"true"},"#"),n(" Thread.setImmediate(callback[, ...args])")],-1),_=s("p",null,"The difference is that the timer will be executed in this thread. If the current thread has not yet started execution or has finished execution, an \u02BBIllegalStateException` is thrown.",-1),j=s("h2",{id:"thread-clearinterval-id",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#thread-clearinterval-id","aria-hidden":"true"},"#"),n(" Thread.clearInterval(id)")],-1),T=s("p",null,"The difference is that the timer will be executed in this thread. If the current thread has not yet started execution or has finished execution, an \u02BBIllegalStateException` is thrown.",-1),q=s("h2",{id:"thread-cleartimeout-id",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#thread-cleartimeout-id","aria-hidden":"true"},"#"),n(" Thread.clearTimeout(id)")],-1),I=s("p",null,"The difference is that the timer will be executed in this thread. If the current thread has not yet started execution or has finished execution, an \u02BBIllegalStateException` is thrown.",-1),A=s("h2",{id:"thread-clearimmediate-id",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#thread-clearimmediate-id","aria-hidden":"true"},"#"),n(" Thread.clearImmediate(id)")],-1),S=o(`<p>The difference is that the timer will be executed in this thread. If the current thread has not yet started execution or has finished execution, an \u02BBIllegalStateException\` is thrown.</p><h1 id="thread-safety" tabindex="-1"><a class="header-anchor" href="#thread-safety" aria-hidden="true">#</a> Thread safety</h1><p>Thread safety is a relatively professional programming problem, and this chapter is only provided to users who need it.</p><p>Quoting Wikipedia&#39;s explanation:</p><blockquote><p>Thread safety is a term in programming, which means that when a function or function library is called in a multithreaded environment, it can correctly handle the shared variables between multiple threads, so that the program functions can be completed correctly.</p></blockquote><p>In Auto.js, inter-thread variables are shared under the premise of complying with JavaScript variable scope rules. For example, global variables can be accessed in all threads, and their visibility in all threads is guaranteed. However, the atomicity of any operation is not guaranteed. For example, the classic self-increment &quot;i++&quot; will not be an atomic operation.</p><p>Rhino and Auto.js provide some simple facilities to solve simple thread safety problems, such as lock <code>threads<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, function synchronization lock <code><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, integer atomic variable <code>threads<span class="token punctuation">.</span><span class="token function">atomic</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, etc.</p><p>For example, for the self-increment operation of integers shared by multiple threads (the self-increment operation can cause problems because the self-increment operation is actually <code>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span></code>, that is, read the value of i first, and add 1 to it , And then assign a value to i, if two threads perform auto-increment operations at the same time, the value of i may only increase by 1), you should use the <code>threads<span class="token punctuation">.</span><span class="token function">atomic</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function to create an integer atomic variable, or use a lock<code> threads<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to ensure the atomicity of the operation, or use <code><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to increase synchronization locks.</p><p>The thread-unsafe code is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After running this piece of code, open the log, and you can see that there are duplicate values \u200B\u200Bin the log.</p><p>The thread-safe code using <code>threads<span class="token punctuation">.</span><span class="token function">atomic</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//The object returned by atomic guarantees the atomicity of self-increment</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">atomic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>or:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//The lock guarantees the atomicity of the operation</span>
<span class="token keyword">var</span> lock <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>or:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//The sync function adds a synchronization lock to the function inside, so that at most one thread can execute this function at the same time</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> getAndIncrement <span class="token operator">=</span> <span class="token function">sync</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition, Array is not thread-safe. If you have such a complex requirement, please use Android and Java related APIs to implement it. For example, <code><span class="token property">CopyOnWriteList</span></code>, <code><span class="token property">Vector</span></code>, etc. are all thread-safe classes that replace arrays and are used in different scenarios. E.g:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;length is&quot;</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;The first element is&quot;</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But it is obvious that these classes are not as easy to use as arrays, nor can you use convenient functions such as <code><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>. In the future, thread-safe arrays may be added to solve this problem. Of course, you can also lock each array operation to solve thread safety issues:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> numsLock <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Add element 123 to the array</span>
    numsLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Thread: %s, Array: %s&quot;</span><span class="token punctuation">,</span> threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    numsLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Add element 456 to the array</span>
    numsLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Thread: %s, Array: %s&quot;</span><span class="token punctuation">,</span> threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    numsLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Delete the last element of the array</span>
numsLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Thread: %s, Array: %s&quot;</span><span class="token punctuation">,</span> threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
numsLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sync-func" tabindex="-1"><a class="header-anchor" href="#sync-func" aria-hidden="true">#</a> sync(func)</h2><ul><li><code><span class="token property">func</span></code> {Function} function</li><li>Return {Function}</li></ul><p>Add a synchronization lock to the function func and return as a new function.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    i <span class="token operator">+=</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> syncAdd <span class="token operator">=</span> <span class="token function">sync</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">syncAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="thread-communication" tabindex="-1"><a class="header-anchor" href="#thread-communication" aria-hidden="true">#</a> Thread communication</h1><p>Auto.js provides some simple facilities to support simple thread communication. <code>threads<span class="token punctuation">.</span><span class="token function">disposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> is used for one thread to wait for the (one-time) result of another thread, while <code>Lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> provides a Condition object for general thread communication (await, signal). In addition, the <code><span class="token property">events</span></code> module can also be used for thread communication, which is achieved by specifying the thread of the callback execution of the <code><span class="token property">EventEmitter</span></code>.</p><p>Use <code>threads<span class="token punctuation">.</span><span class="token function">disposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> to simply wait and get the execution result of a thread. For example, to wait for a thread to calculate &quot;1+...+10000&quot;:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> sum <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">disposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Start sub-thread calculation</span>
threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//Add from 1 to 10000</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        s <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//Notify the main thread to receive the result</span>
    sum<span class="token punctuation">.</span><span class="token function">setAndNotify</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//blockedGet() is used to wait for the result</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;sum = &quot;</span><span class="token operator">+</span> sum<span class="token punctuation">.</span><span class="token function">blockedGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the above code is implemented with <code><span class="token property">Condition</span></code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Create a new lock</span>
<span class="token keyword">var</span> lock <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Create a new condition, namely &quot;calculation completed&quot;</span>
<span class="token keyword">var</span> complete <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//Add from 1 to 10000</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//Notify the main thread to receive the result</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    complete<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Wait for the calculation to complete</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
complete<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Print the result</span>
<span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;sum = &quot;</span><span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the appeal code is implemented with the <code><span class="token property">events</span></code> module:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Create a new emitter, and specify the thread of callback execution as the current thread</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">emitter</span><span class="token punctuation">(</span>threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//Add from 1 to 10000</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        s <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//Send event result to notify the main thread to receive the result</span>
    sum<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sum<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toastLog</span><span class="token punctuation">(</span><span class="token string">&quot;sum = &quot;</span><span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">&quot;, current thread:&quot;</span> <span class="token operator">+</span> threads<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For other issues related to threads, such as producer and consumer issues, please use Java-related methods to solve them, such as <code>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue</code>.</p>`,34);function L(C,E){const p=c("ExternalLinkIcon"),t=c("RouterLink");return u(),l("div",null,[d,s("ul",null,[k,s("li",null,[n("Return "),s("a",h,[n("AtomicLong"),a(p)])])]),s("p",null,[n("Create a new integer atomic variable. For more information, see [Thread Safety](#threads_Thread Safety) and "),s("a",m,[n("AtomicLong"),a(p)]),n(" .")]),v,s("ul",null,[s("li",null,[n("Return "),s("a",b,[n("ReentrantLock"),a(p)])])]),s("p",null,[n("Create a reentrant lock. For more information, see [Thread Safety](#threads_Thread Safety) and "),s("a",f,[n("ReentrantLock"),a(p)]),n(" .")]),g,s("p",null,[n("See "),a(t,{to:"/en/v8/timers.html#timers_settimeout_callback_delay_args"},{default:e(()=>[n("timers.setTimeout()")]),_:1}),n(".")]),y,s("p",null,[n("See "),a(t,{to:"/en/v8/timers.html#timers_setinterval_callback_delay_args"},{default:e(()=>[n("timers.setInterval()")]),_:1}),n(".")]),w,x,s("p",null,[n("See "),a(t,{to:"/en/v8/timers.html#timers_setimmediate_callback_delay_args"},{default:e(()=>[n("timers.setImmediate()")]),_:1}),n(".")]),_,j,s("p",null,[n("See "),a(t,{to:"/en/v8/timers.html#timers_clearinterval_id"},{default:e(()=>[n("timers.clearInterval()")]),_:1}),n(".")]),T,q,s("p",null,[n("See "),a(t,{to:"/en/v8/timers.html#timers_cleartimeout_id"},{default:e(()=>[n("timers.clearTimeout()")]),_:1}),n(".")]),I,A,s("p",null,[n("See "),a(t,{to:"/en/v8/timers.html#timers_clearimmediate_id"},{default:e(()=>[n("timers.clearImmediate()")]),_:1}),n(".")]),S])}const V=i(r,[["render",L],["__file","threads.html.vue"]]);export{V as default};
