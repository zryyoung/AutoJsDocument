import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as r,a,b as n,d as s,w as l,e,r as o}from"./app.6aa2b576.js";const u={},d=a("h1",{id:"globals",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#globals","aria-hidden":"true"},"#"),n(" globals")],-1),h=e(`<ul><li>exports</li><li>module</li><li>require() The following objects are specific to Auto.js. Some built-in objects are part of the JavaScript language itself, and they are also global.</li></ul><p>Some functions in modules can also be used globally directly for ease of use, and these functions are not described here. For example, the timers module has functions such as setInterval, setTimeout, etc.</p><h2 id="sleep-n" tabindex="-1"><a class="header-anchor" href="#sleep-n" aria-hidden="true">#</a> sleep(n)</h2><ul><li><code><span class="token property">n</span></code> {number} milliseconds</li></ul><p>Suspend the running time for n <strong>milliseconds</strong>. 1 second is equal to 1000 milliseconds.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// pause for 5 seconds</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="currentpackage" tabindex="-1"><a class="header-anchor" href="#currentpackage" aria-hidden="true">#</a> currentPackage()</h2><ul><li>return {string}</li></ul><p>Returns the package name of the most recently monitored running application, which can generally be assumed to be the package name of the currently running application.</p><p>This function depends on the accessibility service, and throws an exception and prompts the user to start it if the service is not started.</p><h2 id="currentactivity" tabindex="-1"><a class="header-anchor" href="#currentactivity" aria-hidden="true">#</a> currentActivity()</h2><ul><li>Returns {string}</li></ul><p>Returns the name of the last monitored running Activity, which can generally be considered to be the name of the currently running Activity.</p><p>This function depends on the accessibility service, and throws an exception and prompts the user to start it if the service is not started.</p><h2 id="setclip-text" tabindex="-1"><a class="header-anchor" href="#setclip-text" aria-hidden="true">#</a> setClip(text)</h2><ul><li><code><span class="token property">text</span></code> {string} text</li></ul><p>Sets the clipboard contents. This clipboard is the system clipboard, which can be used by &quot;pasting&quot; in the input box of the general application.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setClip</span><span class="token punctuation">(</span><span class="token string">&quot;Clipboard text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="getclip" tabindex="-1"><a class="header-anchor" href="#getclip" aria-hidden="true">#</a> getClip()</h2><ul><li>Returns {string}</li></ul><p>Returns the contents of the system clipboard.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Clipboard content is:&quot;</span> <span class="token operator">+</span> <span class="token function">getClip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="toast-message" tabindex="-1"><a class="header-anchor" href="#toast-message" aria-hidden="true">#</a> toast(message)</h2><ul><li>message {string} The message to be displayed</li></ul><p>Display the message message in a bubble for a few seconds. (The exact time depends on the Android system, usually it is 2 seconds)</p><p>Note that the display of the message is executed &quot;asynchronously&quot; and the program does not wait for the message to disappear before continuing. If the command is executed in a loop, there may be a situation where the script stops running and there is still a constant bubble message. For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After running this program, it will finish executing quickly and keep popping up messages, which cannot be stopped by closing all scripts in Task Manager. To ensure that the bubble message before continuing execution you can use.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or modify the toast function to.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> _toast_ <span class="token operator">=</span> toast<span class="token punctuation">;</span>
<span class="token function-variable function">toast</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">_toast_</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="toastlog-message" tabindex="-1"><a class="header-anchor" href="#toastlog-message" aria-hidden="true">#</a> toastLog(message)</h2><ul><li>message {string} The message to be displayed</li></ul><p>Equivalent to <code><span class="token function">toast</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></code>. The message message is displayed and output in the console. See console.log.</p><h2 id="waitforactivity-activity-period-200" tabindex="-1"><a class="header-anchor" href="#waitforactivity-activity-period-200" aria-hidden="true">#</a> waitForActivity(activity[, period = 200])</h2><ul><li><code><span class="token property">activity</span></code> Activity name</li><li><code><span class="token property">period</span></code> polling wait interval (milliseconds)</li></ul><p>Wait for the specified Activity to appear, period is the interval to check the Activity.</p><h2 id="waitforpackage-package-period-200" tabindex="-1"><a class="header-anchor" href="#waitforpackage-package-period-200" aria-hidden="true">#</a> waitForPackage(package[, period = 200])</h2><ul><li><code><span class="token keyword">package</span></code> package name</li><li><code><span class="token property">period</span></code> polling wait interval (milliseconds)</li></ul><p>Waits for the specified application to appear. For example <code><span class="token function">waitForPackage</span><span class="token punctuation">(</span><span class="token string">&quot;com.tencent.mm&quot;</span><span class="token punctuation">)</span></code> for waiting for the current interface to be WeChat.</p><h2 id="exit" tabindex="-1"><a class="header-anchor" href="#exit" aria-hidden="true">#</a> exit()</h2><p>Stops the script from running immediately.</p><p>Stopping immediately is done by throwing <code><span class="token property">ScriptInterruptedException</span></code>, so if you use <code><span class="token keyword">try</span><span class="token operator">...</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>catch</code> to catch the exception of the exit() function, the script will not stop immediately, but will still run for a few lines before stopping.</p><h2 id="random-min-max" tabindex="-1"><a class="header-anchor" href="#random-min-max" aria-hidden="true">#</a> random(min, max)</h2><ul><li><code><span class="token property">min</span></code> {number} lower bound of the interval to generate the random number</li><li><code><span class="token property">max</span></code> {number} the upper bound of the interval generated by the random number</li><li>return {number}</li></ul><p>Returns a random number between [min..... . max]. For example random(0, 2) may produce 0, 1, 2.</p><h2 id="random" tabindex="-1"><a class="header-anchor" href="#random" aria-hidden="true">#</a> random()</h2><ul><li>return {number}</li></ul><p>Returns a random floating point number in [0, 1).</p><h2 id="requiresapi-api" tabindex="-1"><a class="header-anchor" href="#requiresapi-api" aria-hidden="true">#</a> requiresApi(api)</h2><ul><li><code><span class="token property">api</span></code> Android version number</li></ul><p>Indicates that this script requires the specified version of Android API to run. For example, <code><span class="token function">requiresApi</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span></code> means the script needs to run on Android 4.4 and above.</p><p>Calling this function will determine the version number of the device running the script, and throw an exception if it does not meet the requirement.</p><p>You can refer to the following comparison table of Android API and version:</p><p>Platform version: API level</p><p>Android 7.0: 24</p><p>Android 6.0: 23</p><p>Android 5.1: 22</p><p>Android 5.0: 21</p><p>Android 4.4W: 20</p><p>Android 4.4: 19</p><p>Android 4.3: 18</p><h2 id="requiresautojsversion-version" tabindex="-1"><a class="header-anchor" href="#requiresautojsversion-version" aria-hidden="true">#</a> requiresAutojsVersion(version)</h2><ul><li><code><span class="token property">version</span></code> {string} | {number} The version or version number of Auto.js</li></ul><p>Indicates that this script requires the specified version of Auto.js to run. For example, <code><span class="token function">requiresAutojsVersion</span><span class="token punctuation">(</span><span class="token string">&quot;3.0.0 Beta&quot;</span><span class="token punctuation">)</span></code> means that the script needs to run on Auto.js 3.0.0 Beta and above.</p><p>Calling this function determines the version of Auto.js on which the script is running, and throws an exception if it does not meet the requirement.</p><p>The version parameter can be an integer, e.g. <code><span class="token function">requiresAutojsVersion</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span></code>, or a string, e.g. <code><span class="token number">3.0</span><span class="token number">.0</span> Beta</code>, <code><span class="token number">3.1</span><span class="token number">.0</span> Alpha4</code>, <code><span class="token number">3.2</span><span class="token number">.0</span></code>, etc.</p><p>You can get the current Auto.js version number and version by using <code>app<span class="token punctuation">.</span>autojs<span class="token punctuation">.</span>versionCode</code> and <code>app<span class="token punctuation">.</span>autojs<span class="token punctuation">.</span>versionName</code>.</p><h2 id="runtime-requestpermissions-permissions" tabindex="-1"><a class="header-anchor" href="#runtime-requestpermissions-permissions" aria-hidden="true">#</a> runtime.requestPermissions(permissions)</h2><ul><li><code><span class="token property">permissions</span></code> {Array} String array of permissions</li></ul><p>Dynamically request permissions for Android. For example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Request GPS permissions</span>
runtime<span class="token punctuation">.</span><span class="token function">requestPermissions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;access_fine_location&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Although Android has many permissions, they must be written to Manifest to be requested dynamically. To prevent abuse of permissions, Auto.js can currently only request two additional permissions.</p><ul><li><code><span class="token property">access_fine_location</span></code> GPS permission</li><li><code><span class="token property">record_audio</span></code> Recording permission</li></ul><p>You can add permissions to Auto.js and the applications packaged with Auto.js through the APK editor.</p>`,75),m={href:"https://developer.android.com/guide/topics/permissions/overview",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="runtime-loadjar-path" tabindex="-1"><a class="header-anchor" href="#runtime-loadjar-path" aria-hidden="true">#</a> runtime.loadJar(path)</h2><ul><li><code><span class="token property">path</span></code> {string} jar file path</li></ul><p>Load the target jar file, the classes of that jar file will be available after successful loading.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// load jsoup.jar</span>
runtime<span class="token punctuation">.</span><span class="token function">loadJar</span><span class="token punctuation">(</span><span class="token string">&quot;. /jsoup.jar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// use jsoup to parse html</span>
<span class="token function">importClass</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>Jsoup<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>Jsoup<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;. /test.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v={href:"https://jsoup.org/download",target:"_blank",rel:"noopener noreferrer"},b=e('<h2 id="runtime-loaddex-path" tabindex="-1"><a class="header-anchor" href="#runtime-loaddex-path" aria-hidden="true">#</a> runtime.loadDex(path)</h2><ul><li><code><span class="token property">path</span></code> {string} dex file path</li></ul><p>Load the target dex file, after successful loading will be able to use the classes of that dex file.</p><p>Because loading jar is actually converting jar to dex and then loading it, loading dex file will be much faster than jar file. You can use the dx tool of Android SDK build tools to convert jar to dex.</p><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> context</h2><p>Global variable. An android.content.Context object.</p><p>Note that this object is ApplicationContext, so it can&#39;t be used to create interface, dialog, etc.</p>',7);function g(f,y){const i=o("RouterLink"),t=o("ExternalLinkIcon");return c(),r("div",null,[d,a("p",null,[n("Global variables and functions are available in all modules. However, the following variables have scope only within the module, see "),s(i,{to:"/en/v8/modules.html"},{default:l(()=>[n("module")]),_:1}),n(" for details.")]),h,a("p",null,[n("See "),a("a",m,[n("Permissions Overview"),s(t)]),n(" for a list of all Android permissions. (not used).")]),k,a("p",null,[n("(jsoup is a Java implementation of a library for parsing the Html DOM, which can be downloaded at "),a("a",v,[n("Jsoup"),s(t)]),n(")")]),b])}const w=p(u,[["render",g],["__file","globals.html.vue"]]);export{w as default};
