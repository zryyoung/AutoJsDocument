import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as s,e as t}from"./app.6aa2b576.js";const n={},o=t(`<h1 id="storages" tabindex="-1"><a class="header-anchor" href="#storages" aria-hidden="true">#</a> storages</h1><blockquote><p>Stability: 2 - Stable</p></blockquote><p>The storages module provides support for saving simple data, user configurations, etc. Saved data is retained unless the application is uninstalled or actively deleted.</p><p>storages supports data types such as <code><span class="token property">number</span></code>, <code><span class="token property">boolean</span></code>, <code><span class="token property">string</span></code> and serialized access to <code><span class="token property">Object</span></code>, <code><span class="token property">Array</span></code> with <code><span class="token constant">JSON</span><span class="token punctuation">.</span>stringify</code>.</p><p>The data stored in storages is shared between scripts, and any script that knows the name of the storage can access the corresponding data, so it cannot be used for storing sensitive data. storages cannot provide domain-independent storage like LocalStorage in web development, because the path to the script can change at any time.</p><h2 id="storages-create-name" tabindex="-1"><a class="header-anchor" href="#storages-create-name" aria-hidden="true">#</a> storages.create(name)</h2><ul><li><code><span class="token property">name</span></code> {string} LocalStorageName</li></ul><p>Creates a local storage and returns a <code><span class="token property">Storage</span></code> object. Data from local stores with different names are separated, while data from local stores with the same name are shared.</p><p>For example, in a script that creates a storage with the name ABC and stores a=123:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> storage <span class="token operator">=</span> storages<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
storage<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>And in another script it is possible to get the value of ABC as well as a: \`\`\`</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> storage <span class="token operator">=</span> storages<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a = &quot;</span> <span class="token operator">+</span> storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Therefore, the name of the local storage is more important, try to use a name that contains unique information such as domain name, author email to avoid conflicts, for example</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> storage <span class="token operator">=</span> storages<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;2732014414@qq.com:ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="storages-remove-name" tabindex="-1"><a class="header-anchor" href="#storages-remove-name" aria-hidden="true">#</a> storages.remove(name)</h2><ul><li><code><span class="token property">name</span></code> {string} local storage name</li></ul><p>Removes a local store and all of its data. Returns false if the store does not exist; otherwise returns true.</p><h2 id="storages-1" tabindex="-1"><a class="header-anchor" href="#storages-1" aria-hidden="true">#</a> Storages</h2><h2 id="storage-get-key-defaultvalue" tabindex="-1"><a class="header-anchor" href="#storage-get-key-defaultvalue" aria-hidden="true">#</a> Storage.get(key[, defaultValue])</h2><ul><li><code><span class="token property">key</span></code> {string} key value</li><li><code><span class="token property">defaultValue</span></code> {any} Optional, default value</li></ul><p>Retrieve the data with key value key from the local storage and return it.</p><p>If the store does not contain the data, then the default value is returned if the default value parameter is specified, otherwise undefined is returned.</p><p>The data returned may be of any data type, depending on the data type when the key is stored using <code>Storage<span class="token punctuation">.</span>put</code>.</p><h2 id="storage-put-key-value" tabindex="-1"><a class="header-anchor" href="#storage-put-key-value" aria-hidden="true">#</a> Storage.put(key, value)</h2><ul><li><code><span class="token property">key</span></code> {string} key value</li><li><code><span class="token property">value</span></code> {any} value</li></ul><p>Saves the value value to local storage. value can be any data type other than undefined. If value is undefined then TypeError is thrown.</p><p>The storage process actually uses JSON.stringify to convert the value to a string before saving it, so the value must be JSON-able to be accepted.</p><h2 id="storage-remove-key" tabindex="-1"><a class="header-anchor" href="#storage-remove-key" aria-hidden="true">#</a> Storage.remove(key)</h2><ul><li><code><span class="token property">key</span></code> {string} key</li></ul><p>Removes the data whose key value is key. Does not return any value.</p><h2 id="storage-contains-key" tabindex="-1"><a class="header-anchor" href="#storage-contains-key" aria-hidden="true">#</a> Storage.contains(key)</h2><ul><li><code><span class="token property">key</span></code> {string} key</li></ul><p>Returns whether this local storage contains data whose key is key. Returns true if it does, otherwise false.</p><h2 id="storage-clear" tabindex="-1"><a class="header-anchor" href="#storage-clear" aria-hidden="true">#</a> Storage.clear()</h2><p>Remove all data from this local storage. Does not return any value.</p>`,35),r=[o];function p(c,i){return e(),s("div",null,r)}const u=a(n,[["render",p],["__file","storages.html.vue"]]);export{u as default};
