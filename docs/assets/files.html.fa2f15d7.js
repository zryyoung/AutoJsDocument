import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as a,e as t}from"./app.6aa2b576.js";const s={},i=t(`<h1 id="files" tabindex="-1"><a class="header-anchor" href="#files" aria-hidden="true">#</a> files</h1><blockquote><p>Stability: 2-Stable</p></blockquote><p>The files module provides some common file processing, including file read and write, move, copy, delete, etc.</p><p>One-time file reading and writing can directly use convenient functions such as <code>files<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code>files<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code>files<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, but if you need to read and write frequently or randomly, use The <code><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function opens a file object to manipulate the file, and calls the <code><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> function to close the file after the operation is completed.</p><h2 id="files-isfile-path" tabindex="-1"><a class="header-anchor" href="#files-isfile-path" aria-hidden="true">#</a> files.isFile(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {boolean}</li></ul><p>Returns whether the path path is a file.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/folder/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//return false</span>
<span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//return true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-isdir-path" tabindex="-1"><a class="header-anchor" href="#files-isdir-path" aria-hidden="true">#</a> files.isDir(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {boolean}</li></ul><p>Returns whether the path path is a folder.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/folder/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//return true</span>
<span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//return false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-isemptydir-path" tabindex="-1"><a class="header-anchor" href="#files-isemptydir-path" aria-hidden="true">#</a> files.isEmptyDir(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {boolean}</li></ul><p>Returns whether the folder path is an empty folder. If the path is not a folder, it will directly return <code><span class="token boolean">false</span></code>.</p><h2 id="files-join-parent-child" tabindex="-1"><a class="header-anchor" href="#files-join-parent-child" aria-hidden="true">#</a> files.join(parent, child)</h2><ul><li><code><span class="token property">parent</span></code> {string} Parent directory path</li><li><code><span class="token property">child</span></code> {string} sub path</li><li>Return {string}</li></ul><p>Connect two paths and return, for example, <code>files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span></code> returns &quot;/sdcard/1.txt&quot;.</p><h2 id="files-create-path" tabindex="-1"><a class="header-anchor" href="#files-create-path" aria-hidden="true">#</a> files.create(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {boolean}</li></ul><p>Create a file or folder and return whether it was created successfully. If the file already exists, it will directly return <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/new folder/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="files-createwithdirs-path" tabindex="-1"><a class="header-anchor" href="#files-createwithdirs-path" aria-hidden="true">#</a> files.createWithDirs(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {boolean}</li></ul><p>Create a file or folder and return whether it was created successfully. If the folder where the file is located does not exist, first create a series of folders where it is located. If the file already exists, it will directly return <code><span class="token boolean">false</span></code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>files<span class="token punctuation">.</span><span class="token function">createWithDirs</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/new folder/new folder/new folder/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="files-exists-path" tabindex="-1"><a class="header-anchor" href="#files-exists-path" aria-hidden="true">#</a> files.exists(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {boolean}</li></ul><p>Returns whether the file at path path exists.</p><h2 id="files-ensuredir-path" tabindex="-1"><a class="header-anchor" href="#files-ensuredir-path" aria-hidden="true">#</a> files.ensureDir(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li></ul><p>Make sure that the folder where path is located exists. If the folder where the path is located does not exist, create the folder.</p><p>For example, for the path &quot;/sdcard/Download/ABC/1.txt&quot;, if the /Download/ folder does not exist, the Download will be created first, and then the ABC folder will be created.</p><h2 id="files-read-path-encoding-utf-8" tabindex="-1"><a class="header-anchor" href="#files-read-path-encoding-utf-8" aria-hidden="true">#</a> files.read(path[, encoding = &quot;utf-8&quot;])</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li><code><span class="token property">encoding</span></code> {string} character encoding, optional, default is utf-8</li><li>Return {string}</li></ul><p>Read all the contents of the text file path and return. If the file does not exist, a <code><span class="token property">FileNotFoundException</span></code> is thrown.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="files-readbytes-path" tabindex="-1"><a class="header-anchor" href="#files-readbytes-path" aria-hidden="true">#</a> files.readBytes(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {byte[]}</li></ul><p>Read all the contents of the file path and return a byte array. If the file does not exist, a <code><span class="token property">FileNotFoundException</span></code> is thrown.</p><p>Note that this array is a Java array and does not have JavaScript array forEach, slice and other functions.</p><p>An example of printing a file in hexadecimal format is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">log</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-write-path-text-encoding-utf-8" tabindex="-1"><a class="header-anchor" href="#files-write-path-text-encoding-utf-8" aria-hidden="true">#</a> files.write(path, text[, encoding = &quot;utf-8&quot;])</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li><code><span class="token property">text</span></code> {string} The text content to be written</li><li><code><span class="token property">encoding</span></code> {string} character encoding</li></ul><p>Write text to the file path. If the file exists, it will be overwritten, and if it does not exist, it will be created.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">&quot;File content&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//Write to file</span>
files<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//View files with other apps</span>
app<span class="token punctuation">.</span><span class="token function">viewFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-writebytes-path-bytes" tabindex="-1"><a class="header-anchor" href="#files-writebytes-path-bytes" aria-hidden="true">#</a> files.writeBytes(path, bytes)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li><code><span class="token property">bytes</span></code> {byte[]} byte array, binary data to be written</li></ul><p>Write bytes to the file path. If the file exists, it will be overwritten, and if it does not exist, it will be created.</p><h2 id="files-append-path-text-encoding-utf-8" tabindex="-1"><a class="header-anchor" href="#files-append-path-text-encoding-utf-8" aria-hidden="true">#</a> files.append(path, text[, encoding =&#39;utf-8&#39;])</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li><code><span class="token property">text</span></code> {string} The text content to be written</li><li><code><span class="token property">encoding</span></code> {string} character encoding</li></ul><p>Append text to the end of the file path. If the file does not exist, create it.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">&quot;Additional file content&quot;</span><span class="token punctuation">;</span>
files<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
files<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//View files with other apps</span>
app<span class="token punctuation">.</span><span class="token function">viewFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-appendbytes-path-text-encoding-utf-8" tabindex="-1"><a class="header-anchor" href="#files-appendbytes-path-text-encoding-utf-8" aria-hidden="true">#</a> files.appendBytes(path, text[, encoding =&#39;utf-8&#39;])</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li><code><span class="token property">bytes</span></code> {byte[]} byte array, binary data to be written</li></ul><p>Append bytes to the end of the file path. If the file does not exist, create it.</p><h2 id="files-copy-frompath-topath" tabindex="-1"><a class="header-anchor" href="#files-copy-frompath-topath" aria-hidden="true">#</a> files.copy(fromPath, toPath)</h2><ul><li><code><span class="token property">fromPath</span></code> {string} The path of the original file to be copied</li><li><code><span class="token property">toPath</span></code> {string} The file path to copy to</li><li>Return {boolean}</li></ul><p>Copy the file and return whether the copy was successful. For example, <code>files<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/Download/1.txt&quot;</span><span class="token punctuation">)</span></code>.</p><h2 id="files-move-frompath-topath" tabindex="-1"><a class="header-anchor" href="#files-move-frompath-topath" aria-hidden="true">#</a> files.move(fromPath, toPath)</h2><ul><li><code><span class="token property">fromPath</span></code> {string} The original file path to be moved</li><li><code><span class="token property">toPath</span></code> {string} The file path to move to</li><li>Return {boolean}</li></ul><p>Move the file and return whether the move was successful. For example, <code>files<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/Download/1.txt&quot;</span><span class="token punctuation">)</span></code> will move the 1.txt file from the root directory of the sd card to the Download folder.</p><h2 id="files-rename-path-newname" tabindex="-1"><a class="header-anchor" href="#files-rename-path-newname" aria-hidden="true">#</a> files.rename(path, newName)</h2><ul><li><code><span class="token property">path</span></code> {string} The original file path to be renamed</li><li><code><span class="token property">newName</span></code> {string} The new file name to be renamed</li><li>Return {boolean}</li></ul><p>Rename the file and return whether the rename was successful. For example, <code>files<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2.txt&quot;</span><span class="token punctuation">)</span></code>.</p><h2 id="files-renamewithoutextension-path-newname" tabindex="-1"><a class="header-anchor" href="#files-renamewithoutextension-path-newname" aria-hidden="true">#</a> files.renameWithoutExtension(path, newName)</h2><ul><li><code><span class="token property">path</span></code> {string} The original file path to be renamed</li><li><code><span class="token property">newName</span></code> {string} The new file name to be renamed</li><li>Return {boolean}</li></ul><p>Rename the file without the extension, and return whether the rename is successful. For example, <code>files<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span></code> will rename &quot;1.txt&quot; to &quot;2.txt&quot;.</p><h2 id="files-getname-path" tabindex="-1"><a class="header-anchor" href="#files-getname-path" aria-hidden="true">#</a> files.getName(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {string}</li></ul><p>Returns the file name of the file. For example, <code>files<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span></code> returns &quot;1.txt&quot;.</p><h2 id="files-getnamewithoutextension-path" tabindex="-1"><a class="header-anchor" href="#files-getnamewithoutextension-path" aria-hidden="true">#</a> files.getNameWithoutExtension(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {string}</li></ul><p>Returns the file name of the file without extension. For example, <code>files<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span></code> returns &quot;1&quot;.</p><h2 id="files-getextension-path" tabindex="-1"><a class="header-anchor" href="#files-getextension-path" aria-hidden="true">#</a> files.getExtension(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {string}</li></ul><p>Returns the extension of the file. For example, <code>files<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span></code> returns &quot;txt&quot;.</p><h2 id="files-remove-path" tabindex="-1"><a class="header-anchor" href="#files-remove-path" aria-hidden="true">#</a> files.remove(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li>Return {boolean}</li></ul><p>Delete a file or <strong>empty folder</strong>, and return whether the deletion was successful.</p><h2 id="files-removedir-path" tabindex="-1"><a class="header-anchor" href="#files-removedir-path" aria-hidden="true">#</a> files.removeDir(path)</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li><code><span class="token property">path</span></code> {string} path</li><li>Return {boolean}</li></ul><p>Delete the folder. If the folder is not empty, delete all the contents of the folder and then delete the folder, and return whether the deletion is successful.</p><h2 id="files-getsdcardpath" tabindex="-1"><a class="header-anchor" href="#files-getsdcardpath" aria-hidden="true">#</a> files.getSdcardPath()</h2><ul><li>Return {string}</li></ul><p>Return the SD card path. The so-called SD card, that is, external memory.</p><h2 id="files-cwd" tabindex="-1"><a class="header-anchor" href="#files-cwd" aria-hidden="true">#</a> files.cwd()</h2><ul><li>Return {string}</li></ul><p>Returns the &quot;current working folder path&quot; of the script. The path refers to, if the script itself is a script file, return the directory where the script file is located; otherwise, return <code><span class="token keyword">null</span></code> to obtain other set paths.</p><p>For example, for the script file &quot;/sdcard/script/1.js&quot;, running <code>files<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> returns &quot;/sdcard/script/&quot;.</p><h2 id="files-path-relativepath" tabindex="-1"><a class="header-anchor" href="#files-path-relativepath" aria-hidden="true">#</a> files.path(relativePath)</h2><ul><li><code><span class="token property">relativePath</span></code> {string} relative path</li><li>Return {string}</li></ul><p>Returns the absolute path corresponding to the relative path. For example, <code>files<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;./1.png&quot;</span><span class="token punctuation">)</span></code>, if the script that runs this statement is located in the folder &quot;/sdcard/script/&quot;, then <code><span class="token string">&quot;/sdcard/script/1.png&quot;</span></code> will be returned.</p><h2 id="files-listdir-path-filter" tabindex="-1"><a class="header-anchor" href="#files-listdir-path-filter" aria-hidden="true">#</a> files.listDir(path[, filter])</h2><ul><li><code><span class="token property">path</span></code> {string} path</li><li><code><span class="token property">filter</span></code> {Function} Filter function, optional. Receive a <code><span class="token property">string</span></code> parameter (file name) and return a <code><span class="token property">boolean</span></code> value.</li></ul><p>Lists an array of the names of the files and folders that meet the conditions under the folder path. If the filter parameter is not added, all files and folders are returned.</p><p>List all files and folders in the sdcard directory as:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">listDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>List all js script files in the script directory as:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> dir <span class="token operator">=</span> <span class="token string">&quot;/sdcard/script/&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> jsFiles <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">listDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.js&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> files<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>jsFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="open-path-mode-r-encoding-utf-8-buffersize-8192" tabindex="-1"><a class="header-anchor" href="#open-path-mode-r-encoding-utf-8-buffersize-8192" aria-hidden="true">#</a> open(path[, mode = &quot;r&quot;, encoding = &quot;utf-8&quot;, bufferSize = 8192])</h2><ul><li><code><span class="token property">path</span></code> {string} File path, such as &quot;/sdcard/1.txt&quot;.</li><li><code><span class="token property">mode</span></code> {string} File opening mode, including: <ul><li>&quot;r&quot;: Read only text mode. In this mode, only <strong>text</strong> read operations can be performed on files.</li><li>&quot;w&quot;: Only write text mode. In this mode, only <strong>text</strong> overwrite operations can be performed on files.</li><li>&quot;a&quot;: Additional text mode. In this mode, the written text will be appended to the end of the file.</li><li>&quot;rw&quot;: Random read and write text mode. In this mode, the written text will be appended to the end of the file. Currently, binary mode and random read/write mode are not supported.</li></ul></li><li><code><span class="token property">encoding</span></code> {string} Character encoding.</li><li><code><span class="token property">bufferSize</span></code> {number} The buffer size for file reading and writing.</li></ul><p>Open a file. Different file objects are returned according to the open mode. include:</p><ul><li>&quot;r&quot;: Return a ReadableTextFile object.</li><li>&quot;w&quot;, &quot;a&quot;: returns a WritableTextFile object.</li></ul><p>For &quot;w&quot; mode, if the file does not exist, one will be created, and the content of the file will be cleared if it already exists; FileNotFoundException will be thrown if files in other modes do not exist.</p><h1 id="readabletextfile" tabindex="-1"><a class="header-anchor" href="#readabletextfile" aria-hidden="true">#</a> ReadableTextFile</h1><p>Readable file object.</p><h2 id="readabletextfile-read" tabindex="-1"><a class="header-anchor" href="#readabletextfile-read" aria-hidden="true">#</a> ReadableTextFile.read()</h2><p>Returns a string of all remaining contents of the file.</p><h2 id="readabletextfile-read-maxcount" tabindex="-1"><a class="header-anchor" href="#readabletextfile-read-maxcount" aria-hidden="true">#</a> ReadableTextFile.read(maxCount)</h2><ul><li><code><span class="token property">maxCount</span></code> {Number} Maximum number of characters read</li></ul><p>Read the file and return the string up to maxCount. There is no error even if the remaining content of the file is less than maxCount.</p><h2 id="readabletextfile-readline" tabindex="-1"><a class="header-anchor" href="#readabletextfile-readline" aria-hidden="true">#</a> ReadableTextFile.readline()</h2><p>Read a line and return (not including line breaks).</p><h2 id="readabletextfile-readlines" tabindex="-1"><a class="header-anchor" href="#readabletextfile-readlines" aria-hidden="true">#</a> ReadableTextFile.readlines()</h2><p>Read all the remaining rows and return an array of strings composed of them in order.</p><h2 id="close" tabindex="-1"><a class="header-anchor" href="#close" aria-hidden="true">#</a> close()</h2><p>Close the file.</p><p><strong>Open a file and close it when it is no longer in use</strong></p><h1 id="pwritabletextfile" tabindex="-1"><a class="header-anchor" href="#pwritabletextfile" aria-hidden="true">#</a> PWritableTextFile</h1><p>Writable file object.</p><h2 id="pwritabletextfile-write-text" tabindex="-1"><a class="header-anchor" href="#pwritabletextfile-write-text" aria-hidden="true">#</a> PWritableTextFile.write(text)</h2><ul><li><code><span class="token property">text</span></code> {string} text</li></ul><p>Write the text content text to the file.</p><h2 id="pwritabletextfile-writeline-line" tabindex="-1"><a class="header-anchor" href="#pwritabletextfile-writeline-line" aria-hidden="true">#</a> PWritableTextFile.writeline(line)</h2><ul><li><code><span class="token property">text</span></code> {string} text</li></ul><p>Write the text line to the file and write a newline character.</p><h2 id="pwritabletextfile-writelines-lines" tabindex="-1"><a class="header-anchor" href="#pwritabletextfile-writelines-lines" aria-hidden="true">#</a> PWritableTextFile.writelines(lines)</h2><ul><li><code><span class="token property">lines</span></code> {Array} string array</li></ul><p>Write many lines into the file....</p><h2 id="pwritabletextfile-flush" tabindex="-1"><a class="header-anchor" href="#pwritabletextfile-flush" aria-hidden="true">#</a> PWritableTextFile.flush()</h2><p>Output the contents of the buffer to a file.</p><h2 id="pwritabletextfile-close" tabindex="-1"><a class="header-anchor" href="#pwritabletextfile-close" aria-hidden="true">#</a> PWritableTextFile.close()</h2><p>Close the file. At the same time, the contents of the buffer will be output to the file.</p><p><strong>After opening a file for writing, it must be closed when it is no longer used, otherwise the file may be lost</strong></p>`,136),o=[i];function p(l,r){return n(),a("div",null,o)}const u=e(s,[["render",p],["__file","files.html.vue"]]);export{u as default};
